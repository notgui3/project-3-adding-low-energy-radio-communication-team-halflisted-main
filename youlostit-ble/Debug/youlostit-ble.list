
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  000061b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e14  08004e14  000061b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08004e1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001b0  08004fcc  000061b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08004fcc  000064bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9fd  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002032  00000000  00000000  00010bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  000135c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002742f  00000000  00000000  00013cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b432  00000000  00000000  0003b12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f162b  00000000  00000000  0004655d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  00137bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0013aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ce0 	.word	0x08004ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	08004ce0 	.word	0x08004ce0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fba2 	bl	80039d0 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fc7c 	bl	8001bd4 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fb7d 	bl	80039e0 <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 faa1 	bl	8000838 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fb66 	bl	80039e0 <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa8a 	bl	8000838 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fb3a 	bl	80039e0 <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb24 	bl	80009c4 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fb26 	bl	80039e0 <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa4a 	bl	8000838 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fb0f 	bl	80039e0 <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa33 	bl	8000838 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 faf8 	bl	80039e0 <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa1c 	bl	8000838 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fae1 	bl	80039e0 <free>

	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f98b 	bl	8000738 <setConnectable>

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa52 	bl	80008d0 <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa82 	bl	8000940 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa7a 	bl	8000940 <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002e4 	.word	0x200002e4
 8000458:	200002e8 	.word	0x200002e8
 800045c:	20000000 	.word	0x20000000
 8000460:	200002e2 	.word	0x200002e2
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001cc 	.word	0x200001cc
 8000478:	200001d0 	.word	0x200001d0
 800047c:	200001d4 	.word	0x200001d4
 8000480:	2000010c 	.word	0x2000010c
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002d8 	.word	0x200002d8
 80004a0:	20000114 	.word	0x20000114
 80004a4:	200002e0 	.word	0x200002e0
 80004a8:	20000134 	.word	0x20000134
 80004ac:	200002dc 	.word	0x200002dc
 80004b0:	20000124 	.word	0x20000124

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fe5f 	bl	8002194 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fb79 	bl	8001bd4 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fe6b 	bl	80021c4 <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fee1 	bl	80032c4 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fe5b 	bl	80021c4 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fb60 	bl	8001bd4 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fe52 	bl	80021c4 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fec8 	bl	80032c4 <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 fea9 	bl	80032c4 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fe1c 	bl	80021c4 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fe11 	bl	80021c4 <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08004cf8 	.word	0x08004cf8
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002ec 	.word	0x200002ec
 80005c4:	200002e8 	.word	0x200002e8

080005c8 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fdc5 	bl	80021c4 <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fe3b 	bl	80032c4 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fcb6 	bl	8002fda <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fd9f 	bl	80021c4 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>

 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004d00 	.word	0x08004d00
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002ec 	.word	0x200002ec
 80006a8:	200002e8 	.word	0x200002e8

080006ac <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b6:	217f      	movs	r1, #127	@ 0x7f
 80006b8:	481a      	ldr	r0, [pc, #104]	@ (8000724 <catchBLE+0x78>)
 80006ba:	f7ff fefb 	bl	80004b4 <fetchBleEvent>
 80006be:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d12a      	bne.n	800071c <catchBLE+0x70>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c6:	2203      	movs	r2, #3
 80006c8:	4917      	ldr	r1, [pc, #92]	@ (8000728 <catchBLE+0x7c>)
 80006ca:	4816      	ldr	r0, [pc, #88]	@ (8000724 <catchBLE+0x78>)
 80006cc:	f7ff ff7c 	bl	80005c8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d0:	2205      	movs	r2, #5
 80006d2:	4916      	ldr	r1, [pc, #88]	@ (800072c <catchBLE+0x80>)
 80006d4:	4813      	ldr	r0, [pc, #76]	@ (8000724 <catchBLE+0x78>)
 80006d6:	f7ff ff77 	bl	80005c8 <checkEventResp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <catchBLE+0x78>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <catchBLE+0x84>)
 80006e8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <catchBLE+0x78>)
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <catchBLE+0x84>)
 80006f2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <catchBLE+0x88>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2205      	movs	r2, #5
 80006fa:	4619      	mov	r1, r3
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <catchBLE+0x78>)
 80006fe:	f7ff ff63 	bl	80005c8 <checkEventResp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d009      	beq.n	800071c <catchBLE+0x70>
			 *(connectionHandler) = buffer[5];
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <catchBLE+0x78>)
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <catchBLE+0x84>)
 8000710:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000712:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <catchBLE+0x78>)
 8000714:	799b      	ldrb	r3, [r3, #6]
 8000716:	b21a      	sxth	r2, r3
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <catchBLE+0x84>)
 800071a:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200001d8 	.word	0x200001d8
 8000728:	200000ec 	.word	0x200000ec
 800072c:	200000f8 	.word	0x200000f8
 8000730:	20000144 	.word	0x20000144
 8000734:	200000fd 	.word	0x200000fd

08000738 <setConnectable>:

 void setConnectable(){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800073e:	200c      	movs	r0, #12
 8000740:	f003 f946 	bl	80039d0 <malloc>
 8000744:	4603      	mov	r3, r0
 8000746:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4a36      	ldr	r2, [pc, #216]	@ (8000824 <setConnectable+0xec>)
 800074c:	6810      	ldr	r0, [r2, #0]
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	8891      	ldrh	r1, [r2, #4]
 8000752:	7992      	ldrb	r2, [r2, #6]
 8000754:	8099      	strh	r1, [r3, #4]
 8000756:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3309      	adds	r3, #9
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	330a      	adds	r3, #10
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	330b      	adds	r3, #11
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3307      	adds	r3, #7
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]


		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000780:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <setConnectable+0xf0>)
 8000782:	2208      	movs	r2, #8
 8000784:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000786:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <setConnectable+0xf0>)
 8000788:	2215      	movs	r2, #21
 800078a:	70da      	strb	r2, [r3, #3]

		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 800078c:	2019      	movs	r0, #25
 800078e:	f003 f91f 	bl	80039d0 <malloc>
 8000792:	4603      	mov	r3, r0
 8000794:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <setConnectable+0xf0>)
 800079a:	461c      	mov	r4, r3
 800079c:	4613      	mov	r3, r2
 800079e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007a0:	6020      	str	r0, [r4, #0]
 80007a2:	6061      	str	r1, [r4, #4]
 80007a4:	60a2      	str	r2, [r4, #8]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	330d      	adds	r3, #13
 80007ae:	220c      	movs	r2, #12
 80007b0:	68f9      	ldr	r1, [r7, #12]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fc93 	bl	80040de <memcpy>

		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007b8:	2119      	movs	r1, #25
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f7ff ff2a 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 80007c0:	2007      	movs	r0, #7
 80007c2:	f003 f905 	bl	80039d0 <malloc>
 80007c6:	4603      	mov	r3, r0
 80007c8:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 80007ca:	bf00      	nop
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <setConnectable+0xf4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0fb      	beq.n	80007cc <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 80007d4:	2107      	movs	r1, #7
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fe6c 	bl	80004b4 <fetchBleEvent>
 80007dc:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10f      	bne.n	8000804 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007e4:	2207      	movs	r2, #7
 80007e6:	4912      	ldr	r1, [pc, #72]	@ (8000830 <setConnectable+0xf8>)
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff feed 	bl	80005c8 <checkEventResp>
 80007ee:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <setConnectable+0xfc>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <setConnectable+0xfc>)
 8000802:	801a      	strh	r2, [r3, #0]
		}
		}

		free(rxEvent);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f003 f8eb 	bl	80039e0 <free>
		free(discoverableCommand);
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f003 f8e8 	bl	80039e0 <free>
		free(localname);
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f003 f8e5 	bl	80039e0 <free>
		HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f001 f9dc 	bl	8001bd4 <HAL_Delay>
 }
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	2000010c 	.word	0x2000010c
 8000828:	20000078 	.word	0x20000078
 800082c:	200002e8 	.word	0x200002e8
 8000830:	20000088 	.word	0x20000088
 8000834:	200002e2 	.word	0x200002e2

08000838 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff fee3 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	005a      	lsls	r2, r3, #1
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f8ba 	bl	80039d0 <malloc>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <BLE_command+0x90>)
 8000862:	601a      	str	r2, [r3, #0]

		long contatore=0;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000868:	e007      	b.n	800087a <BLE_command+0x42>
			contatore++;
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	3301      	adds	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000876:	4293      	cmp	r3, r2
 8000878:	dc07      	bgt.n	800088a <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <BLE_command+0x94>)
 800087e:	f001 fc89 	bl	8002194 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f0      	beq.n	800086a <BLE_command+0x32>
 8000888:	e000      	b.n	800088c <BLE_command+0x54>
				break;
 800088a:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <BLE_command+0x90>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	005a      	lsls	r2, r3, #1
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4619      	mov	r1, r3
 800089a:	f7ff fe0b 	bl	80004b4 <fetchBleEvent>
 800089e:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d107      	bne.n	80008b6 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <BLE_command+0x90>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe8a 	bl	80005c8 <checkEventResp>
 80008b4:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f001 f98c 	bl	8001bd4 <HAL_Delay>


	 return response;
 80008bc:	697b      	ldr	r3, [r7, #20]
 }
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002e4 	.word	0x200002e4
 80008cc:	48001000 	.word	0x48001000

080008d0 <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <addService+0x60>)
 80008de:	2210      	movs	r2, #16
 80008e0:	68f9      	ldr	r1, [r7, #12]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fbfb 	bl	80040de <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <addService+0x64>)
 80008ee:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008f0:	2301      	movs	r3, #1
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2307      	movs	r3, #7
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <addService+0x68>)
 80008f8:	2117      	movs	r1, #23
 80008fa:	480e      	ldr	r0, [pc, #56]	@ (8000934 <addService+0x64>)
 80008fc:	f7ff ff9c 	bl	8000838 <BLE_command>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <addService+0x4c>
			handle[0]=rxEvent[7];
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <addService+0x6c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	79da      	ldrb	r2, [r3, #7]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <addService+0x6c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	3301      	adds	r3, #1
 8000918:	7a12      	ldrb	r2, [r2, #8]
 800091a:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <addService+0x6c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f85d 	bl	80039e0 <free>
 }
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000095 	.word	0x20000095
 8000934:	20000090 	.word	0x20000090
 8000938:	200000a8 	.word	0x200000a8
 800093c:	200002e4 	.word	0x200002e4

08000940 <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <addCharacteristic+0x74>)
 8000950:	2210      	movs	r2, #16
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fbc2 	bl	80040de <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <addCharacteristic+0x78>)
 8000960:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	785a      	ldrb	r2, [r3, #1]
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <addCharacteristic+0x78>)
 8000968:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <addCharacteristic+0x78>)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000970:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <addCharacteristic+0x78>)
 8000972:	7e3b      	ldrb	r3, [r7, #24]
 8000974:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000976:	2301      	movs	r3, #1
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2307      	movs	r3, #7
 800097c:	4a0f      	ldr	r2, [pc, #60]	@ (80009bc <addCharacteristic+0x7c>)
 800097e:	211e      	movs	r1, #30
 8000980:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <addCharacteristic+0x78>)
 8000982:	f7ff ff59 	bl	8000838 <BLE_command>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10a      	bne.n	80009a2 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <addCharacteristic+0x80>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	79da      	ldrb	r2, [r3, #7]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <addCharacteristic+0x80>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	7a12      	ldrb	r2, [r2, #8]
 80009a0:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <addCharacteristic+0x80>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 f81a 	bl	80039e0 <free>
 }
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000b7 	.word	0x200000b7
 80009b8:	200000b0 	.word	0x200000b0
 80009bc:	200000d0 	.word	0x200000d0
 80009c0:	200002e4 	.word	0x200002e4

080009c4 <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3306      	adds	r3, #6
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <updateCharValue+0x9c>)
 80009dc:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <updateCharValue+0x9c>)
 80009e4:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	785a      	ldrb	r2, [r3, #1]
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <updateCharValue+0x9c>)
 80009ec:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <updateCharValue+0x9c>)
 80009f4:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	785a      	ldrb	r2, [r3, #1]
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <updateCharValue+0x9c>)
 80009fc:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <updateCharValue+0x9c>)
 8000a04:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <updateCharValue+0x9c>)
 8000a0c:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	330a      	adds	r3, #10
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 ffdc 	bl	80039d0 <malloc>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4910      	ldr	r1, [pc, #64]	@ (8000a60 <updateCharValue+0x9c>)
 8000a20:	6978      	ldr	r0, [r7, #20]
 8000a22:	f003 fb5c 	bl	80040de <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	330a      	adds	r3, #10
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	6a39      	ldr	r1, [r7, #32]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fb55 	bl	80040de <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f103 010a 	add.w	r1, r3, #10
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2307      	movs	r3, #7
 8000a40:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <updateCharValue+0xa0>)
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff fef8 	bl	8000838 <BLE_command>

	 free(commandComplete);
 8000a48:	6978      	ldr	r0, [r7, #20]
 8000a4a:	f002 ffc9 	bl	80039e0 <free>
	 free(rxEvent);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <updateCharValue+0xa4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 ffc4 	bl	80039e0 <free>
 }
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000d8 	.word	0x200000d8
 8000a64:	200000d0 	.word	0x200000d0
 8000a68:	200002e4 	.word	0x200002e4

08000a6c <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <disconnectBLE+0x98>)
 8000a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d105      	bne.n	8000a8a <disconnectBLE+0x1e>
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <disconnectBLE+0x98>)
 8000a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d037      	beq.n	8000afa <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <disconnectBLE+0x9c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <disconnectBLE+0x98>)
 8000a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <disconnectBLE+0x98>)
 8000a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000aa4:	2313      	movs	r3, #19
 8000aa6:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aa8:	1d38      	adds	r0, r7, #4
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2307      	movs	r3, #7
 8000ab0:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <disconnectBLE+0xa0>)
 8000ab2:	2107      	movs	r1, #7
 8000ab4:	f7ff fec0 	bl	8000838 <BLE_command>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11e      	bne.n	8000afc <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000abe:	217f      	movs	r1, #127	@ 0x7f
 8000ac0:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <disconnectBLE+0xa4>)
 8000ac2:	f7ff fcf7 	bl	80004b4 <fetchBleEvent>
 8000ac6:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000ace:	2204      	movs	r2, #4
 8000ad0:	4910      	ldr	r1, [pc, #64]	@ (8000b14 <disconnectBLE+0xa8>)
 8000ad2:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <disconnectBLE+0xa4>)
 8000ad4:	f7ff fd78 	bl	80005c8 <checkEventResp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d107      	bne.n	8000aee <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <disconnectBLE+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <disconnectBLE+0x98>)
 8000ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aec:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <disconnectBLE+0xac>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 ff74 	bl	80039e0 <free>
 8000af8:	e000      	b.n	8000afc <disconnectBLE+0x90>
		return;
 8000afa:	bf00      	nop
	 }
 }
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000144 	.word	0x20000144
 8000b08:	200000e8 	.word	0x200000e8
 8000b0c:	200000f0 	.word	0x200000f0
 8000b10:	200001d8 	.word	0x200001d8
 8000b14:	200000ec 	.word	0x200000ec
 8000b18:	200002e4 	.word	0x200002e4

08000b1c <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d102      	bne.n	8000b32 <setDiscoverability+0x16>
		 setConnectable();
 8000b2c:	f7ff fe04 	bl	8000738 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b30:	e00f      	b.n	8000b52 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10c      	bne.n	8000b52 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <setDiscoverability+0x40>)
 8000b40:	2104      	movs	r1, #4
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <setDiscoverability+0x44>)
 8000b44:	f7ff fe78 	bl	8000838 <BLE_command>
		 free(rxEvent);
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <setDiscoverability+0x48>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 ff47 	bl	80039e0 <free>
 }
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000104 	.word	0x20000104
 8000b60:	20000100 	.word	0x20000100
 8000b64:	200002e4 	.word	0x200002e4

08000b68 <i2c_init>:
#include <stm32l475xx.h>



void i2c_init(){
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

	//Enable GPIOB Clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b6c:	4b59      	ldr	r3, [pc, #356]	@ (8000cd4 <i2c_init+0x16c>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	4a58      	ldr	r2, [pc, #352]	@ (8000cd4 <i2c_init+0x16c>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Enable I2C2 Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b78:	4b56      	ldr	r3, [pc, #344]	@ (8000cd4 <i2c_init+0x16c>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	4a55      	ldr	r2, [pc, #340]	@ (8000cd4 <i2c_init+0x16c>)
 8000b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b82:	6593      	str	r3, [r2, #88]	@ 0x58

	//Disable I2C2
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000b84:	4b54      	ldr	r3, [pc, #336]	@ (8000cd8 <i2c_init+0x170>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a53      	ldr	r2, [pc, #332]	@ (8000cd8 <i2c_init+0x170>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]


	//Set the GPIOB mode of pin 10 to use alternate function
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000b90:	4b52      	ldr	r3, [pc, #328]	@ (8000cdc <i2c_init+0x174>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a51      	ldr	r2, [pc, #324]	@ (8000cdc <i2c_init+0x174>)
 8000b96:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b9a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cdc <i2c_init+0x174>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8000cdc <i2c_init+0x174>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	6013      	str	r3, [r2, #0]

	//Clear Pin 10 Alternate function and set it to 4
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8000cdc <i2c_init+0x174>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bac:	4a4b      	ldr	r2, [pc, #300]	@ (8000cdc <i2c_init+0x174>)
 8000bae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bb2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2;
 8000bb4:	4b49      	ldr	r3, [pc, #292]	@ (8000cdc <i2c_init+0x174>)
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb8:	4a48      	ldr	r2, [pc, #288]	@ (8000cdc <i2c_init+0x174>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bbe:	6253      	str	r3, [r2, #36]	@ 0x24

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000bc0:	4b46      	ldr	r3, [pc, #280]	@ (8000cdc <i2c_init+0x174>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a45      	ldr	r2, [pc, #276]	@ (8000cdc <i2c_init+0x174>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bca:	6053      	str	r3, [r2, #4]

	//Set PB 10 to Open Drain
	GPIOB->PUPDR &= GPIO_PUPDR_PUPD10;
 8000bcc:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <i2c_init+0x174>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a42      	ldr	r2, [pc, #264]	@ (8000cdc <i2c_init+0x174>)
 8000bd2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000bd6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_0;
 8000bd8:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <i2c_init+0x174>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8000cdc <i2c_init+0x174>)
 8000bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000be2:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED10_Pos);
 8000be4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cdc <i2c_init+0x174>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a3c      	ldr	r2, [pc, #240]	@ (8000cdc <i2c_init+0x174>)
 8000bea:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000bee:	6093      	str	r3, [r2, #8]




	//Set the GPIOB Pin 11 mode to use alternate function
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <i2c_init+0x174>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a39      	ldr	r2, [pc, #228]	@ (8000cdc <i2c_init+0x174>)
 8000bf6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bfa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000bfc:	4b37      	ldr	r3, [pc, #220]	@ (8000cdc <i2c_init+0x174>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a36      	ldr	r2, [pc, #216]	@ (8000cdc <i2c_init+0x174>)
 8000c02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c06:	6013      	str	r3, [r2, #0]

	//Clear Pin 11 Alternate function and set it to 4
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 8000c08:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <i2c_init+0x174>)
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	4a33      	ldr	r2, [pc, #204]	@ (8000cdc <i2c_init+0x174>)
 8000c0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000c12:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL11_2;
 8000c14:	4b31      	ldr	r3, [pc, #196]	@ (8000cdc <i2c_init+0x174>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c18:	4a30      	ldr	r2, [pc, #192]	@ (8000cdc <i2c_init+0x174>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1e:	6253      	str	r3, [r2, #36]	@ 0x24


	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000c20:	4b2e      	ldr	r3, [pc, #184]	@ (8000cdc <i2c_init+0x174>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4a2d      	ldr	r2, [pc, #180]	@ (8000cdc <i2c_init+0x174>)
 8000c26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c2a:	6053      	str	r3, [r2, #4]

	//Set PB 11 to Open Drain
	GPIOB->PUPDR &= GPIO_PUPDR_PUPD11;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <i2c_init+0x174>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a2a      	ldr	r2, [pc, #168]	@ (8000cdc <i2c_init+0x174>)
 8000c32:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000c36:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000c38:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <i2c_init+0x174>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a27      	ldr	r2, [pc, #156]	@ (8000cdc <i2c_init+0x174>)
 8000c3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c42:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED11_Pos);
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <i2c_init+0x174>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <i2c_init+0x174>)
 8000c4a:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000c4e:	6093      	str	r3, [r2, #8]
	// Base Clock is 4Mhz, meaning a 250ns period
	// We set SCLL and SCLH to 16, and SCLDEL and SDADEL to 4
	// Adding the 4 together, we get 16 + 16 + 4 + 4 = 40
	// 40 * 250ns = 10000ns which is 100Khz
	//Set I2C2 SCLL to 16
	I2C2->TIMINGR |= 0x0000000F;
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <i2c_init+0x170>)
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	4a20      	ldr	r2, [pc, #128]	@ (8000cd8 <i2c_init+0x170>)
 8000c56:	f043 030f 	orr.w	r3, r3, #15
 8000c5a:	6113      	str	r3, [r2, #16]
	//Set I2C2 SCLH to 16
	I2C2->TIMINGR |= 0x00000F00;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <i2c_init+0x170>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <i2c_init+0x170>)
 8000c62:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000c66:	6113      	str	r3, [r2, #16]
	//Set SCLDEL to 4
	I2C2->TIMINGR |= 0x00300000;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <i2c_init+0x170>)
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <i2c_init+0x170>)
 8000c6e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000c72:	6113      	str	r3, [r2, #16]
	//Set SDADEL to 4
	I2C2->TIMINGR |= 0x00030000;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <i2c_init+0x170>)
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <i2c_init+0x170>)
 8000c7a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000c7e:	6113      	str	r3, [r2, #16]

	//Enable RX interrupts
	I2C2->CR1 |= I2C_CR1_RXIE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <i2c_init+0x170>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <i2c_init+0x170>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6013      	str	r3, [r2, #0]
	//Enable TX interrupts
	I2C2->CR1 |= I2C_CR1_TXIE;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <i2c_init+0x170>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a11      	ldr	r2, [pc, #68]	@ (8000cd8 <i2c_init+0x170>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	6013      	str	r3, [r2, #0]
	//Enable NACK interrupts
	I2C2->CR1 |= I2C_CR1_NACKIE;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <i2c_init+0x170>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <i2c_init+0x170>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6013      	str	r3, [r2, #0]
	//Enable STOP interrupts
	I2C2->CR1 |= I2C_CR1_STOPIE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <i2c_init+0x170>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <i2c_init+0x170>)
 8000caa:	f043 0320 	orr.w	r3, r3, #32
 8000cae:	6013      	str	r3, [r2, #0]
	//Enable TC interrupts
	I2C2->CR1 |= I2C_CR1_TCIE;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <i2c_init+0x170>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <i2c_init+0x170>)
 8000cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cba:	6013      	str	r3, [r2, #0]



	//Enable I2C2 Peripheral
	I2C2->CR1 |= I2C_CR1_PE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <i2c_init+0x170>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <i2c_init+0x170>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <i2c_transaction>:


uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	603a      	str	r2, [r7, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	71bb      	strb	r3, [r7, #6]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	717b      	strb	r3, [r7, #5]
	//set address mode to 7 bit
	I2C2->CR2 &= ~I2C_CR2_ADD10;
 8000cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e60 <i2c_transaction+0x180>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a59      	ldr	r2, [pc, #356]	@ (8000e60 <i2c_transaction+0x180>)
 8000cfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d00:	6053      	str	r3, [r2, #4]
	//Set the Slave Address of the Peripheral
	I2C2->CR2 |= address;
 8000d02:	4b57      	ldr	r3, [pc, #348]	@ (8000e60 <i2c_transaction+0x180>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4955      	ldr	r1, [pc, #340]	@ (8000e60 <i2c_transaction+0x180>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
	//Enable Autoend
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000d0e:	4b54      	ldr	r3, [pc, #336]	@ (8000e60 <i2c_transaction+0x180>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4a53      	ldr	r2, [pc, #332]	@ (8000e60 <i2c_transaction+0x180>)
 8000d14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d18:	6053      	str	r3, [r2, #4]
	//Bitmask for checking register values
	uint32_t bit0_mask = 0x00000001;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
	//Store the amount of bytes read or written
	uint8_t dataRW = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]




	//If dir is 1, read, else dir = 0, write
	if(dir){
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d043      	beq.n	8000db0 <i2c_transaction+0xd0>
		//Set the NBYTES
		I2C2->CR2 |= 0x00010000 * len;
 8000d28:	4b4d      	ldr	r3, [pc, #308]	@ (8000e60 <i2c_transaction+0x180>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	797a      	ldrb	r2, [r7, #5]
 8000d2e:	0412      	lsls	r2, r2, #16
 8000d30:	4611      	mov	r1, r2
 8000d32:	4a4b      	ldr	r2, [pc, #300]	@ (8000e60 <i2c_transaction+0x180>)
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6053      	str	r3, [r2, #4]

		//Set transactions to write
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000d38:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <i2c_transaction+0x180>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a48      	ldr	r2, [pc, #288]	@ (8000e60 <i2c_transaction+0x180>)
 8000d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d42:	6053      	str	r3, [r2, #4]
		//Start I2C transaction
		I2C2->CR2 |= I2C_CR2_START;
 8000d44:	4b46      	ldr	r3, [pc, #280]	@ (8000e60 <i2c_transaction+0x180>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4a45      	ldr	r2, [pc, #276]	@ (8000e60 <i2c_transaction+0x180>)
 8000d4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d4e:	6053      	str	r3, [r2, #4]

		//Wait until TXIS set to 1 and is ready to receive data
		while((I2C2->ISR &(bit0_mask << 1)) != I2C_ISR_TXIS){
 8000d50:	bf00      	nop
 8000d52:	4b43      	ldr	r3, [pc, #268]	@ (8000e60 <i2c_transaction+0x180>)
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d1f8      	bne.n	8000d52 <i2c_transaction+0x72>

		}
		//Write the register address value from data to TXDR to set register to read/write tos
		I2C2->TXDR = *data;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <i2c_transaction+0x180>)
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28

		//Set the transaction to read
		I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <i2c_transaction+0x180>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8000e60 <i2c_transaction+0x180>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d72:	6053      	str	r3, [r2, #4]
		//Start te I2C transaction
		I2C2->CR2 |= I2C_CR2_START;
 8000d74:	4b3a      	ldr	r3, [pc, #232]	@ (8000e60 <i2c_transaction+0x180>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4a39      	ldr	r2, [pc, #228]	@ (8000e60 <i2c_transaction+0x180>)
 8000d7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d7e:	6053      	str	r3, [r2, #4]


		//while((I2C2->CR2 & (bit0_mask << 14)) != I2C_CR2_STOP){

		//While the number of bytes we need to read is less than len, keep checking RXNE and reading values
		while(dataRW < len){
 8000d80:	e011      	b.n	8000da6 <i2c_transaction+0xc6>
			//Check if RXNE == 1 and data is ready to be read
			while((I2C2->ISR & (bit0_mask << 2)) != I2C_ISR_RXNE){
 8000d82:	bf00      	nop
 8000d84:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <i2c_transaction+0x180>)
 8000d86:	699a      	ldr	r2, [r3, #24]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d1f8      	bne.n	8000d84 <i2c_transaction+0xa4>
			}
			//Read the data value offset by dataRW and put in in the data
			//Data being read replaces the register address value in the first entry in the array and onwards
			*(data + dataRW) = I2C2->RXDR;
 8000d92:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <i2c_transaction+0x180>)
 8000d94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2ca      	uxtb	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
			//Increment dataRW as we have read a value
			dataRW++;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
		while(dataRW < len){
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3e9      	bcc.n	8000d82 <i2c_transaction+0xa2>
 8000dae:	e048      	b.n	8000e42 <i2c_transaction+0x162>

		//}
	}
	else{
		//Set the NBYTES, set to + 1 because we also need to write the register address value
		I2C2->CR2 |= 0x00010000 * (len + 1);
 8000db0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e60 <i2c_transaction+0x180>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	797a      	ldrb	r2, [r7, #5]
 8000db6:	3201      	adds	r2, #1
 8000db8:	0412      	lsls	r2, r2, #16
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4a28      	ldr	r2, [pc, #160]	@ (8000e60 <i2c_transaction+0x180>)
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	6053      	str	r3, [r2, #4]

		//Set the I2C transaction to write
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <i2c_transaction+0x180>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a26      	ldr	r2, [pc, #152]	@ (8000e60 <i2c_transaction+0x180>)
 8000dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000dcc:	6053      	str	r3, [r2, #4]
		//Start the I2C transactions
		I2C2->CR2 |= I2C_CR2_START;
 8000dce:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <i2c_transaction+0x180>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <i2c_transaction+0x180>)
 8000dd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dd8:	6053      	str	r3, [r2, #4]

		//Wait for TXIS == 1 to be ready to write and write in register address
		while((I2C2->ISR &(bit0_mask << 1)) != I2C_ISR_TXIS){
 8000dda:	bf00      	nop
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <i2c_transaction+0x180>)
 8000dde:	699a      	ldr	r2, [r3, #24]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d1f8      	bne.n	8000ddc <i2c_transaction+0xfc>

		}
		//Write it register address to TXDR
		I2C2->TXDR = *data;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <i2c_transaction+0x180>)
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28

		//while((I2C2->CR2 & (bit0_mask << 14)) != I2C_CR2_STOP){


		//While the number of bytes we have written is less than len or NACKF isn't set to high, keep writing
		while((dataRW < len) & !((I2C2->ISR & (bit0_mask << 4)) == I2C_ISR_NACKF)){
 8000df2:	e011      	b.n	8000e18 <i2c_transaction+0x138>


			//Wait until TXIS == 1 and is TXDR is ready to receive data
			while((I2C2->ISR &(bit0_mask << 1)) != I2C_ISR_TXIS){
 8000df4:	bf00      	nop
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <i2c_transaction+0x180>)
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d1f8      	bne.n	8000df6 <i2c_transaction+0x116>

			}
			//Write to TXDR the data values offset by dataRW and +1 for the register address in the first array slot
			I2C2->TXDR = *(data + dataRW + 1);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	3301      	adds	r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <i2c_transaction+0x180>)
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
			dataRW++;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
		while((dataRW < len) & !((I2C2->ISR & (bit0_mask << 4)) == I2C_ISR_NACKF)){
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	bf34      	ite	cc
 8000e20:	2301      	movcc	r3, #1
 8000e22:	2300      	movcs	r3, #0
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <i2c_transaction+0x180>)
 8000e28:	6999      	ldr	r1, [r3, #24]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	400b      	ands	r3, r1
 8000e30:	2b10      	cmp	r3, #16
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1d8      	bne.n	8000df4 <i2c_transaction+0x114>

	}


	//Clear CR2 for next transaction
	I2C2->CR2 &= ~I2C2->CR2;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <i2c_transaction+0x180>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	43da      	mvns	r2, r3
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <i2c_transaction+0x180>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	4904      	ldr	r1, [pc, #16]	@ (8000e60 <i2c_transaction+0x180>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
	return 0;
 8000e52:	2300      	movs	r3, #0

}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40005800 	.word	0x40005800

08000e64 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	/* Enable Peripheral clocks for GPIO ports A and B*/
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <leds_init+0xd0>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	4a31      	ldr	r2, [pc, #196]	@ (8000f34 <leds_init+0xd0>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000e74:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <leds_init+0xd0>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	4a2e      	ldr	r2, [pc, #184]	@ (8000f34 <leds_init+0xd0>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c


  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000e80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e8a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000e8e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000e90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000ea0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eaa:	f023 0320 	bic.w	r3, r3, #32
 8000eae:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000eb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ebe:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000ec0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eca:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000ece:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000ed0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eda:	f023 0320 	bic.w	r3, r3, #32
 8000ede:	6153      	str	r3, [r2, #20]



  /* Configure PB14 as an output by clearing all bits and setting the mode */
    GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <leds_init+0xd4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <leds_init+0xd4>)
 8000ee6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000eea:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <leds_init+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <leds_init+0xd4>)
 8000ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	6013      	str	r3, [r2, #0]

    /* Configure the GPIO output as push pull (transistor for high and low) */
    GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <leds_init+0xd4>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <leds_init+0xd4>)
 8000efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f02:	6053      	str	r3, [r2, #4]

    /* Disable the internal pull-up and pull-down resistors */
    GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <leds_init+0xd4>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <leds_init+0xd4>)
 8000f0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f0e:	60d3      	str	r3, [r2, #12]

    /* Configure the GPIO to use low speed mode */
    GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <leds_init+0xd4>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <leds_init+0xd4>)
 8000f16:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000f1a:	6093      	str	r3, [r2, #8]

    /* Turn off the LED */
    GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <leds_init+0xd4>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <leds_init+0xd4>)
 8000f22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f26:	6153      	str	r3, [r2, #20]




}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000400 	.word	0x48000400

08000f3c <leds_set>:

void leds_set(uint8_t led)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	// read led parameter and set GPIO ports depending on led parameter
	// if first bit is 1, turn on first LED on GPIO PA5,
	//if second bit is 1, turn on second LED on GPIO PB14

	//if else for first LED to turn on or off
	uint8_t ld1 = led & 0b1;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
	uint8_t ld2 = led & 0b10;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	73bb      	strb	r3, [r7, #14]
	// 1... [ld1] ...1


	//GPIOA->ODR = (GPIOA->ODR & 0xFFFFFFEF) | (ld1 << 4) ;
	//GPIOB->ODR = (GPIOB->ODR & 0xFFFFDFFF) | (ld2 << 12) ;
	if(ld1){
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <leds_set+0x32>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	6153      	str	r3, [r2, #20]
 8000f6c:	e007      	b.n	8000f7e <leds_set+0x42>
	}else{
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000f6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f78:	f023 0320 	bic.w	r3, r3, #32
 8000f7c:	6153      	str	r3, [r2, #20]
	}

	if(ld2){
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <leds_set+0x56>
			GPIOB->ODR |= GPIO_ODR_OD14;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <leds_set+0x70>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <leds_set+0x70>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6153      	str	r3, [r2, #20]
		}else{
			GPIOB->ODR &= ~GPIO_ODR_OD14;
		}


}
 8000f90:	e005      	b.n	8000f9e <leds_set+0x62>
			GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <leds_set+0x70>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <leds_set+0x70>)
 8000f98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6153      	str	r3, [r2, #20]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	48000400 	.word	0x48000400

08000fb0 <lsm6dsl_init>:
#include <stm32l475xx.h>


void lsm6dsl_init(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	// Variable to check accelerometer is there, passes in register address and replaces it with 0x6A if there
	uint8_t who = 0x0F;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	71fb      	strb	r3, [r7, #7]
	// Array for passing in register address values, data values to write, and values read to and from the i2c transaction
	uint8_t reg_data[2] = {0};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	80bb      	strh	r3, [r7, #4]

	//Read Who Am I
	i2c_transaction(0b11010101, 1, &who, 1);
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	20d5      	movs	r0, #213	@ 0xd5
 8000fc6:	f7ff fe8b 	bl	8000ce0 <i2c_transaction>
	//0b11010101

	//Check if whoAmI is working and accelerometer is present
	if(who == 0x6A){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b6a      	cmp	r3, #106	@ 0x6a
 8000fce:	d103      	bne.n	8000fd8 <lsm6dsl_init+0x28>
		printf("Accelerometer Found \n");
 8000fd0:	480f      	ldr	r0, [pc, #60]	@ (8001010 <lsm6dsl_init+0x60>)
 8000fd2:	f002 fee5 	bl	8003da0 <puts>
 8000fd6:	e002      	b.n	8000fde <lsm6dsl_init+0x2e>
	}else{
		printf("Accelerometer Not Found \n");
 8000fd8:	480e      	ldr	r0, [pc, #56]	@ (8001014 <lsm6dsl_init+0x64>)
 8000fda:	f002 fee1 	bl	8003da0 <puts>
	}

	//Write to CTRL1_XL, set the top 4 bits to 0110 --> 104hz normal mode
	//Set first value to register address value of CTRL1_XL, and second value to data value you want to write to the register
	reg_data[0] = 0x10;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	713b      	strb	r3, [r7, #4]
	reg_data[1] = 0b01100000;
 8000fe2:	2360      	movs	r3, #96	@ 0x60
 8000fe4:	717b      	strb	r3, [r7, #5]
	i2c_transaction(0b11010100, 0, &reg_data, 1);
 8000fe6:	1d3a      	adds	r2, r7, #4
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2100      	movs	r1, #0
 8000fec:	20d4      	movs	r0, #212	@ 0xd4
 8000fee:	f7ff fe77 	bl	8000ce0 <i2c_transaction>
//	printf("%d \n", reg_data[0]);


	//Write to INT1_CTRL to turn on accelerometer data interrupts
	//Set first value to register address value of INT1_CTRL, and second value to data value you want to write to the register
	reg_data[0] = 0x0d;
 8000ff2:	230d      	movs	r3, #13
 8000ff4:	713b      	strb	r3, [r7, #4]
	reg_data[1] = 0x01;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	717b      	strb	r3, [r7, #5]
	i2c_transaction(0b11010100, 0, &reg_data, 1);
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2100      	movs	r1, #0
 8001000:	20d4      	movs	r0, #212	@ 0xd4
 8001002:	f7ff fe6d 	bl	8000ce0 <i2c_transaction>
//	reg_data[0] = 0x15;
//	reg_data[1] =  0b00010000;
//	i2c_transaction(0b11010100, 0, &reg_data, 1);


}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	08004d08 	.word	0x08004d08
 8001014:	08004d20 	.word	0x08004d20

08001018 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]

	// Variable to check status register
	int8_t status_data = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]

	// Read accelerometer data status register and check if it is ready, if not stall until ready
	while(status_data & 0x1){
 8001028:	e008      	b.n	800103c <lsm6dsl_read_xyz+0x24>
		status_data = 0x1E;
 800102a:	231e      	movs	r3, #30
 800102c:	75fb      	strb	r3, [r7, #23]
		i2c_transaction(0b11010101, 1, &status_data, 1);
 800102e:	f107 0217 	add.w	r2, r7, #23
 8001032:	2301      	movs	r3, #1
 8001034:	2101      	movs	r1, #1
 8001036:	20d5      	movs	r0, #213	@ 0xd5
 8001038:	f7ff fe52 	bl	8000ce0 <i2c_transaction>
	while(status_data & 0x1){
 800103c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ef      	bne.n	800102a <lsm6dsl_read_xyz+0x12>

	}

	//Send in register address values for the X, Y, Z low bits and high bits
	//and recieve the read values back in the same variable
	uint8_t xL = 0x28;
 800104a:	2328      	movs	r3, #40	@ 0x28
 800104c:	75bb      	strb	r3, [r7, #22]
	i2c_transaction(0b11010101, 1, &xL, 1);
 800104e:	f107 0216 	add.w	r2, r7, #22
 8001052:	2301      	movs	r3, #1
 8001054:	2101      	movs	r1, #1
 8001056:	20d5      	movs	r0, #213	@ 0xd5
 8001058:	f7ff fe42 	bl	8000ce0 <i2c_transaction>
	uint8_t xH = 0x29;
 800105c:	2329      	movs	r3, #41	@ 0x29
 800105e:	757b      	strb	r3, [r7, #21]
	i2c_transaction(0b11010101, 1, &xH, 1);
 8001060:	f107 0215 	add.w	r2, r7, #21
 8001064:	2301      	movs	r3, #1
 8001066:	2101      	movs	r1, #1
 8001068:	20d5      	movs	r0, #213	@ 0xd5
 800106a:	f7ff fe39 	bl	8000ce0 <i2c_transaction>

	uint8_t yL = 0x2A;
 800106e:	232a      	movs	r3, #42	@ 0x2a
 8001070:	753b      	strb	r3, [r7, #20]
	i2c_transaction(0b11010101, 1, &yL, 1);
 8001072:	f107 0214 	add.w	r2, r7, #20
 8001076:	2301      	movs	r3, #1
 8001078:	2101      	movs	r1, #1
 800107a:	20d5      	movs	r0, #213	@ 0xd5
 800107c:	f7ff fe30 	bl	8000ce0 <i2c_transaction>
	uint8_t yH = 0x2B;
 8001080:	232b      	movs	r3, #43	@ 0x2b
 8001082:	74fb      	strb	r3, [r7, #19]
	i2c_transaction(0b11010101, 1, &yH, 1);
 8001084:	f107 0213 	add.w	r2, r7, #19
 8001088:	2301      	movs	r3, #1
 800108a:	2101      	movs	r1, #1
 800108c:	20d5      	movs	r0, #213	@ 0xd5
 800108e:	f7ff fe27 	bl	8000ce0 <i2c_transaction>

	uint8_t zL = 0x2C;
 8001092:	232c      	movs	r3, #44	@ 0x2c
 8001094:	74bb      	strb	r3, [r7, #18]
	i2c_transaction(0b11010101, 1, &zL, 1);
 8001096:	f107 0212 	add.w	r2, r7, #18
 800109a:	2301      	movs	r3, #1
 800109c:	2101      	movs	r1, #1
 800109e:	20d5      	movs	r0, #213	@ 0xd5
 80010a0:	f7ff fe1e 	bl	8000ce0 <i2c_transaction>
	uint8_t zH = 0x2D;
 80010a4:	232d      	movs	r3, #45	@ 0x2d
 80010a6:	747b      	strb	r3, [r7, #17]
	i2c_transaction(0b11010101, 1, &zH, 1);
 80010a8:	f107 0211 	add.w	r2, r7, #17
 80010ac:	2301      	movs	r3, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	20d5      	movs	r0, #213	@ 0xd5
 80010b2:	f7ff fe15 	bl	8000ce0 <i2c_transaction>


	// Cast low and high bit acceleration values to 16 bit
	// Left shift the 8 high bits by 8 and add the 8 lower bits to create full 16 bit acceleration values for X, Y, Z
	// Set the dereferenced x, y, z address to the 16 bit acceleration values
	*x = (((int16_t)(xH)) << 8) | (((int16_t)(xL)));
 80010b6:	7d7b      	ldrb	r3, [r7, #21]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7dbb      	ldrb	r3, [r7, #22]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)(yH)) << 8) | (((int16_t)(yL)));
 80010c8:	7cfb      	ldrb	r3, [r7, #19]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7d3b      	ldrb	r3, [r7, #20]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)(zH)) << 8) | (((int16_t)(zL)));
 80010da:	7c7b      	ldrb	r3, [r7, #17]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7cbb      	ldrb	r3, [r7, #18]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	801a      	strh	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001100:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800110c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001110:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001114:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800111c:	e000      	b.n	8001120 <ITM_SendChar+0x2c>
    {
      __NOP();
 800111e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001120:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f9      	beq.n	800111e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800112a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_write>:
static volatile uint8_t nonDiscoverable = 0;



// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e009      	b.n	800116c <_write+0x2a>
		ITM_SendChar(*ptr++);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffc7 	bl	80010f4 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf1      	blt.n	8001158 <_write+0x16>
	}
	return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b083      	sub	sp, #12
 8001184:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001186:	f000 fcb0 	bl	8001aea <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f965 	bl	8001458 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 f9e7 	bl	8001560 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001192:	f000 f9a7 	bl	80014e4 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a0:	f001 f810 	bl	80021c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f000 fd15 	bl	8001bd4 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f001 f806 	bl	80021c4 <HAL_GPIO_WritePin>

  ble_init();
 80011b8:	f7ff f862 	bl	8000280 <ble_init>

  // intialize LEDs
  leds_init();
 80011bc:	f7ff fe52 	bl	8000e64 <leds_init>

  // Initialize Timer
  timer_init(TIM2);
 80011c0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011c4:	f000 fc0a 	bl	80019dc <timer_init>

  // Initialize I2C2 in master mode to connect with the accelerometer
  i2c_init();
 80011c8:	f7ff fcce 	bl	8000b68 <i2c_init>

  // Initialize the accelerometer
  lsm6dsl_init();
 80011cc:	f7ff fef0 	bl	8000fb0 <lsm6dsl_init>

  //Set the Timer2 Interrupt to a period of 50 ms
  timer_set_ms(TIM2, 49);
 80011d0:	2131      	movs	r1, #49	@ 0x31
 80011d2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011d6:	f000 fc4d 	bl	8001a74 <timer_set_ms>

  //initially set it undiscoverable
  setDiscoverability(0);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fc9e 	bl	8000b1c <setDiscoverability>


  HAL_Delay(10);
 80011e0:	200a      	movs	r0, #10
 80011e2:	f000 fcf7 	bl	8001bd4 <HAL_Delay>

  while (1)
  {

	  //Read the current accelerometer X, Y, Z Values
	  		lsm6dsl_read_xyz(&currX, &currY, &currZ);
 80011e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001360 <main+0x1e0>)
 80011e8:	495e      	ldr	r1, [pc, #376]	@ (8001364 <main+0x1e4>)
 80011ea:	485f      	ldr	r0, [pc, #380]	@ (8001368 <main+0x1e8>)
 80011ec:	f7ff ff14 	bl	8001018 <lsm6dsl_read_xyz>


	  		// If the difference of the current and previous values X, Y, Z acceleration values are
	  		// outside the margin of error, increment the changeCount
	  		// Otherwise set the change count to 0
	  		if((currX >= prevX - sensitivity)& (currX <= prevX + sensitivity)&
 80011f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001368 <main+0x1e8>)
 80011f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b5c      	ldr	r3, [pc, #368]	@ (800136c <main+0x1ec>)
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001202:	429a      	cmp	r2, r3
 8001204:	bfac      	ite	ge
 8001206:	2301      	movge	r3, #1
 8001208:	2300      	movlt	r3, #0
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b56      	ldr	r3, [pc, #344]	@ (8001368 <main+0x1e8>)
 800120e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001212:	4619      	mov	r1, r3
 8001214:	4b55      	ldr	r3, [pc, #340]	@ (800136c <main+0x1ec>)
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800121e:	4299      	cmp	r1, r3
 8001220:	bfd4      	ite	le
 8001222:	2301      	movle	r3, #1
 8001224:	2300      	movgt	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4013      	ands	r3, r2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
	  				(currY >= prevY - sensitivity)&(currY <= prevY + sensitivity)&
 800122e:	4b4d      	ldr	r3, [pc, #308]	@ (8001364 <main+0x1e4>)
 8001230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001234:	4619      	mov	r1, r3
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <main+0x1f0>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001240:	4299      	cmp	r1, r3
 8001242:	bfac      	ite	ge
 8001244:	2301      	movge	r3, #1
 8001246:	2300      	movlt	r3, #0
 8001248:	b2db      	uxtb	r3, r3
	  		if((currX >= prevX - sensitivity)& (currX <= prevX + sensitivity)&
 800124a:	4013      	ands	r3, r2
	  				(currY >= prevY - sensitivity)&(currY <= prevY + sensitivity)&
 800124c:	4a45      	ldr	r2, [pc, #276]	@ (8001364 <main+0x1e4>)
 800124e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001252:	4611      	mov	r1, r2
 8001254:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <main+0x1f0>)
 8001256:	f9b2 2000 	ldrsh.w	r2, [r2]
 800125a:	f502 6296 	add.w	r2, r2, #1200	@ 0x4b0
 800125e:	4291      	cmp	r1, r2
 8001260:	bfd4      	ite	le
 8001262:	2201      	movle	r2, #1
 8001264:	2200      	movgt	r2, #0
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	4013      	ands	r3, r2
	  				(currZ >= prevZ - sensitivity)& (currZ <= prevZ + sensitivity))
 800126a:	4a3d      	ldr	r2, [pc, #244]	@ (8001360 <main+0x1e0>)
 800126c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001270:	4611      	mov	r1, r2
 8001272:	4a40      	ldr	r2, [pc, #256]	@ (8001374 <main+0x1f4>)
 8001274:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001278:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 800127c:	4291      	cmp	r1, r2
 800127e:	bfac      	ite	ge
 8001280:	2201      	movge	r2, #1
 8001282:	2200      	movlt	r2, #0
 8001284:	b2d2      	uxtb	r2, r2
	  				(currY >= prevY - sensitivity)&(currY <= prevY + sensitivity)&
 8001286:	4013      	ands	r3, r2
	  				(currZ >= prevZ - sensitivity)& (currZ <= prevZ + sensitivity))
 8001288:	4a35      	ldr	r2, [pc, #212]	@ (8001360 <main+0x1e0>)
 800128a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800128e:	4611      	mov	r1, r2
 8001290:	4a38      	ldr	r2, [pc, #224]	@ (8001374 <main+0x1f4>)
 8001292:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001296:	f502 6296 	add.w	r2, r2, #1200	@ 0x4b0
 800129a:	4291      	cmp	r1, r2
 800129c:	bfd4      	ite	le
 800129e:	2201      	movle	r2, #1
 80012a0:	2200      	movgt	r2, #0
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	4013      	ands	r3, r2
	  		if((currX >= prevX - sensitivity)& (currX <= prevX + sensitivity)&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <main+0x132>
	  		{
	  			changeCount = 0;
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <main+0x1f8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e004      	b.n	80012bc <main+0x13c>
	  		}else{
	  			changeCount++;
 80012b2:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <main+0x1f8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <main+0x1f8>)
 80012ba:	6013      	str	r3, [r2, #0]
	  		}

	  		// If the changeCount is large than 8, we considered it moved,
	  		// set the lostCount and changeCount to 0
	  		if(changeCount > 8){
 80012bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <main+0x1f8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	dd05      	ble.n	80012d0 <main+0x150>
	  			lostCount = 0;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <main+0x1fc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
	  			changeCount = 0;
 80012ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <main+0x1f8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
	  		}

	  		// Print the values of lostCount and changeCount and the current accelerometer values
	  		printf("lostCount: %u      changeCount: %u      %d, %d, %d \n", lostCount, changeCount, currX, currY, currZ);
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <main+0x1fc>)
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <main+0x1f8>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <main+0x1e8>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	461c      	mov	r4, r3
 80012e0:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <main+0x1e4>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	4618      	mov	r0, r3
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <main+0x1e0>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9000      	str	r0, [sp, #0]
 80012f2:	4623      	mov	r3, r4
 80012f4:	4822      	ldr	r0, [pc, #136]	@ (8001380 <main+0x200>)
 80012f6:	f002 fceb 	bl	8003cd0 <iprintf>

	  		// Set previous X, Y, Z acceleration values to the current values for comparison in the next loop
	  		prevX = currX;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <main+0x1e8>)
 80012fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <main+0x1ec>)
 8001302:	801a      	strh	r2, [r3, #0]
	  		prevY = currY;
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <main+0x1e4>)
 8001306:	f9b3 2000 	ldrsh.w	r2, [r3]
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <main+0x1f0>)
 800130c:	801a      	strh	r2, [r3, #0]
	  		prevZ = currZ;
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <main+0x1e0>)
 8001310:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <main+0x1f4>)
 8001316:	801a      	strh	r2, [r3, #0]


	  		//Default code
	  		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <main+0x204>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d108      	bne.n	8001334 <main+0x1b4>
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	4818      	ldr	r0, [pc, #96]	@ (8001388 <main+0x208>)
 8001326:	f000 ff35 	bl	8002194 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <main+0x1b4>
	  			catchBLE();
 8001330:	f7ff f9bc 	bl	80006ac <catchBLE>


	  		// If the lostCount is lower than the timeToBlink (1 min), which indicates its not lost,
	  		//then disconnect the BLE and make it so its not discoverable by setting the discoverability to 0
	  		//Else set the discoverability to 0 and the IRQ handler will set discoverability to 1
	  		if(lostCount < timeToBlink){
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <main+0x1fc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800133c:	d20b      	bcs.n	8001356 <main+0x1d6>
	  			leds_set(0);
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff fdfc 	bl	8000f3c <leds_set>
	  			disconnectBLE();
 8001344:	f7ff fb92 	bl	8000a6c <disconnectBLE>
	  			setDiscoverability(0);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fbe7 	bl	8000b1c <setDiscoverability>
	  			nonDiscoverable = 1;
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <main+0x204>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e747      	b.n	80011e6 <main+0x66>
	  		}else{
	  			nonDiscoverable = 0;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <main+0x204>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
	  		lsm6dsl_read_xyz(&currX, &currY, &currZ);
 800135c:	e743      	b.n	80011e6 <main+0x66>
 800135e:	bf00      	nop
 8001360:	20000354 	.word	0x20000354
 8001364:	20000352 	.word	0x20000352
 8001368:	20000350 	.word	0x20000350
 800136c:	20000356 	.word	0x20000356
 8001370:	20000358 	.word	0x20000358
 8001374:	2000035a 	.word	0x2000035a
 8001378:	20000360 	.word	0x20000360
 800137c:	2000035c 	.word	0x2000035c
 8001380:	08004d3c 	.word	0x08004d3c
 8001384:	20000364 	.word	0x20000364
 8001388:	48001000 	.word	0x48001000

0800138c <TIM2_IRQHandler>:
	  //__WFI();
  }
}


void TIM2_IRQHandler(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
	//Interrupt fires every 50ms
	// If the lostCount is larger or equal than the timeToBlink (been a minute or over),
	//It indicates that is lost and sets the discoverability to 1 to allow it to be connect through BLE
	//Every 10 seconds send a message with PTGui lost with the amount of seconds has passed in lost mode
	if( (lostCount >= timeToBlink) && ((lostCount%200) == 1) ){
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <TIM2_IRQHandler+0xac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800139a:	d33b      	bcc.n	8001414 <TIM2_IRQHandler+0x88>
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <TIM2_IRQHandler+0xac>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <TIM2_IRQHandler+0xb0>)
 80013a2:	fba3 1302 	umull	r1, r3, r3, r2
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	21c8      	movs	r1, #200	@ 0xc8
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d12f      	bne.n	8001414 <TIM2_IRQHandler+0x88>
//
		setDiscoverability(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fbb1 	bl	8000b1c <setDiscoverability>
		if(!nonDiscoverable){
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <TIM2_IRQHandler+0xb4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d127      	bne.n	8001414 <TIM2_IRQHandler+0x88>
			  // Send a string to the NORDIC UART service, remember to not include the newline
			  unsigned char test_str[20] = "PTGui lost ";
 80013c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <TIM2_IRQHandler+0xb8>)
 80013c6:	463b      	mov	r3, r7
 80013c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
			  //Subtract and divide down the lostCount to get the amount of seconds after being lost
			  // Store the number of seconds in lost mode in lostCountDiv
			  int lostCountDiv = (lostCount-timeToBlink)/20;
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <TIM2_IRQHandler+0xac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80013e0:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <TIM2_IRQHandler+0xbc>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	617b      	str	r3, [r7, #20]
			  //Concatenate the lostCountDiv with the message needed to be sent
			  snprintf(test_str, 20, "PTGui lost %ds ", lostCountDiv);
 80013ea:	4638      	mov	r0, r7
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <TIM2_IRQHandler+0xc0>)
 80013f0:	2114      	movs	r1, #20
 80013f2:	f002 fcdd 	bl	8003db0 <sniprintf>
			  //Send the message through BLE
			  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(test_str)-1, test_str);
 80013f6:	463b      	mov	r3, r7
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe fee9 	bl	80001d0 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	3b01      	subs	r3, #1
 8001402:	461a      	mov	r2, r3
 8001404:	463b      	mov	r3, r7
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	2200      	movs	r2, #0
 800140c:	4910      	ldr	r1, [pc, #64]	@ (8001450 <TIM2_IRQHandler+0xc4>)
 800140e:	4811      	ldr	r0, [pc, #68]	@ (8001454 <TIM2_IRQHandler+0xc8>)
 8001410:	f7ff fad8 	bl	80009c4 <updateCharValue>
		  }
	}

	//Increment the lostCounter every time Timer 2 interrupt activates
	lostCount++;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <TIM2_IRQHandler+0xac>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <TIM2_IRQHandler+0xac>)
 800141c:	6013      	str	r3, [r2, #0]

	// Reset update flag.
	TIM2->SR &= ~(TIM_SR_UIF);
 800141e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6113      	str	r3, [r2, #16]

}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000035c 	.word	0x2000035c
 800143c:	51eb851f 	.word	0x51eb851f
 8001440:	20000364 	.word	0x20000364
 8001444:	08004d84 	.word	0x08004d84
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	08004d74 	.word	0x08004d74
 8001450:	200002e0 	.word	0x200002e0
 8001454:	200002d8 	.word	0x200002d8

08001458 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	@ 0x58
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2244      	movs	r2, #68	@ 0x44
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fdae 	bl	8003fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800147a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800147e:	f000 feeb 	bl	8002258 <HAL_PWREx_ControlVoltageScaling>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001488:	f000 f902 	bl	8001690 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800148c:	2310      	movs	r3, #16
 800148e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001498:	2370      	movs	r3, #112	@ 0x70
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 ff2d 	bl	8002304 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014b0:	f000 f8ee 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 faf5 	bl	8002abc <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014d8:	f000 f8da 	bl	8001690 <Error_Handler>
  }
}
 80014dc:	bf00      	nop
 80014de:	3758      	adds	r7, #88	@ 0x58
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <MX_SPI3_Init+0x74>)
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <MX_SPI3_Init+0x78>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_SPI3_Init+0x74>)
 80014f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_SPI3_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <MX_SPI3_Init+0x74>)
 80014fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001502:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_SPI3_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001516:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_SPI3_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <MX_SPI3_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001532:	2207      	movs	r2, #7
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_SPI3_Init+0x74>)
 800153e:	2208      	movs	r2, #8
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_SPI3_Init+0x74>)
 8001544:	f001 fca6 	bl	8002e94 <HAL_SPI_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800154e:	f000 f89f 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002ec 	.word	0x200002ec
 800155c:	40003c00 	.word	0x40003c00

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001576:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <MX_GPIO_Init+0x124>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a42      	ldr	r2, [pc, #264]	@ (8001684 <MX_GPIO_Init+0x124>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <MX_GPIO_Init+0x124>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <MX_GPIO_Init+0x124>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <MX_GPIO_Init+0x124>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <MX_GPIO_Init+0x124>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a36      	ldr	r2, [pc, #216]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <MX_GPIO_Init+0x124>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2120      	movs	r1, #32
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f6:	f000 fde5 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001600:	4821      	ldr	r0, [pc, #132]	@ (8001688 <MX_GPIO_Init+0x128>)
 8001602:	f000 fddf 	bl	80021c4 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f000 fdd8 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001614:	2340      	movs	r3, #64	@ 0x40
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001618:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4818      	ldr	r0, [pc, #96]	@ (800168c <MX_GPIO_Init+0x12c>)
 800162a:	f000 fc09 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800162e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f000 fbf9 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800164e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4808      	ldr	r0, [pc, #32]	@ (8001688 <MX_GPIO_Init+0x128>)
 8001668:	f000 fbea 	bl	8001e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2017      	movs	r0, #23
 8001672:	f000 fbae 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001676:	2017      	movs	r0, #23
 8001678:	f000 fbc7 	bl	8001e0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	@ 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <Error_Handler+0x8>

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_MspInit+0x44>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_MspInit+0x44>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_MspInit+0x44>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_SPI_MspInit+0x7c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d128      	bne.n	8001758 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_SPI_MspInit+0x80>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a16      	ldr	r2, [pc, #88]	@ (8001764 <HAL_SPI_MspInit+0x80>)
 800170c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_SPI_MspInit+0x80>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_SPI_MspInit+0x80>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <HAL_SPI_MspInit+0x80>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_SPI_MspInit+0x80>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001736:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001748:	2306      	movs	r3, #6
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <HAL_SPI_MspInit+0x84>)
 8001754:	f000 fb74 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40003c00 	.word	0x40003c00
 8001764:	40021000 	.word	0x40021000
 8001768:	48000800 	.word	0x48000800

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <NMI_Handler+0x4>

08001774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <MemManage_Handler+0x4>

08001784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <UsageFault_Handler+0x4>

08001794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c2:	f000 f9e7 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <EXTI9_5_IRQHandler+0x14>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80017d6:	2040      	movs	r0, #64	@ 0x40
 80017d8:	f000 fd0c 	bl	80021f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200002e8 	.word	0x200002e8

080017e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00a      	b.n	800180c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f6:	f3af 8000 	nop.w
 80017fa:	4601      	mov	r1, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf0      	blt.n	80017f6 <_read+0x12>
	}

return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <_sbrk+0x50>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x16>
		heap_end = &end;
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <_sbrk+0x50>)
 8001832:	4a10      	ldr	r2, [pc, #64]	@ (8001874 <_sbrk+0x54>)
 8001834:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <_sbrk+0x50>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <_sbrk+0x50>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	466a      	mov	r2, sp
 8001846:	4293      	cmp	r3, r2
 8001848:	d907      	bls.n	800185a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800184a:	f002 fc1b 	bl	8004084 <__errno>
 800184e:	4603      	mov	r3, r0
 8001850:	220c      	movs	r2, #12
 8001852:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e006      	b.n	8001868 <_sbrk+0x48>
	}

	heap_end += incr;
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <_sbrk+0x50>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a03      	ldr	r2, [pc, #12]	@ (8001870 <_sbrk+0x50>)
 8001864:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000368 	.word	0x20000368
 8001874:	200004c0 	.word	0x200004c0

08001878 <_close>:

int _close(int file)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a0:	605a      	str	r2, [r3, #4]
	return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_isatty>:

int _isatty(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
	return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <SystemInit+0x64>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ea:	4a16      	ldr	r2, [pc, #88]	@ (8001944 <SystemInit+0x64>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <SystemInit+0x68>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <SystemInit+0x68>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <SystemInit+0x68>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <SystemInit+0x68>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <SystemInit+0x68>)
 800190c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001910:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001914:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <SystemInit+0x68>)
 8001918:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800191c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <SystemInit+0x68>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <SystemInit+0x68>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800192a:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <SystemInit+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SystemInit+0x64>)
 8001932:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001936:	609a      	str	r2, [r3, #8]
#endif
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	40021000 	.word	0x40021000

0800194c <__NVIC_EnableIRQ>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	@ (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  // TODO implement this
	//Turn on TIM2 Clock, TIM2 Clock is bit 0 of APB1ENR1
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80019e4:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <timer_init+0x94>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <timer_init+0x94>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6593      	str	r3, [r2, #88]	@ 0x58

	//change bit 0 to to disable timer
		timer->CR1 &= ~TIM_CR1_CEN;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 0201 	bic.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	601a      	str	r2, [r3, #0]

	//Reset timer count
		timer->CNT = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24

	//Reset State/Status Register
		timer->SR = 0x00000000;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]

	//Set Auto Reload Register to a value
		timer->ARR = 49;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2231      	movs	r2, #49	@ 0x31
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c


	//Slow down both AHB and APB1 to get a 4000 division of the 4MHz to 1Khz for ms auto reload
		timer->PSC |= 7999;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f443 53f9 	orr.w	r3, r3, #7968	@ 0x1f20
 8001a16:	f043 031f 	orr.w	r3, r3, #31
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6293      	str	r3, [r2, #40]	@ 0x28
//		RCC->CFGR |= RCC_CFGR_HPRE_DIV512;
//		RCC->CFGR |= RCC_CFGR_PPRE1_DIV8;

	// change bit 4 to 0 for up	counting
		timer->CR1 &= ~TIM_CR1_DIR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0210 	bic.w	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
	
	// Enable update interrupts
	// (Setting this to 1 disables interrupts. Set it to 0 by force.)
		timer->CR1 &= ~TIM_CR1_UDIS;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0202 	bic.w	r2, r3, #2
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]

	//Enable interrupts
		timer->DIER |= TIM_DIER_UIE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60da      	str	r2, [r3, #12]
		timer->EGR  |= TIM_EGR_UG; // This seems to not have an impact...
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	615a      	str	r2, [r3, #20]
		NVIC_EnableIRQ(TIM2_IRQn);
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f7ff ff7c 	bl	800194c <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM2_IRQn, 1);
 8001a54:	2101      	movs	r1, #1
 8001a56:	201c      	movs	r0, #28
 8001a58:	f7ff ff96 	bl	8001988 <__NVIC_SetPriority>


	//Enable Timer
		timer->CR1 |= TIM_CR1_CEN;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <timer_set_ms>:
	//Set timer's counter to 0
		timer->CNT = 0;
}

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
  // TODO implement this

	//set timer to 0
		timer->CNT = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

	//Set period time ARR with period_ms
		timer->ARR = period_ms;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff ff20 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa2:	490d      	ldr	r1, [pc, #52]	@ (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f002 fae3 	bl	8004090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff fb59 	bl	8001180 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001adc:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8001ae0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001ae4:	200004bc 	.word	0x200004bc

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>

08001aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f961 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f80e 	bl	8001b1c <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	e001      	b.n	8001b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0c:	f7ff fdc6 	bl	800169c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_InitTick+0x6c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_InitTick+0x70>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f96d 	bl	8001e26 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d809      	bhi.n	8001b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f937 	bl	8001dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <HAL_InitTick+0x74>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e007      	b.n	8001b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e004      	b.n	8001b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	e001      	b.n	8001b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000150 	.word	0x20000150
 8001b8c:	20000148 	.word	0x20000148
 8001b90:	2000014c 	.word	0x2000014c

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000150 	.word	0x20000150
 8001bb8:	2000036c 	.word	0x2000036c

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000036c 	.word	0x2000036c

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff ffee 	bl	8001bbc <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d005      	beq.n	8001bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_Delay+0x44>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f7      	bhi.n	8001bfc <HAL_Delay+0x28>
  {
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000150 	.word	0x20000150

08001c1c <__NVIC_SetPriorityGrouping>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e17f      	b.n	8002150 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8171 	beq.w	800214a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d005      	beq.n	8001e80 <HAL_GPIO_Init+0x40>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d130      	bne.n	8001ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f003 0201 	and.w	r2, r3, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d118      	bne.n	8001f20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	6939      	ldr	r1, [r7, #16]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80ac 	beq.w	800214a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <HAL_GPIO_Init+0x330>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8002170 <HAL_GPIO_Init+0x330>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8002170 <HAL_GPIO_Init+0x330>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800200a:	4a5a      	ldr	r2, [pc, #360]	@ (8002174 <HAL_GPIO_Init+0x334>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002034:	d025      	beq.n	8002082 <HAL_GPIO_Init+0x242>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4f      	ldr	r2, [pc, #316]	@ (8002178 <HAL_GPIO_Init+0x338>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01f      	beq.n	800207e <HAL_GPIO_Init+0x23e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4e      	ldr	r2, [pc, #312]	@ (800217c <HAL_GPIO_Init+0x33c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x23a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4d      	ldr	r2, [pc, #308]	@ (8002180 <HAL_GPIO_Init+0x340>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x236>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4c      	ldr	r2, [pc, #304]	@ (8002184 <HAL_GPIO_Init+0x344>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x232>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4b      	ldr	r2, [pc, #300]	@ (8002188 <HAL_GPIO_Init+0x348>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x22e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4a      	ldr	r2, [pc, #296]	@ (800218c <HAL_GPIO_Init+0x34c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x22a>
 8002066:	2306      	movs	r3, #6
 8002068:	e00c      	b.n	8002084 <HAL_GPIO_Init+0x244>
 800206a:	2307      	movs	r3, #7
 800206c:	e00a      	b.n	8002084 <HAL_GPIO_Init+0x244>
 800206e:	2305      	movs	r3, #5
 8002070:	e008      	b.n	8002084 <HAL_GPIO_Init+0x244>
 8002072:	2304      	movs	r3, #4
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x244>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <HAL_GPIO_Init+0x244>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <HAL_GPIO_Init+0x244>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x244>
 8002082:	2300      	movs	r3, #0
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	f002 0203 	and.w	r2, r2, #3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4093      	lsls	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002094:	4937      	ldr	r1, [pc, #220]	@ (8002174 <HAL_GPIO_Init+0x334>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <HAL_GPIO_Init+0x350>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c6:	4a32      	ldr	r2, [pc, #200]	@ (8002190 <HAL_GPIO_Init+0x350>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020cc:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <HAL_GPIO_Init+0x350>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020f0:	4a27      	ldr	r2, [pc, #156]	@ (8002190 <HAL_GPIO_Init+0x350>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <HAL_GPIO_Init+0x350>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800211a:	4a1d      	ldr	r2, [pc, #116]	@ (8002190 <HAL_GPIO_Init+0x350>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_GPIO_Init+0x350>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002144:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <HAL_GPIO_Init+0x350>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f47f ae78 	bne.w	8001e50 <HAL_GPIO_Init+0x10>
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000
 8002178:	48000400 	.word	0x48000400
 800217c:	48000800 	.word	0x48000800
 8002180:	48000c00 	.word	0x48000c00
 8002184:	48001000 	.word	0x48001000
 8002188:	48001400 	.word	0x48001400
 800218c:	48001800 	.word	0x48001800
 8002190:	40010400 	.word	0x40010400

08002194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e001      	b.n	80021b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f806 	bl	8002224 <HAL_GPIO_EXTI_Callback>
  }
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <HAL_PWREx_GetVoltageRange+0x18>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007000 	.word	0x40007000

08002258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002266:	d130      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002268:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002274:	d038      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800227e:	4a1e      	ldr	r2, [pc, #120]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002280:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002286:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2232      	movs	r2, #50	@ 0x32
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229c:	e002      	b.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b0:	d102      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f2      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c4:	d110      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00f      	b.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d007      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e0:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000
 80022fc:	20000148 	.word	0x20000148
 8002300:	431bde83 	.word	0x431bde83

08002304 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e3ca      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002316:	4b97      	ldr	r3, [pc, #604]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002320:	4b94      	ldr	r3, [pc, #592]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80e4 	beq.w	8002500 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_RCC_OscConfig+0x4a>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b0c      	cmp	r3, #12
 8002342:	f040 808b 	bne.w	800245c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b01      	cmp	r3, #1
 800234a:	f040 8087 	bne.w	800245c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x62>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3a2      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1a      	ldr	r2, [r3, #32]
 800236a:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_RCC_OscConfig+0x7c>
 8002376:	4b7f      	ldr	r3, [pc, #508]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800237e:	e005      	b.n	800238c <HAL_RCC_OscConfig+0x88>
 8002380:	4b7c      	ldr	r3, [pc, #496]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800238c:	4293      	cmp	r3, r2
 800238e:	d223      	bcs.n	80023d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fd1d 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e383      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b73      	ldr	r3, [pc, #460]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a72      	ldr	r2, [pc, #456]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b70      	ldr	r3, [pc, #448]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	496d      	ldr	r1, [pc, #436]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4968      	ldr	r1, [pc, #416]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
 80023d6:	e025      	b.n	8002424 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d8:	4b66      	ldr	r3, [pc, #408]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a65      	ldr	r2, [pc, #404]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4960      	ldr	r1, [pc, #384]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	495b      	ldr	r1, [pc, #364]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fcdd 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e343      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002424:	f000 fc4a 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b52      	ldr	r3, [pc, #328]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	4950      	ldr	r1, [pc, #320]	@ (8002578 <HAL_RCC_OscConfig+0x274>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	4a4e      	ldr	r2, [pc, #312]	@ (800257c <HAL_RCC_OscConfig+0x278>)
 8002442:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002444:	4b4e      	ldr	r3, [pc, #312]	@ (8002580 <HAL_RCC_OscConfig+0x27c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fb67 	bl	8001b1c <HAL_InitTick>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d052      	beq.n	80024fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	e327      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d032      	beq.n	80024ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002464:	4b43      	ldr	r3, [pc, #268]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a42      	ldr	r2, [pc, #264]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002470:	f7ff fba4 	bl	8001bbc <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002478:	f7ff fba0 	bl	8001bbc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e310      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248a:	4b3a      	ldr	r3, [pc, #232]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002496:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a36      	ldr	r2, [pc, #216]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b34      	ldr	r3, [pc, #208]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4931      	ldr	r1, [pc, #196]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	492c      	ldr	r1, [pc, #176]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
 80024c8:	e01a      	b.n	8002500 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d6:	f7ff fb71 	bl	8001bbc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024de:	f7ff fb6d 	bl	8001bbc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e2dd      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f0:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x1da>
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d074      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x21a>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d10e      	bne.n	8002536 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d10b      	bne.n	8002536 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d064      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d160      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e2ba      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x24a>
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0b      	ldr	r2, [pc, #44]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e026      	b.n	800259c <HAL_RCC_OscConfig+0x298>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002556:	d115      	bne.n	8002584 <HAL_RCC_OscConfig+0x280>
 8002558:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800255e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b03      	ldr	r3, [pc, #12]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a02      	ldr	r2, [pc, #8]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x298>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	08004d98 	.word	0x08004d98
 800257c:	20000148 	.word	0x20000148
 8002580:	2000014c 	.word	0x2000014c
 8002584:	4ba0      	ldr	r3, [pc, #640]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a9f      	ldr	r2, [pc, #636]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b9d      	ldr	r3, [pc, #628]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a9c      	ldr	r2, [pc, #624]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb0a 	bl	8001bbc <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff fb06 	bl	8001bbc <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e276      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025be:	4b92      	ldr	r3, [pc, #584]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x2a8>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff faf6 	bl	8001bbc <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff faf2 	bl	8001bbc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e262      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e6:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2d0>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d060      	beq.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x310>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d119      	bne.n	8002642 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d116      	bne.n	8002642 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002614:	4b7c      	ldr	r3, [pc, #496]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x328>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e23f      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4973      	ldr	r1, [pc, #460]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002640:	e040      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d023      	beq.n	8002692 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264a:	4b6f      	ldr	r3, [pc, #444]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff fab1 	bl	8001bbc <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff faad 	bl	8001bbc <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e21d      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	4b65      	ldr	r3, [pc, #404]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b62      	ldr	r3, [pc, #392]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	495f      	ldr	r1, [pc, #380]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e018      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b5d      	ldr	r3, [pc, #372]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5c      	ldr	r2, [pc, #368]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7ff fa8d 	bl	8001bbc <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7ff fa89 	bl	8001bbc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1f9      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b8:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d03c      	beq.n	800274a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01c      	beq.n	8002712 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026de:	4a4a      	ldr	r2, [pc, #296]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7ff fa68 	bl	8001bbc <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff fa64 	bl	8001bbc <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1d4      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3ec>
 8002710:	e01b      	b.n	800274a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002718:	4a3b      	ldr	r2, [pc, #236]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff fa4b 	bl	8001bbc <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7ff fa47 	bl	8001bbc <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1b7      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273c:	4b32      	ldr	r3, [pc, #200]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a6 	beq.w	80028a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800275c:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276c:	4a26      	ldr	r2, [pc, #152]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	@ 0x58
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002780:	2301      	movs	r3, #1
 8002782:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCC_OscConfig+0x508>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d118      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002790:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <HAL_RCC_OscConfig+0x508>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <HAL_RCC_OscConfig+0x508>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279c:	f7ff fa0e 	bl	8001bbc <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7ff fa0a 	bl	8001bbc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e17a      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_RCC_OscConfig+0x508>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_RCC_OscConfig+0x4d8>
 80027ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027da:	e029      	b.n	8002830 <HAL_RCC_OscConfig+0x52c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d115      	bne.n	8002810 <HAL_RCC_OscConfig+0x50c>
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	4a03      	ldr	r2, [pc, #12]	@ (8002808 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x52c>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
 8002810:	4b9c      	ldr	r3, [pc, #624]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	4a9b      	ldr	r2, [pc, #620]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002820:	4b98      	ldr	r3, [pc, #608]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002826:	4a97      	ldr	r2, [pc, #604]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d016      	beq.n	8002866 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7ff f9c0 	bl	8001bbc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7ff f9bc 	bl	8001bbc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e12a      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	4b8b      	ldr	r3, [pc, #556]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ed      	beq.n	8002840 <HAL_RCC_OscConfig+0x53c>
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7ff f9a9 	bl	8001bbc <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7ff f9a5 	bl	8001bbc <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e113      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002884:	4b7f      	ldr	r3, [pc, #508]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ed      	bne.n	800286e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002892:	7ffb      	ldrb	r3, [r7, #31]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4b7a      	ldr	r3, [pc, #488]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	4a79      	ldr	r2, [pc, #484]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80fe 	beq.w	8002aaa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	f040 80d0 	bne.w	8002a58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028b8:	4b72      	ldr	r3, [pc, #456]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d130      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	3b01      	subs	r3, #1
 80028d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d127      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11f      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028f8:	2a07      	cmp	r2, #7
 80028fa:	bf14      	ite	ne
 80028fc:	2201      	movne	r2, #1
 80028fe:	2200      	moveq	r2, #0
 8002900:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	4293      	cmp	r3, r2
 8002904:	d113      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d109      	bne.n	800292e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d06e      	beq.n	8002a0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	d069      	beq.n	8002a08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002934:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002940:	4b50      	ldr	r3, [pc, #320]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0ad      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002950:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a4b      	ldr	r2, [pc, #300]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800295c:	f7ff f92e 	bl	8001bbc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff f92a 	bl	8001bbc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e09a      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002976:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002982:	4b40      	ldr	r3, [pc, #256]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_RCC_OscConfig+0x784>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002992:	3a01      	subs	r2, #1
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800299c:	0212      	lsls	r2, r2, #8
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029a4:	0852      	lsrs	r2, r2, #1
 80029a6:	3a01      	subs	r2, #1
 80029a8:	0552      	lsls	r2, r2, #21
 80029aa:	4311      	orrs	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029b0:	0852      	lsrs	r2, r2, #1
 80029b2:	3a01      	subs	r2, #1
 80029b4:	0652      	lsls	r2, r2, #25
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029bc:	0912      	lsrs	r2, r2, #4
 80029be:	0452      	lsls	r2, r2, #17
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4930      	ldr	r1, [pc, #192]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e0:	f7ff f8ec 	bl	8001bbc <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7ff f8e8 	bl	8001bbc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e058      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a06:	e050      	b.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04f      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d148      	bne.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a24:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a16      	ldr	r2, [pc, #88]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a30:	f7ff f8c4 	bl	8001bbc <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7ff f8c0 	bl	8001bbc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e030      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x734>
 8002a56:	e028      	b.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d023      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <HAL_RCC_OscConfig+0x780>)
 8002a64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff f8a7 	bl	8001bbc <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a70:	e00c      	b.n	8002a8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7ff f8a3 	bl	8001bbc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d905      	bls.n	8002a8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e013      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_RCC_OscConfig+0x7b0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ec      	bne.n	8002a72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x7b0>)
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	4905      	ldr	r1, [pc, #20]	@ (8002ab4 <HAL_RCC_OscConfig+0x7b0>)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x7b4>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e001      	b.n	8002aaa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	feeefffc 	.word	0xfeeefffc

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0e7      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b75      	ldr	r3, [pc, #468]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b72      	ldr	r3, [pc, #456]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4970      	ldr	r1, [pc, #448]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cf      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b63      	ldr	r3, [pc, #396]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4960      	ldr	r1, [pc, #384]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04c      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b5a      	ldr	r3, [pc, #360]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d121      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0a6      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e09a      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b72:	4b4e      	ldr	r3, [pc, #312]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08e      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e086      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b46      	ldr	r3, [pc, #280]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4943      	ldr	r1, [pc, #268]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f80a 	bl	8001bbc <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff f806 	bl	8001bbc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e06e      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b31      	ldr	r3, [pc, #196]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d208      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	492b      	ldr	r1, [pc, #172]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c02:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d210      	bcs.n	8002c32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4923      	ldr	r1, [pc, #140]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c20:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e036      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4918      	ldr	r1, [pc, #96]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d009      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4910      	ldr	r1, [pc, #64]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c70:	f000 f824 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	490b      	ldr	r1, [pc, #44]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c90:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe ff41 	bl	8001b1c <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08004d98 	.word	0x08004d98
 8002cb4:	20000148 	.word	0x20000148
 8002cb8:	2000014c 	.word	0x2000014c

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cca:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d121      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d11e      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf0:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cfc:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e005      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d18:	4a2b      	ldr	r2, [pc, #172]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e004      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d40:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d134      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0xac>
 8002d60:	e005      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d64:	617b      	str	r3, [r7, #20]
      break;
 8002d66:	e005      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6a:	617b      	str	r3, [r7, #20]
      break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	617b      	str	r3, [r7, #20]
      break;
 8002d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d74:	4b13      	ldr	r3, [pc, #76]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	3301      	adds	r3, #1
 8002d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	fb03 f202 	mul.w	r2, r3, r2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	0e5b      	lsrs	r3, r3, #25
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	3301      	adds	r3, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db4:	69bb      	ldr	r3, [r7, #24]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08004da8 	.word	0x08004da8
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	007a1200 	.word	0x007a1200

08002dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dec:	f7ff fa26 	bl	800223c <HAL_PWREx_GetVoltageRange>
 8002df0:	6178      	str	r0, [r7, #20]
 8002df2:	e014      	b.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	4a24      	ldr	r2, [pc, #144]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff fa16 	bl	800223c <HAL_PWREx_GetVoltageRange>
 8002e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e24:	d10b      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	@ 0x80
 8002e2a:	d919      	bls.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e30:	d902      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e32:	2302      	movs	r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e013      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e010      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b80      	cmp	r3, #128	@ 0x80
 8002e42:	d902      	bls.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e44:	2303      	movs	r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e00a      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	@ 0x80
 8002e4e:	d102      	bne.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e50:	2302      	movs	r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e004      	b.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b70      	cmp	r3, #112	@ 0x70
 8002e5a:	d101      	bne.n	8002e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0207 	bic.w	r2, r3, #7
 8002e68:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e70:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e095      	b.n	8002fd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eb6:	d009      	beq.n	8002ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
 8002ebe:	e005      	b.n	8002ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fbfc 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f0c:	d902      	bls.n	8002f14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e002      	b.n	8002f1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f22:	d007      	beq.n	8002f34 <HAL_SPI_Init+0xa0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f2c:	d002      	beq.n	8002f34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	f003 0204 	and.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fb0:	ea42 0103 	orr.w	r1, r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b088      	sub	sp, #32
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_SPI_Transmit+0x22>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e15f      	b.n	80032bc <HAL_SPI_Transmit+0x2e2>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003004:	f7fe fdda 	bl	8001bbc <HAL_GetTick>
 8003008:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d002      	beq.n	8003020 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800301e:	e148      	b.n	80032b2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_Transmit+0x52>
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003030:	e13f      	b.n	80032b2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2203      	movs	r2, #3
 8003036:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800307c:	d10f      	bne.n	800309e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800308c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800309c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d007      	beq.n	80030bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c4:	d94f      	bls.n	8003166 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_SPI_Transmit+0xfa>
 80030ce:	8afb      	ldrh	r3, [r7, #22]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d142      	bne.n	800315a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030f8:	e02f      	b.n	800315a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d112      	bne.n	800312e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800312c:	e015      	b.n	800315a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312e:	f7fe fd45 	bl	8001bbc <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d803      	bhi.n	8003146 <HAL_SPI_Transmit+0x16c>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d102      	bne.n	800314c <HAL_SPI_Transmit+0x172>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003158:	e0ab      	b.n	80032b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ca      	bne.n	80030fa <HAL_SPI_Transmit+0x120>
 8003164:	e080      	b.n	8003268 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Transmit+0x19a>
 800316e:	8afb      	ldrh	r3, [r7, #22]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d174      	bne.n	800325e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d912      	bls.n	80031a4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b02      	subs	r3, #2
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031a2:	e05c      	b.n	800325e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031ca:	e048      	b.n	800325e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d12b      	bne.n	8003232 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d912      	bls.n	800320a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	881a      	ldrh	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	1c9a      	adds	r2, r3, #2
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b02      	subs	r3, #2
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003208:	e029      	b.n	800325e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	7812      	ldrb	r2, [r2, #0]
 8003216:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003230:	e015      	b.n	800325e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003232:	f7fe fcc3 	bl	8001bbc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d803      	bhi.n	800324a <HAL_SPI_Transmit+0x270>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d102      	bne.n	8003250 <HAL_SPI_Transmit+0x276>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800325c:	e029      	b.n	80032b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1b1      	bne.n	80031cc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fb69 	bl	8003944 <SPI_EndRxTxTransaction>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e003      	b.n	80032b2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d2:	2301      	movs	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x26>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e20a      	b.n	8003700 <HAL_SPI_TransmitReceive+0x43c>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f2:	f7fe fc63 	bl	8001bbc <HAL_GetTick>
 80032f6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032fe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800330e:	7efb      	ldrb	r3, [r7, #27]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d00e      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x6e>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331a:	d106      	bne.n	800332a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_SPI_TransmitReceive+0x66>
 8003324:	7efb      	ldrb	r3, [r7, #27]
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003330:	e1e0      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x80>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x80>
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800334a:	e1d3      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b04      	cmp	r3, #4
 8003356:	d003      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2205      	movs	r2, #5
 800335c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	887a      	ldrh	r2, [r7, #2]
 8003386:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a2:	d802      	bhi.n	80033aa <HAL_SPI_TransmitReceive+0xe6>
 80033a4:	8a3b      	ldrh	r3, [r7, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d908      	bls.n	80033bc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e007      	b.n	80033cc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d007      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033f2:	f240 8081 	bls.w	80034f8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x140>
 80033fe:	8a7b      	ldrh	r3, [r7, #18]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d16d      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	881a      	ldrh	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	1c9a      	adds	r2, r3, #2
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003428:	e05a      	b.n	80034e0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11b      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x1ac>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x1ac>
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	2b01      	cmp	r3, #1
 8003446:	d113      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d11c      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x1f4>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	b292      	uxth	r2, r2
 8003496:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b4:	2301      	movs	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034b8:	f7fe fb80 	bl	8001bbc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d80b      	bhi.n	80034e0 <HAL_SPI_TransmitReceive+0x21c>
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d007      	beq.n	80034e0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034de:	e109      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d19f      	bne.n	800342a <HAL_SPI_TransmitReceive+0x166>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d199      	bne.n	800342a <HAL_SPI_TransmitReceive+0x166>
 80034f6:	e0e3      	b.n	80036c0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x244>
 8003500:	8a7b      	ldrh	r3, [r7, #18]
 8003502:	2b01      	cmp	r3, #1
 8003504:	f040 80cf 	bne.w	80036a6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d912      	bls.n	8003538 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b02      	subs	r3, #2
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003536:	e0b6      	b.n	80036a6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355e:	e0a2      	b.n	80036a6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d134      	bne.n	80035d8 <HAL_SPI_TransmitReceive+0x314>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02f      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x314>
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	2b01      	cmp	r3, #1
 800357c:	d12c      	bne.n	80035d8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d912      	bls.n	80035ae <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b02      	subs	r3, #2
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035ac:	e012      	b.n	80035d4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d148      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x3b4>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d042      	beq.n	8003678 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d923      	bls.n	8003646 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	b292      	uxth	r2, r2
 800360a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b02      	subs	r3, #2
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d81f      	bhi.n	8003674 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	e016      	b.n	8003674 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f103 020c 	add.w	r2, r3, #12
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003674:	2301      	movs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003678:	f7fe faa0 	bl	8001bbc <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003684:	429a      	cmp	r2, r3
 8003686:	d803      	bhi.n	8003690 <HAL_SPI_TransmitReceive+0x3cc>
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d102      	bne.n	8003696 <HAL_SPI_TransmitReceive+0x3d2>
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80036a4:	e026      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f47f af57 	bne.w	8003560 <HAL_SPI_TransmitReceive+0x29c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f47f af50 	bne.w	8003560 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f93d 	bl	8003944 <SPI_EndRxTxTransaction>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e003      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	@ 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003718:	f7fe fa50 	bl	8001bbc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4413      	add	r3, r2
 8003726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003728:	f7fe fa48 	bl	8001bbc <HAL_GetTick>
 800372c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800372e:	4b39      	ldr	r3, [pc, #228]	@ (8003814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	015b      	lsls	r3, r3, #5
 8003734:	0d1b      	lsrs	r3, r3, #20
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800373e:	e054      	b.n	80037ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d050      	beq.n	80037ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003748:	f7fe fa38 	bl	8001bbc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	429a      	cmp	r2, r3
 8003756:	d902      	bls.n	800375e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d13d      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800376c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003776:	d111      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003780:	d004      	beq.n	800378c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378a:	d107      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a4:	d10f      	bne.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e017      	b.n	800380a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	429a      	cmp	r2, r3
 8003806:	d19b      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000148 	.word	0x20000148

08003818 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	@ 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800382a:	f7fe f9c7 	bl	8001bbc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4413      	add	r3, r2
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800383a:	f7fe f9bf 	bl	8001bbc <HAL_GetTick>
 800383e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003848:	4b3d      	ldr	r3, [pc, #244]	@ (8003940 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00da      	lsls	r2, r3, #3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	0d1b      	lsrs	r3, r3, #20
 8003858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003860:	e060      	b.n	8003924 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003868:	d107      	bne.n	800387a <SPI_WaitFifoStateUntilTimeout+0x62>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003878:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d050      	beq.n	8003924 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003882:	f7fe f99b 	bl	8001bbc <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388e:	429a      	cmp	r2, r3
 8003890:	d902      	bls.n	8003898 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d13d      	bne.n	8003914 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b0:	d111      	bne.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ba:	d004      	beq.n	80038c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c4:	d107      	bne.n	80038d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038de:	d10f      	bne.n	8003900 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e010      	b.n	8003936 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	3b01      	subs	r3, #1
 8003922:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d196      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3728      	adds	r7, #40	@ 0x28
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000148 	.word	0x20000148

08003944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff ff5b 	bl	8003818 <SPI_WaitFifoStateUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e027      	b.n	80039c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	2180      	movs	r1, #128	@ 0x80
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff fec0 	bl	8003708 <SPI_WaitFlagStateUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e014      	b.n	80039c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ff34 	bl	8003818 <SPI_WaitFifoStateUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e000      	b.n	80039c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <malloc>:
 80039d0:	4b02      	ldr	r3, [pc, #8]	@ (80039dc <malloc+0xc>)
 80039d2:	4601      	mov	r1, r0
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	f000 b82d 	b.w	8003a34 <_malloc_r>
 80039da:	bf00      	nop
 80039dc:	20000160 	.word	0x20000160

080039e0 <free>:
 80039e0:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <free+0xc>)
 80039e2:	4601      	mov	r1, r0
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	f000 bb89 	b.w	80040fc <_free_r>
 80039ea:	bf00      	nop
 80039ec:	20000160 	.word	0x20000160

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a30 <sbrk_aligned+0x40>)
 80039f4:	460c      	mov	r4, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	4605      	mov	r5, r0
 80039fa:	b911      	cbnz	r1, 8003a02 <sbrk_aligned+0x12>
 80039fc:	f000 fb20 	bl	8004040 <_sbrk_r>
 8003a00:	6030      	str	r0, [r6, #0]
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 fb1b 	bl	8004040 <_sbrk_r>
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d103      	bne.n	8003a16 <sbrk_aligned+0x26>
 8003a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a12:	4620      	mov	r0, r4
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
 8003a16:	1cc4      	adds	r4, r0, #3
 8003a18:	f024 0403 	bic.w	r4, r4, #3
 8003a1c:	42a0      	cmp	r0, r4
 8003a1e:	d0f8      	beq.n	8003a12 <sbrk_aligned+0x22>
 8003a20:	1a21      	subs	r1, r4, r0
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 fb0c 	bl	8004040 <_sbrk_r>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d1f2      	bne.n	8003a12 <sbrk_aligned+0x22>
 8003a2c:	e7ef      	b.n	8003a0e <sbrk_aligned+0x1e>
 8003a2e:	bf00      	nop
 8003a30:	20000370 	.word	0x20000370

08003a34 <_malloc_r>:
 8003a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a38:	1ccd      	adds	r5, r1, #3
 8003a3a:	f025 0503 	bic.w	r5, r5, #3
 8003a3e:	3508      	adds	r5, #8
 8003a40:	2d0c      	cmp	r5, #12
 8003a42:	bf38      	it	cc
 8003a44:	250c      	movcc	r5, #12
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	4606      	mov	r6, r0
 8003a4a:	db01      	blt.n	8003a50 <_malloc_r+0x1c>
 8003a4c:	42a9      	cmp	r1, r5
 8003a4e:	d904      	bls.n	8003a5a <_malloc_r+0x26>
 8003a50:	230c      	movs	r3, #12
 8003a52:	6033      	str	r3, [r6, #0]
 8003a54:	2000      	movs	r0, #0
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b30 <_malloc_r+0xfc>
 8003a5e:	f000 f869 	bl	8003b34 <__malloc_lock>
 8003a62:	f8d8 3000 	ldr.w	r3, [r8]
 8003a66:	461c      	mov	r4, r3
 8003a68:	bb44      	cbnz	r4, 8003abc <_malloc_r+0x88>
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7ff ffbf 	bl	80039f0 <sbrk_aligned>
 8003a72:	1c43      	adds	r3, r0, #1
 8003a74:	4604      	mov	r4, r0
 8003a76:	d158      	bne.n	8003b2a <_malloc_r+0xf6>
 8003a78:	f8d8 4000 	ldr.w	r4, [r8]
 8003a7c:	4627      	mov	r7, r4
 8003a7e:	2f00      	cmp	r7, #0
 8003a80:	d143      	bne.n	8003b0a <_malloc_r+0xd6>
 8003a82:	2c00      	cmp	r4, #0
 8003a84:	d04b      	beq.n	8003b1e <_malloc_r+0xea>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	4639      	mov	r1, r7
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	eb04 0903 	add.w	r9, r4, r3
 8003a90:	f000 fad6 	bl	8004040 <_sbrk_r>
 8003a94:	4581      	cmp	r9, r0
 8003a96:	d142      	bne.n	8003b1e <_malloc_r+0xea>
 8003a98:	6821      	ldr	r1, [r4, #0]
 8003a9a:	1a6d      	subs	r5, r5, r1
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff ffa6 	bl	80039f0 <sbrk_aligned>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d03a      	beq.n	8003b1e <_malloc_r+0xea>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	442b      	add	r3, r5
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	bb62      	cbnz	r2, 8003b10 <_malloc_r+0xdc>
 8003ab6:	f8c8 7000 	str.w	r7, [r8]
 8003aba:	e00f      	b.n	8003adc <_malloc_r+0xa8>
 8003abc:	6822      	ldr	r2, [r4, #0]
 8003abe:	1b52      	subs	r2, r2, r5
 8003ac0:	d420      	bmi.n	8003b04 <_malloc_r+0xd0>
 8003ac2:	2a0b      	cmp	r2, #11
 8003ac4:	d917      	bls.n	8003af6 <_malloc_r+0xc2>
 8003ac6:	1961      	adds	r1, r4, r5
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	6025      	str	r5, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	6059      	strne	r1, [r3, #4]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	bf08      	it	eq
 8003ad4:	f8c8 1000 	streq.w	r1, [r8]
 8003ad8:	5162      	str	r2, [r4, r5]
 8003ada:	604b      	str	r3, [r1, #4]
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f82f 	bl	8003b40 <__malloc_unlock>
 8003ae2:	f104 000b 	add.w	r0, r4, #11
 8003ae6:	1d23      	adds	r3, r4, #4
 8003ae8:	f020 0007 	bic.w	r0, r0, #7
 8003aec:	1ac2      	subs	r2, r0, r3
 8003aee:	bf1c      	itt	ne
 8003af0:	1a1b      	subne	r3, r3, r0
 8003af2:	50a3      	strne	r3, [r4, r2]
 8003af4:	e7af      	b.n	8003a56 <_malloc_r+0x22>
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	bf0c      	ite	eq
 8003afc:	f8c8 2000 	streq.w	r2, [r8]
 8003b00:	605a      	strne	r2, [r3, #4]
 8003b02:	e7eb      	b.n	8003adc <_malloc_r+0xa8>
 8003b04:	4623      	mov	r3, r4
 8003b06:	6864      	ldr	r4, [r4, #4]
 8003b08:	e7ae      	b.n	8003a68 <_malloc_r+0x34>
 8003b0a:	463c      	mov	r4, r7
 8003b0c:	687f      	ldr	r7, [r7, #4]
 8003b0e:	e7b6      	b.n	8003a7e <_malloc_r+0x4a>
 8003b10:	461a      	mov	r2, r3
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d1fb      	bne.n	8003b10 <_malloc_r+0xdc>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7de      	b.n	8003adc <_malloc_r+0xa8>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	6033      	str	r3, [r6, #0]
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f80c 	bl	8003b40 <__malloc_unlock>
 8003b28:	e794      	b.n	8003a54 <_malloc_r+0x20>
 8003b2a:	6005      	str	r5, [r0, #0]
 8003b2c:	e7d6      	b.n	8003adc <_malloc_r+0xa8>
 8003b2e:	bf00      	nop
 8003b30:	20000374 	.word	0x20000374

08003b34 <__malloc_lock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__malloc_lock+0x8>)
 8003b36:	f000 bad0 	b.w	80040da <__retarget_lock_acquire_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	200004b8 	.word	0x200004b8

08003b40 <__malloc_unlock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_unlock+0x8>)
 8003b42:	f000 bacb 	b.w	80040dc <__retarget_lock_release_recursive>
 8003b46:	bf00      	nop
 8003b48:	200004b8 	.word	0x200004b8

08003b4c <std>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
 8003b52:	e9c0 3300 	strd	r3, r3, [r0]
 8003b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b5a:	6083      	str	r3, [r0, #8]
 8003b5c:	8181      	strh	r1, [r0, #12]
 8003b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b60:	81c2      	strh	r2, [r0, #14]
 8003b62:	6183      	str	r3, [r0, #24]
 8003b64:	4619      	mov	r1, r3
 8003b66:	2208      	movs	r2, #8
 8003b68:	305c      	adds	r0, #92	@ 0x5c
 8003b6a:	f000 fa2d 	bl	8003fc8 <memset>
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x58>)
 8003b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <std+0x5c>)
 8003b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <std+0x60>)
 8003b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <std+0x64>)
 8003b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <std+0x68>)
 8003b80:	6224      	str	r4, [r4, #32]
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d006      	beq.n	8003b94 <std+0x48>
 8003b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b8a:	4294      	cmp	r4, r2
 8003b8c:	d002      	beq.n	8003b94 <std+0x48>
 8003b8e:	33d0      	adds	r3, #208	@ 0xd0
 8003b90:	429c      	cmp	r4, r3
 8003b92:	d105      	bne.n	8003ba0 <std+0x54>
 8003b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9c:	f000 ba9c 	b.w	80040d8 <__retarget_lock_init_recursive>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08003e19 	.word	0x08003e19
 8003ba8:	08003e3b 	.word	0x08003e3b
 8003bac:	08003e73 	.word	0x08003e73
 8003bb0:	08003e97 	.word	0x08003e97
 8003bb4:	20000378 	.word	0x20000378

08003bb8 <stdio_exit_handler>:
 8003bb8:	4a02      	ldr	r2, [pc, #8]	@ (8003bc4 <stdio_exit_handler+0xc>)
 8003bba:	4903      	ldr	r1, [pc, #12]	@ (8003bc8 <stdio_exit_handler+0x10>)
 8003bbc:	4803      	ldr	r0, [pc, #12]	@ (8003bcc <stdio_exit_handler+0x14>)
 8003bbe:	f000 b869 	b.w	8003c94 <_fwalk_sglue>
 8003bc2:	bf00      	nop
 8003bc4:	20000154 	.word	0x20000154
 8003bc8:	08004ae9 	.word	0x08004ae9
 8003bcc:	20000164 	.word	0x20000164

08003bd0 <cleanup_stdio>:
 8003bd0:	6841      	ldr	r1, [r0, #4]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <cleanup_stdio+0x34>)
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	d001      	beq.n	8003be0 <cleanup_stdio+0x10>
 8003bdc:	f000 ff84 	bl	8004ae8 <_fflush_r>
 8003be0:	68a1      	ldr	r1, [r4, #8]
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <cleanup_stdio+0x38>)
 8003be4:	4299      	cmp	r1, r3
 8003be6:	d002      	beq.n	8003bee <cleanup_stdio+0x1e>
 8003be8:	4620      	mov	r0, r4
 8003bea:	f000 ff7d 	bl	8004ae8 <_fflush_r>
 8003bee:	68e1      	ldr	r1, [r4, #12]
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <cleanup_stdio+0x3c>)
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	d004      	beq.n	8003c00 <cleanup_stdio+0x30>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bfc:	f000 bf74 	b.w	8004ae8 <_fflush_r>
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	20000378 	.word	0x20000378
 8003c08:	200003e0 	.word	0x200003e0
 8003c0c:	20000448 	.word	0x20000448

08003c10 <global_stdio_init.part.0>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4b0b      	ldr	r3, [pc, #44]	@ (8003c40 <global_stdio_init.part.0+0x30>)
 8003c14:	4c0b      	ldr	r4, [pc, #44]	@ (8003c44 <global_stdio_init.part.0+0x34>)
 8003c16:	4a0c      	ldr	r2, [pc, #48]	@ (8003c48 <global_stdio_init.part.0+0x38>)
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2104      	movs	r1, #4
 8003c20:	f7ff ff94 	bl	8003b4c <std>
 8003c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2109      	movs	r1, #9
 8003c2c:	f7ff ff8e 	bl	8003b4c <std>
 8003c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c34:	2202      	movs	r2, #2
 8003c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	f7ff bf86 	b.w	8003b4c <std>
 8003c40:	200004b0 	.word	0x200004b0
 8003c44:	20000378 	.word	0x20000378
 8003c48:	08003bb9 	.word	0x08003bb9

08003c4c <__sfp_lock_acquire>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	@ (8003c54 <__sfp_lock_acquire+0x8>)
 8003c4e:	f000 ba44 	b.w	80040da <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	200004b9 	.word	0x200004b9

08003c58 <__sfp_lock_release>:
 8003c58:	4801      	ldr	r0, [pc, #4]	@ (8003c60 <__sfp_lock_release+0x8>)
 8003c5a:	f000 ba3f 	b.w	80040dc <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200004b9 	.word	0x200004b9

08003c64 <__sinit>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4604      	mov	r4, r0
 8003c68:	f7ff fff0 	bl	8003c4c <__sfp_lock_acquire>
 8003c6c:	6a23      	ldr	r3, [r4, #32]
 8003c6e:	b11b      	cbz	r3, 8003c78 <__sinit+0x14>
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f7ff bff0 	b.w	8003c58 <__sfp_lock_release>
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__sinit+0x28>)
 8003c7a:	6223      	str	r3, [r4, #32]
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <__sinit+0x2c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f5      	bne.n	8003c70 <__sinit+0xc>
 8003c84:	f7ff ffc4 	bl	8003c10 <global_stdio_init.part.0>
 8003c88:	e7f2      	b.n	8003c70 <__sinit+0xc>
 8003c8a:	bf00      	nop
 8003c8c:	08003bd1 	.word	0x08003bd1
 8003c90:	200004b0 	.word	0x200004b0

08003c94 <_fwalk_sglue>:
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c98:	4607      	mov	r7, r0
 8003c9a:	4688      	mov	r8, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca8:	d505      	bpl.n	8003cb6 <_fwalk_sglue+0x22>
 8003caa:	6824      	ldr	r4, [r4, #0]
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d1f7      	bne.n	8003ca0 <_fwalk_sglue+0xc>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d907      	bls.n	8003ccc <_fwalk_sglue+0x38>
 8003cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d003      	beq.n	8003ccc <_fwalk_sglue+0x38>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	4306      	orrs	r6, r0
 8003ccc:	3568      	adds	r5, #104	@ 0x68
 8003cce:	e7e9      	b.n	8003ca4 <_fwalk_sglue+0x10>

08003cd0 <iprintf>:
 8003cd0:	b40f      	push	{r0, r1, r2, r3}
 8003cd2:	b507      	push	{r0, r1, r2, lr}
 8003cd4:	4906      	ldr	r1, [pc, #24]	@ (8003cf0 <iprintf+0x20>)
 8003cd6:	ab04      	add	r3, sp, #16
 8003cd8:	6808      	ldr	r0, [r1, #0]
 8003cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cde:	6881      	ldr	r1, [r0, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	f000 fbd7 	bl	8004494 <_vfiprintf_r>
 8003ce6:	b003      	add	sp, #12
 8003ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cec:	b004      	add	sp, #16
 8003cee:	4770      	bx	lr
 8003cf0:	20000160 	.word	0x20000160

08003cf4 <_puts_r>:
 8003cf4:	6a03      	ldr	r3, [r0, #32]
 8003cf6:	b570      	push	{r4, r5, r6, lr}
 8003cf8:	6884      	ldr	r4, [r0, #8]
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	b90b      	cbnz	r3, 8003d04 <_puts_r+0x10>
 8003d00:	f7ff ffb0 	bl	8003c64 <__sinit>
 8003d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d06:	07db      	lsls	r3, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_puts_r+0x22>
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	0598      	lsls	r0, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_puts_r+0x22>
 8003d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d12:	f000 f9e2 	bl	80040da <__retarget_lock_acquire_recursive>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	0719      	lsls	r1, r3, #28
 8003d1a:	d502      	bpl.n	8003d22 <_puts_r+0x2e>
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d135      	bne.n	8003d8e <_puts_r+0x9a>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f8f9 	bl	8003f1c <__swsetup_r>
 8003d2a:	b380      	cbz	r0, 8003d8e <_puts_r+0x9a>
 8003d2c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d32:	07da      	lsls	r2, r3, #31
 8003d34:	d405      	bmi.n	8003d42 <_puts_r+0x4e>
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	059b      	lsls	r3, r3, #22
 8003d3a:	d402      	bmi.n	8003d42 <_puts_r+0x4e>
 8003d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d3e:	f000 f9cd 	bl	80040dc <__retarget_lock_release_recursive>
 8003d42:	4628      	mov	r0, r5
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da04      	bge.n	8003d54 <_puts_r+0x60>
 8003d4a:	69a2      	ldr	r2, [r4, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	dc17      	bgt.n	8003d80 <_puts_r+0x8c>
 8003d50:	290a      	cmp	r1, #10
 8003d52:	d015      	beq.n	8003d80 <_puts_r+0x8c>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	7019      	strb	r1, [r3, #0]
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d62:	3b01      	subs	r3, #1
 8003d64:	60a3      	str	r3, [r4, #8]
 8003d66:	2900      	cmp	r1, #0
 8003d68:	d1ed      	bne.n	8003d46 <_puts_r+0x52>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da11      	bge.n	8003d92 <_puts_r+0x9e>
 8003d6e:	4622      	mov	r2, r4
 8003d70:	210a      	movs	r1, #10
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 f893 	bl	8003e9e <__swbuf_r>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d0d7      	beq.n	8003d2c <_puts_r+0x38>
 8003d7c:	250a      	movs	r5, #10
 8003d7e:	e7d7      	b.n	8003d30 <_puts_r+0x3c>
 8003d80:	4622      	mov	r2, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f88b 	bl	8003e9e <__swbuf_r>
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d1e7      	bne.n	8003d5c <_puts_r+0x68>
 8003d8c:	e7ce      	b.n	8003d2c <_puts_r+0x38>
 8003d8e:	3e01      	subs	r6, #1
 8003d90:	e7e4      	b.n	8003d5c <_puts_r+0x68>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	6022      	str	r2, [r4, #0]
 8003d98:	220a      	movs	r2, #10
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e7ee      	b.n	8003d7c <_puts_r+0x88>
	...

08003da0 <puts>:
 8003da0:	4b02      	ldr	r3, [pc, #8]	@ (8003dac <puts+0xc>)
 8003da2:	4601      	mov	r1, r0
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7ff bfa5 	b.w	8003cf4 <_puts_r>
 8003daa:	bf00      	nop
 8003dac:	20000160 	.word	0x20000160

08003db0 <sniprintf>:
 8003db0:	b40c      	push	{r2, r3}
 8003db2:	b530      	push	{r4, r5, lr}
 8003db4:	4b17      	ldr	r3, [pc, #92]	@ (8003e14 <sniprintf+0x64>)
 8003db6:	1e0c      	subs	r4, r1, #0
 8003db8:	681d      	ldr	r5, [r3, #0]
 8003dba:	b09d      	sub	sp, #116	@ 0x74
 8003dbc:	da08      	bge.n	8003dd0 <sniprintf+0x20>
 8003dbe:	238b      	movs	r3, #139	@ 0x8b
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc6:	b01d      	add	sp, #116	@ 0x74
 8003dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dcc:	b002      	add	sp, #8
 8003dce:	4770      	bx	lr
 8003dd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003dd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dd8:	bf14      	ite	ne
 8003dda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003dde:	4623      	moveq	r3, r4
 8003de0:	9304      	str	r3, [sp, #16]
 8003de2:	9307      	str	r3, [sp, #28]
 8003de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003de8:	9002      	str	r0, [sp, #8]
 8003dea:	9006      	str	r0, [sp, #24]
 8003dec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003df0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003df2:	ab21      	add	r3, sp, #132	@ 0x84
 8003df4:	a902      	add	r1, sp, #8
 8003df6:	4628      	mov	r0, r5
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	f000 fa25 	bl	8004248 <_svfiprintf_r>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	bfbc      	itt	lt
 8003e02:	238b      	movlt	r3, #139	@ 0x8b
 8003e04:	602b      	strlt	r3, [r5, #0]
 8003e06:	2c00      	cmp	r4, #0
 8003e08:	d0dd      	beq.n	8003dc6 <sniprintf+0x16>
 8003e0a:	9b02      	ldr	r3, [sp, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e7d9      	b.n	8003dc6 <sniprintf+0x16>
 8003e12:	bf00      	nop
 8003e14:	20000160 	.word	0x20000160

08003e18 <__sread>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e20:	f000 f8fc 	bl	800401c <_read_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	bfab      	itete	ge
 8003e28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e2c:	181b      	addge	r3, r3, r0
 8003e2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e32:	bfac      	ite	ge
 8003e34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e36:	81a3      	strhlt	r3, [r4, #12]
 8003e38:	bd10      	pop	{r4, pc}

08003e3a <__swrite>:
 8003e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	461f      	mov	r7, r3
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	05db      	lsls	r3, r3, #23
 8003e44:	4605      	mov	r5, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	4616      	mov	r6, r2
 8003e4a:	d505      	bpl.n	8003e58 <__swrite+0x1e>
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	2302      	movs	r3, #2
 8003e52:	2200      	movs	r2, #0
 8003e54:	f000 f8d0 	bl	8003ff8 <_lseek_r>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	4632      	mov	r2, r6
 8003e66:	463b      	mov	r3, r7
 8003e68:	4628      	mov	r0, r5
 8003e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	f000 b8f7 	b.w	8004060 <_write_r>

08003e72 <__sseek>:
 8003e72:	b510      	push	{r4, lr}
 8003e74:	460c      	mov	r4, r1
 8003e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7a:	f000 f8bd 	bl	8003ff8 <_lseek_r>
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	bf15      	itete	ne
 8003e84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e8e:	81a3      	strheq	r3, [r4, #12]
 8003e90:	bf18      	it	ne
 8003e92:	81a3      	strhne	r3, [r4, #12]
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <__sclose>:
 8003e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9a:	f000 b89d 	b.w	8003fd8 <_close_r>

08003e9e <__swbuf_r>:
 8003e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea0:	460e      	mov	r6, r1
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	4605      	mov	r5, r0
 8003ea6:	b118      	cbz	r0, 8003eb0 <__swbuf_r+0x12>
 8003ea8:	6a03      	ldr	r3, [r0, #32]
 8003eaa:	b90b      	cbnz	r3, 8003eb0 <__swbuf_r+0x12>
 8003eac:	f7ff feda 	bl	8003c64 <__sinit>
 8003eb0:	69a3      	ldr	r3, [r4, #24]
 8003eb2:	60a3      	str	r3, [r4, #8]
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	071a      	lsls	r2, r3, #28
 8003eb8:	d501      	bpl.n	8003ebe <__swbuf_r+0x20>
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	b943      	cbnz	r3, 8003ed0 <__swbuf_r+0x32>
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 f82b 	bl	8003f1c <__swsetup_r>
 8003ec6:	b118      	cbz	r0, 8003ed0 <__swbuf_r+0x32>
 8003ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8003ecc:	4638      	mov	r0, r7
 8003ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	1a98      	subs	r0, r3, r2
 8003ed6:	6963      	ldr	r3, [r4, #20]
 8003ed8:	b2f6      	uxtb	r6, r6
 8003eda:	4283      	cmp	r3, r0
 8003edc:	4637      	mov	r7, r6
 8003ede:	dc05      	bgt.n	8003eec <__swbuf_r+0x4e>
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 fe00 	bl	8004ae8 <_fflush_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d1ed      	bne.n	8003ec8 <__swbuf_r+0x2a>
 8003eec:	68a3      	ldr	r3, [r4, #8]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	6022      	str	r2, [r4, #0]
 8003ef8:	701e      	strb	r6, [r3, #0]
 8003efa:	6962      	ldr	r2, [r4, #20]
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d004      	beq.n	8003f0c <__swbuf_r+0x6e>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	07db      	lsls	r3, r3, #31
 8003f06:	d5e1      	bpl.n	8003ecc <__swbuf_r+0x2e>
 8003f08:	2e0a      	cmp	r6, #10
 8003f0a:	d1df      	bne.n	8003ecc <__swbuf_r+0x2e>
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 fdea 	bl	8004ae8 <_fflush_r>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d0d9      	beq.n	8003ecc <__swbuf_r+0x2e>
 8003f18:	e7d6      	b.n	8003ec8 <__swbuf_r+0x2a>
	...

08003f1c <__swsetup_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4b29      	ldr	r3, [pc, #164]	@ (8003fc4 <__swsetup_r+0xa8>)
 8003f20:	4605      	mov	r5, r0
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	460c      	mov	r4, r1
 8003f26:	b118      	cbz	r0, 8003f30 <__swsetup_r+0x14>
 8003f28:	6a03      	ldr	r3, [r0, #32]
 8003f2a:	b90b      	cbnz	r3, 8003f30 <__swsetup_r+0x14>
 8003f2c:	f7ff fe9a 	bl	8003c64 <__sinit>
 8003f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f34:	0719      	lsls	r1, r3, #28
 8003f36:	d422      	bmi.n	8003f7e <__swsetup_r+0x62>
 8003f38:	06da      	lsls	r2, r3, #27
 8003f3a:	d407      	bmi.n	8003f4c <__swsetup_r+0x30>
 8003f3c:	2209      	movs	r2, #9
 8003f3e:	602a      	str	r2, [r5, #0]
 8003f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4a:	e033      	b.n	8003fb4 <__swsetup_r+0x98>
 8003f4c:	0758      	lsls	r0, r3, #29
 8003f4e:	d512      	bpl.n	8003f76 <__swsetup_r+0x5a>
 8003f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f52:	b141      	cbz	r1, 8003f66 <__swsetup_r+0x4a>
 8003f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	d002      	beq.n	8003f62 <__swsetup_r+0x46>
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f000 f8cd 	bl	80040fc <_free_r>
 8003f62:	2300      	movs	r3, #0
 8003f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6063      	str	r3, [r4, #4]
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	b94b      	cbnz	r3, 8003f96 <__swsetup_r+0x7a>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f8c:	d003      	beq.n	8003f96 <__swsetup_r+0x7a>
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 fdf7 	bl	8004b84 <__smakebuf_r>
 8003f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f9a:	f013 0201 	ands.w	r2, r3, #1
 8003f9e:	d00a      	beq.n	8003fb6 <__swsetup_r+0x9a>
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	60a2      	str	r2, [r4, #8]
 8003fa4:	6962      	ldr	r2, [r4, #20]
 8003fa6:	4252      	negs	r2, r2
 8003fa8:	61a2      	str	r2, [r4, #24]
 8003faa:	6922      	ldr	r2, [r4, #16]
 8003fac:	b942      	cbnz	r2, 8003fc0 <__swsetup_r+0xa4>
 8003fae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003fb2:	d1c5      	bne.n	8003f40 <__swsetup_r+0x24>
 8003fb4:	bd38      	pop	{r3, r4, r5, pc}
 8003fb6:	0799      	lsls	r1, r3, #30
 8003fb8:	bf58      	it	pl
 8003fba:	6962      	ldrpl	r2, [r4, #20]
 8003fbc:	60a2      	str	r2, [r4, #8]
 8003fbe:	e7f4      	b.n	8003faa <__swsetup_r+0x8e>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e7f7      	b.n	8003fb4 <__swsetup_r+0x98>
 8003fc4:	20000160 	.word	0x20000160

08003fc8 <memset>:
 8003fc8:	4402      	add	r2, r0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d100      	bne.n	8003fd2 <memset+0xa>
 8003fd0:	4770      	bx	lr
 8003fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd6:	e7f9      	b.n	8003fcc <memset+0x4>

08003fd8 <_close_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d06      	ldr	r5, [pc, #24]	@ (8003ff4 <_close_r+0x1c>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	f7fd fc48 	bl	8001878 <_close>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_close_r+0x1a>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_close_r+0x1a>
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	200004b4 	.word	0x200004b4

08003ff8 <_lseek_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4d07      	ldr	r5, [pc, #28]	@ (8004018 <_lseek_r+0x20>)
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	4608      	mov	r0, r1
 8004000:	4611      	mov	r1, r2
 8004002:	2200      	movs	r2, #0
 8004004:	602a      	str	r2, [r5, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f7fd fc5d 	bl	80018c6 <_lseek>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_lseek_r+0x1e>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_lseek_r+0x1e>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	200004b4 	.word	0x200004b4

0800401c <_read_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d07      	ldr	r5, [pc, #28]	@ (800403c <_read_r+0x20>)
 8004020:	4604      	mov	r4, r0
 8004022:	4608      	mov	r0, r1
 8004024:	4611      	mov	r1, r2
 8004026:	2200      	movs	r2, #0
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f7fd fbda 	bl	80017e4 <_read>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_read_r+0x1e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_read_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	200004b4 	.word	0x200004b4

08004040 <_sbrk_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4d06      	ldr	r5, [pc, #24]	@ (800405c <_sbrk_r+0x1c>)
 8004044:	2300      	movs	r3, #0
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fd fbe8 	bl	8001820 <_sbrk>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_sbrk_r+0x1a>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_sbrk_r+0x1a>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	200004b4 	.word	0x200004b4

08004060 <_write_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4d07      	ldr	r5, [pc, #28]	@ (8004080 <_write_r+0x20>)
 8004064:	4604      	mov	r4, r0
 8004066:	4608      	mov	r0, r1
 8004068:	4611      	mov	r1, r2
 800406a:	2200      	movs	r2, #0
 800406c:	602a      	str	r2, [r5, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	f7fd f867 	bl	8001142 <_write>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_write_r+0x1e>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_write_r+0x1e>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	200004b4 	.word	0x200004b4

08004084 <__errno>:
 8004084:	4b01      	ldr	r3, [pc, #4]	@ (800408c <__errno+0x8>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000160 	.word	0x20000160

08004090 <__libc_init_array>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	4d0d      	ldr	r5, [pc, #52]	@ (80040c8 <__libc_init_array+0x38>)
 8004094:	4c0d      	ldr	r4, [pc, #52]	@ (80040cc <__libc_init_array+0x3c>)
 8004096:	1b64      	subs	r4, r4, r5
 8004098:	10a4      	asrs	r4, r4, #2
 800409a:	2600      	movs	r6, #0
 800409c:	42a6      	cmp	r6, r4
 800409e:	d109      	bne.n	80040b4 <__libc_init_array+0x24>
 80040a0:	4d0b      	ldr	r5, [pc, #44]	@ (80040d0 <__libc_init_array+0x40>)
 80040a2:	4c0c      	ldr	r4, [pc, #48]	@ (80040d4 <__libc_init_array+0x44>)
 80040a4:	f000 fe1c 	bl	8004ce0 <_init>
 80040a8:	1b64      	subs	r4, r4, r5
 80040aa:	10a4      	asrs	r4, r4, #2
 80040ac:	2600      	movs	r6, #0
 80040ae:	42a6      	cmp	r6, r4
 80040b0:	d105      	bne.n	80040be <__libc_init_array+0x2e>
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b8:	4798      	blx	r3
 80040ba:	3601      	adds	r6, #1
 80040bc:	e7ee      	b.n	800409c <__libc_init_array+0xc>
 80040be:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c2:	4798      	blx	r3
 80040c4:	3601      	adds	r6, #1
 80040c6:	e7f2      	b.n	80040ae <__libc_init_array+0x1e>
 80040c8:	08004e14 	.word	0x08004e14
 80040cc:	08004e14 	.word	0x08004e14
 80040d0:	08004e14 	.word	0x08004e14
 80040d4:	08004e18 	.word	0x08004e18

080040d8 <__retarget_lock_init_recursive>:
 80040d8:	4770      	bx	lr

080040da <__retarget_lock_acquire_recursive>:
 80040da:	4770      	bx	lr

080040dc <__retarget_lock_release_recursive>:
 80040dc:	4770      	bx	lr

080040de <memcpy>:
 80040de:	440a      	add	r2, r1
 80040e0:	4291      	cmp	r1, r2
 80040e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80040e6:	d100      	bne.n	80040ea <memcpy+0xc>
 80040e8:	4770      	bx	lr
 80040ea:	b510      	push	{r4, lr}
 80040ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040f4:	4291      	cmp	r1, r2
 80040f6:	d1f9      	bne.n	80040ec <memcpy+0xe>
 80040f8:	bd10      	pop	{r4, pc}
	...

080040fc <_free_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4605      	mov	r5, r0
 8004100:	2900      	cmp	r1, #0
 8004102:	d041      	beq.n	8004188 <_free_r+0x8c>
 8004104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004108:	1f0c      	subs	r4, r1, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfb8      	it	lt
 800410e:	18e4      	addlt	r4, r4, r3
 8004110:	f7ff fd10 	bl	8003b34 <__malloc_lock>
 8004114:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <_free_r+0x90>)
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	b933      	cbnz	r3, 8004128 <_free_r+0x2c>
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	6014      	str	r4, [r2, #0]
 800411e:	4628      	mov	r0, r5
 8004120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004124:	f7ff bd0c 	b.w	8003b40 <__malloc_unlock>
 8004128:	42a3      	cmp	r3, r4
 800412a:	d908      	bls.n	800413e <_free_r+0x42>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	1821      	adds	r1, r4, r0
 8004130:	428b      	cmp	r3, r1
 8004132:	bf01      	itttt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	1809      	addeq	r1, r1, r0
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	e7ed      	b.n	800411a <_free_r+0x1e>
 800413e:	461a      	mov	r2, r3
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	b10b      	cbz	r3, 8004148 <_free_r+0x4c>
 8004144:	42a3      	cmp	r3, r4
 8004146:	d9fa      	bls.n	800413e <_free_r+0x42>
 8004148:	6811      	ldr	r1, [r2, #0]
 800414a:	1850      	adds	r0, r2, r1
 800414c:	42a0      	cmp	r0, r4
 800414e:	d10b      	bne.n	8004168 <_free_r+0x6c>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	4401      	add	r1, r0
 8004154:	1850      	adds	r0, r2, r1
 8004156:	4283      	cmp	r3, r0
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	d1e0      	bne.n	800411e <_free_r+0x22>
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	6053      	str	r3, [r2, #4]
 8004162:	4408      	add	r0, r1
 8004164:	6010      	str	r0, [r2, #0]
 8004166:	e7da      	b.n	800411e <_free_r+0x22>
 8004168:	d902      	bls.n	8004170 <_free_r+0x74>
 800416a:	230c      	movs	r3, #12
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	e7d6      	b.n	800411e <_free_r+0x22>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	1821      	adds	r1, r4, r0
 8004174:	428b      	cmp	r3, r1
 8004176:	bf04      	itt	eq
 8004178:	6819      	ldreq	r1, [r3, #0]
 800417a:	685b      	ldreq	r3, [r3, #4]
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	bf04      	itt	eq
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	6054      	str	r4, [r2, #4]
 8004186:	e7ca      	b.n	800411e <_free_r+0x22>
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	20000374 	.word	0x20000374

08004190 <__ssputs_r>:
 8004190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	688e      	ldr	r6, [r1, #8]
 8004196:	461f      	mov	r7, r3
 8004198:	42be      	cmp	r6, r7
 800419a:	680b      	ldr	r3, [r1, #0]
 800419c:	4682      	mov	sl, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	4690      	mov	r8, r2
 80041a2:	d82d      	bhi.n	8004200 <__ssputs_r+0x70>
 80041a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041ac:	d026      	beq.n	80041fc <__ssputs_r+0x6c>
 80041ae:	6965      	ldr	r5, [r4, #20]
 80041b0:	6909      	ldr	r1, [r1, #16]
 80041b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b6:	eba3 0901 	sub.w	r9, r3, r1
 80041ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041be:	1c7b      	adds	r3, r7, #1
 80041c0:	444b      	add	r3, r9
 80041c2:	106d      	asrs	r5, r5, #1
 80041c4:	429d      	cmp	r5, r3
 80041c6:	bf38      	it	cc
 80041c8:	461d      	movcc	r5, r3
 80041ca:	0553      	lsls	r3, r2, #21
 80041cc:	d527      	bpl.n	800421e <__ssputs_r+0x8e>
 80041ce:	4629      	mov	r1, r5
 80041d0:	f7ff fc30 	bl	8003a34 <_malloc_r>
 80041d4:	4606      	mov	r6, r0
 80041d6:	b360      	cbz	r0, 8004232 <__ssputs_r+0xa2>
 80041d8:	6921      	ldr	r1, [r4, #16]
 80041da:	464a      	mov	r2, r9
 80041dc:	f7ff ff7f 	bl	80040de <memcpy>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	6126      	str	r6, [r4, #16]
 80041ee:	6165      	str	r5, [r4, #20]
 80041f0:	444e      	add	r6, r9
 80041f2:	eba5 0509 	sub.w	r5, r5, r9
 80041f6:	6026      	str	r6, [r4, #0]
 80041f8:	60a5      	str	r5, [r4, #8]
 80041fa:	463e      	mov	r6, r7
 80041fc:	42be      	cmp	r6, r7
 80041fe:	d900      	bls.n	8004202 <__ssputs_r+0x72>
 8004200:	463e      	mov	r6, r7
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	4632      	mov	r2, r6
 8004206:	4641      	mov	r1, r8
 8004208:	f000 fcf8 	bl	8004bfc <memmove>
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	1b9b      	subs	r3, r3, r6
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	4433      	add	r3, r6
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	2000      	movs	r0, #0
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	462a      	mov	r2, r5
 8004220:	f000 fd28 	bl	8004c74 <_realloc_r>
 8004224:	4606      	mov	r6, r0
 8004226:	2800      	cmp	r0, #0
 8004228:	d1e0      	bne.n	80041ec <__ssputs_r+0x5c>
 800422a:	6921      	ldr	r1, [r4, #16]
 800422c:	4650      	mov	r0, sl
 800422e:	f7ff ff65 	bl	80040fc <_free_r>
 8004232:	230c      	movs	r3, #12
 8004234:	f8ca 3000 	str.w	r3, [sl]
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	e7e9      	b.n	800421a <__ssputs_r+0x8a>
	...

08004248 <_svfiprintf_r>:
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	4698      	mov	r8, r3
 800424e:	898b      	ldrh	r3, [r1, #12]
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	b09d      	sub	sp, #116	@ 0x74
 8004254:	4607      	mov	r7, r0
 8004256:	460d      	mov	r5, r1
 8004258:	4614      	mov	r4, r2
 800425a:	d510      	bpl.n	800427e <_svfiprintf_r+0x36>
 800425c:	690b      	ldr	r3, [r1, #16]
 800425e:	b973      	cbnz	r3, 800427e <_svfiprintf_r+0x36>
 8004260:	2140      	movs	r1, #64	@ 0x40
 8004262:	f7ff fbe7 	bl	8003a34 <_malloc_r>
 8004266:	6028      	str	r0, [r5, #0]
 8004268:	6128      	str	r0, [r5, #16]
 800426a:	b930      	cbnz	r0, 800427a <_svfiprintf_r+0x32>
 800426c:	230c      	movs	r3, #12
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	b01d      	add	sp, #116	@ 0x74
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427a:	2340      	movs	r3, #64	@ 0x40
 800427c:	616b      	str	r3, [r5, #20]
 800427e:	2300      	movs	r3, #0
 8004280:	9309      	str	r3, [sp, #36]	@ 0x24
 8004282:	2320      	movs	r3, #32
 8004284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004288:	f8cd 800c 	str.w	r8, [sp, #12]
 800428c:	2330      	movs	r3, #48	@ 0x30
 800428e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800442c <_svfiprintf_r+0x1e4>
 8004292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004296:	f04f 0901 	mov.w	r9, #1
 800429a:	4623      	mov	r3, r4
 800429c:	469a      	mov	sl, r3
 800429e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a2:	b10a      	cbz	r2, 80042a8 <_svfiprintf_r+0x60>
 80042a4:	2a25      	cmp	r2, #37	@ 0x25
 80042a6:	d1f9      	bne.n	800429c <_svfiprintf_r+0x54>
 80042a8:	ebba 0b04 	subs.w	fp, sl, r4
 80042ac:	d00b      	beq.n	80042c6 <_svfiprintf_r+0x7e>
 80042ae:	465b      	mov	r3, fp
 80042b0:	4622      	mov	r2, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	4638      	mov	r0, r7
 80042b6:	f7ff ff6b 	bl	8004190 <__ssputs_r>
 80042ba:	3001      	adds	r0, #1
 80042bc:	f000 80a7 	beq.w	800440e <_svfiprintf_r+0x1c6>
 80042c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042c2:	445a      	add	r2, fp
 80042c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80042c6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 809f 	beq.w	800440e <_svfiprintf_r+0x1c6>
 80042d0:	2300      	movs	r3, #0
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042da:	f10a 0a01 	add.w	sl, sl, #1
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80042e8:	4654      	mov	r4, sl
 80042ea:	2205      	movs	r2, #5
 80042ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f0:	484e      	ldr	r0, [pc, #312]	@ (800442c <_svfiprintf_r+0x1e4>)
 80042f2:	f7fb ff75 	bl	80001e0 <memchr>
 80042f6:	9a04      	ldr	r2, [sp, #16]
 80042f8:	b9d8      	cbnz	r0, 8004332 <_svfiprintf_r+0xea>
 80042fa:	06d0      	lsls	r0, r2, #27
 80042fc:	bf44      	itt	mi
 80042fe:	2320      	movmi	r3, #32
 8004300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004304:	0711      	lsls	r1, r2, #28
 8004306:	bf44      	itt	mi
 8004308:	232b      	movmi	r3, #43	@ 0x2b
 800430a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800430e:	f89a 3000 	ldrb.w	r3, [sl]
 8004312:	2b2a      	cmp	r3, #42	@ 0x2a
 8004314:	d015      	beq.n	8004342 <_svfiprintf_r+0xfa>
 8004316:	9a07      	ldr	r2, [sp, #28]
 8004318:	4654      	mov	r4, sl
 800431a:	2000      	movs	r0, #0
 800431c:	f04f 0c0a 	mov.w	ip, #10
 8004320:	4621      	mov	r1, r4
 8004322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004326:	3b30      	subs	r3, #48	@ 0x30
 8004328:	2b09      	cmp	r3, #9
 800432a:	d94b      	bls.n	80043c4 <_svfiprintf_r+0x17c>
 800432c:	b1b0      	cbz	r0, 800435c <_svfiprintf_r+0x114>
 800432e:	9207      	str	r2, [sp, #28]
 8004330:	e014      	b.n	800435c <_svfiprintf_r+0x114>
 8004332:	eba0 0308 	sub.w	r3, r0, r8
 8004336:	fa09 f303 	lsl.w	r3, r9, r3
 800433a:	4313      	orrs	r3, r2
 800433c:	9304      	str	r3, [sp, #16]
 800433e:	46a2      	mov	sl, r4
 8004340:	e7d2      	b.n	80042e8 <_svfiprintf_r+0xa0>
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	1d19      	adds	r1, r3, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	9103      	str	r1, [sp, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfbb      	ittet	lt
 800434e:	425b      	neglt	r3, r3
 8004350:	f042 0202 	orrlt.w	r2, r2, #2
 8004354:	9307      	strge	r3, [sp, #28]
 8004356:	9307      	strlt	r3, [sp, #28]
 8004358:	bfb8      	it	lt
 800435a:	9204      	strlt	r2, [sp, #16]
 800435c:	7823      	ldrb	r3, [r4, #0]
 800435e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004360:	d10a      	bne.n	8004378 <_svfiprintf_r+0x130>
 8004362:	7863      	ldrb	r3, [r4, #1]
 8004364:	2b2a      	cmp	r3, #42	@ 0x2a
 8004366:	d132      	bne.n	80043ce <_svfiprintf_r+0x186>
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	9203      	str	r2, [sp, #12]
 8004370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004374:	3402      	adds	r4, #2
 8004376:	9305      	str	r3, [sp, #20]
 8004378:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800443c <_svfiprintf_r+0x1f4>
 800437c:	7821      	ldrb	r1, [r4, #0]
 800437e:	2203      	movs	r2, #3
 8004380:	4650      	mov	r0, sl
 8004382:	f7fb ff2d 	bl	80001e0 <memchr>
 8004386:	b138      	cbz	r0, 8004398 <_svfiprintf_r+0x150>
 8004388:	9b04      	ldr	r3, [sp, #16]
 800438a:	eba0 000a 	sub.w	r0, r0, sl
 800438e:	2240      	movs	r2, #64	@ 0x40
 8004390:	4082      	lsls	r2, r0
 8004392:	4313      	orrs	r3, r2
 8004394:	3401      	adds	r4, #1
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	4824      	ldr	r0, [pc, #144]	@ (8004430 <_svfiprintf_r+0x1e8>)
 800439e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043a2:	2206      	movs	r2, #6
 80043a4:	f7fb ff1c 	bl	80001e0 <memchr>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d036      	beq.n	800441a <_svfiprintf_r+0x1d2>
 80043ac:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <_svfiprintf_r+0x1ec>)
 80043ae:	bb1b      	cbnz	r3, 80043f8 <_svfiprintf_r+0x1b0>
 80043b0:	9b03      	ldr	r3, [sp, #12]
 80043b2:	3307      	adds	r3, #7
 80043b4:	f023 0307 	bic.w	r3, r3, #7
 80043b8:	3308      	adds	r3, #8
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043be:	4433      	add	r3, r6
 80043c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043c2:	e76a      	b.n	800429a <_svfiprintf_r+0x52>
 80043c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c8:	460c      	mov	r4, r1
 80043ca:	2001      	movs	r0, #1
 80043cc:	e7a8      	b.n	8004320 <_svfiprintf_r+0xd8>
 80043ce:	2300      	movs	r3, #0
 80043d0:	3401      	adds	r4, #1
 80043d2:	9305      	str	r3, [sp, #20]
 80043d4:	4619      	mov	r1, r3
 80043d6:	f04f 0c0a 	mov.w	ip, #10
 80043da:	4620      	mov	r0, r4
 80043dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043e0:	3a30      	subs	r2, #48	@ 0x30
 80043e2:	2a09      	cmp	r2, #9
 80043e4:	d903      	bls.n	80043ee <_svfiprintf_r+0x1a6>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0c6      	beq.n	8004378 <_svfiprintf_r+0x130>
 80043ea:	9105      	str	r1, [sp, #20]
 80043ec:	e7c4      	b.n	8004378 <_svfiprintf_r+0x130>
 80043ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80043f2:	4604      	mov	r4, r0
 80043f4:	2301      	movs	r3, #1
 80043f6:	e7f0      	b.n	80043da <_svfiprintf_r+0x192>
 80043f8:	ab03      	add	r3, sp, #12
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	462a      	mov	r2, r5
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <_svfiprintf_r+0x1f0>)
 8004400:	a904      	add	r1, sp, #16
 8004402:	4638      	mov	r0, r7
 8004404:	f3af 8000 	nop.w
 8004408:	1c42      	adds	r2, r0, #1
 800440a:	4606      	mov	r6, r0
 800440c:	d1d6      	bne.n	80043bc <_svfiprintf_r+0x174>
 800440e:	89ab      	ldrh	r3, [r5, #12]
 8004410:	065b      	lsls	r3, r3, #25
 8004412:	f53f af2d 	bmi.w	8004270 <_svfiprintf_r+0x28>
 8004416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004418:	e72c      	b.n	8004274 <_svfiprintf_r+0x2c>
 800441a:	ab03      	add	r3, sp, #12
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	462a      	mov	r2, r5
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <_svfiprintf_r+0x1f0>)
 8004422:	a904      	add	r1, sp, #16
 8004424:	4638      	mov	r0, r7
 8004426:	f000 f9bb 	bl	80047a0 <_printf_i>
 800442a:	e7ed      	b.n	8004408 <_svfiprintf_r+0x1c0>
 800442c:	08004dd8 	.word	0x08004dd8
 8004430:	08004de2 	.word	0x08004de2
 8004434:	00000000 	.word	0x00000000
 8004438:	08004191 	.word	0x08004191
 800443c:	08004dde 	.word	0x08004dde

08004440 <__sfputc_r>:
 8004440:	6893      	ldr	r3, [r2, #8]
 8004442:	3b01      	subs	r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	b410      	push	{r4}
 8004448:	6093      	str	r3, [r2, #8]
 800444a:	da08      	bge.n	800445e <__sfputc_r+0x1e>
 800444c:	6994      	ldr	r4, [r2, #24]
 800444e:	42a3      	cmp	r3, r4
 8004450:	db01      	blt.n	8004456 <__sfputc_r+0x16>
 8004452:	290a      	cmp	r1, #10
 8004454:	d103      	bne.n	800445e <__sfputc_r+0x1e>
 8004456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445a:	f7ff bd20 	b.w	8003e9e <__swbuf_r>
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	1c58      	adds	r0, r3, #1
 8004462:	6010      	str	r0, [r2, #0]
 8004464:	7019      	strb	r1, [r3, #0]
 8004466:	4608      	mov	r0, r1
 8004468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800446c:	4770      	bx	lr

0800446e <__sfputs_r>:
 800446e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	4614      	mov	r4, r2
 8004476:	18d5      	adds	r5, r2, r3
 8004478:	42ac      	cmp	r4, r5
 800447a:	d101      	bne.n	8004480 <__sfputs_r+0x12>
 800447c:	2000      	movs	r0, #0
 800447e:	e007      	b.n	8004490 <__sfputs_r+0x22>
 8004480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004484:	463a      	mov	r2, r7
 8004486:	4630      	mov	r0, r6
 8004488:	f7ff ffda 	bl	8004440 <__sfputc_r>
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	d1f3      	bne.n	8004478 <__sfputs_r+0xa>
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004494 <_vfiprintf_r>:
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	460d      	mov	r5, r1
 800449a:	b09d      	sub	sp, #116	@ 0x74
 800449c:	4614      	mov	r4, r2
 800449e:	4698      	mov	r8, r3
 80044a0:	4606      	mov	r6, r0
 80044a2:	b118      	cbz	r0, 80044ac <_vfiprintf_r+0x18>
 80044a4:	6a03      	ldr	r3, [r0, #32]
 80044a6:	b90b      	cbnz	r3, 80044ac <_vfiprintf_r+0x18>
 80044a8:	f7ff fbdc 	bl	8003c64 <__sinit>
 80044ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044ae:	07d9      	lsls	r1, r3, #31
 80044b0:	d405      	bmi.n	80044be <_vfiprintf_r+0x2a>
 80044b2:	89ab      	ldrh	r3, [r5, #12]
 80044b4:	059a      	lsls	r2, r3, #22
 80044b6:	d402      	bmi.n	80044be <_vfiprintf_r+0x2a>
 80044b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ba:	f7ff fe0e 	bl	80040da <__retarget_lock_acquire_recursive>
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	d501      	bpl.n	80044c8 <_vfiprintf_r+0x34>
 80044c4:	692b      	ldr	r3, [r5, #16]
 80044c6:	b99b      	cbnz	r3, 80044f0 <_vfiprintf_r+0x5c>
 80044c8:	4629      	mov	r1, r5
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff fd26 	bl	8003f1c <__swsetup_r>
 80044d0:	b170      	cbz	r0, 80044f0 <_vfiprintf_r+0x5c>
 80044d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044d4:	07dc      	lsls	r4, r3, #31
 80044d6:	d504      	bpl.n	80044e2 <_vfiprintf_r+0x4e>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	b01d      	add	sp, #116	@ 0x74
 80044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e2:	89ab      	ldrh	r3, [r5, #12]
 80044e4:	0598      	lsls	r0, r3, #22
 80044e6:	d4f7      	bmi.n	80044d8 <_vfiprintf_r+0x44>
 80044e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ea:	f7ff fdf7 	bl	80040dc <__retarget_lock_release_recursive>
 80044ee:	e7f3      	b.n	80044d8 <_vfiprintf_r+0x44>
 80044f0:	2300      	movs	r3, #0
 80044f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80044f4:	2320      	movs	r3, #32
 80044f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80044fe:	2330      	movs	r3, #48	@ 0x30
 8004500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046b0 <_vfiprintf_r+0x21c>
 8004504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004508:	f04f 0901 	mov.w	r9, #1
 800450c:	4623      	mov	r3, r4
 800450e:	469a      	mov	sl, r3
 8004510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004514:	b10a      	cbz	r2, 800451a <_vfiprintf_r+0x86>
 8004516:	2a25      	cmp	r2, #37	@ 0x25
 8004518:	d1f9      	bne.n	800450e <_vfiprintf_r+0x7a>
 800451a:	ebba 0b04 	subs.w	fp, sl, r4
 800451e:	d00b      	beq.n	8004538 <_vfiprintf_r+0xa4>
 8004520:	465b      	mov	r3, fp
 8004522:	4622      	mov	r2, r4
 8004524:	4629      	mov	r1, r5
 8004526:	4630      	mov	r0, r6
 8004528:	f7ff ffa1 	bl	800446e <__sfputs_r>
 800452c:	3001      	adds	r0, #1
 800452e:	f000 80a7 	beq.w	8004680 <_vfiprintf_r+0x1ec>
 8004532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004534:	445a      	add	r2, fp
 8004536:	9209      	str	r2, [sp, #36]	@ 0x24
 8004538:	f89a 3000 	ldrb.w	r3, [sl]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 809f 	beq.w	8004680 <_vfiprintf_r+0x1ec>
 8004542:	2300      	movs	r3, #0
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800454c:	f10a 0a01 	add.w	sl, sl, #1
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	9307      	str	r3, [sp, #28]
 8004554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004558:	931a      	str	r3, [sp, #104]	@ 0x68
 800455a:	4654      	mov	r4, sl
 800455c:	2205      	movs	r2, #5
 800455e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004562:	4853      	ldr	r0, [pc, #332]	@ (80046b0 <_vfiprintf_r+0x21c>)
 8004564:	f7fb fe3c 	bl	80001e0 <memchr>
 8004568:	9a04      	ldr	r2, [sp, #16]
 800456a:	b9d8      	cbnz	r0, 80045a4 <_vfiprintf_r+0x110>
 800456c:	06d1      	lsls	r1, r2, #27
 800456e:	bf44      	itt	mi
 8004570:	2320      	movmi	r3, #32
 8004572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004576:	0713      	lsls	r3, r2, #28
 8004578:	bf44      	itt	mi
 800457a:	232b      	movmi	r3, #43	@ 0x2b
 800457c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004580:	f89a 3000 	ldrb.w	r3, [sl]
 8004584:	2b2a      	cmp	r3, #42	@ 0x2a
 8004586:	d015      	beq.n	80045b4 <_vfiprintf_r+0x120>
 8004588:	9a07      	ldr	r2, [sp, #28]
 800458a:	4654      	mov	r4, sl
 800458c:	2000      	movs	r0, #0
 800458e:	f04f 0c0a 	mov.w	ip, #10
 8004592:	4621      	mov	r1, r4
 8004594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004598:	3b30      	subs	r3, #48	@ 0x30
 800459a:	2b09      	cmp	r3, #9
 800459c:	d94b      	bls.n	8004636 <_vfiprintf_r+0x1a2>
 800459e:	b1b0      	cbz	r0, 80045ce <_vfiprintf_r+0x13a>
 80045a0:	9207      	str	r2, [sp, #28]
 80045a2:	e014      	b.n	80045ce <_vfiprintf_r+0x13a>
 80045a4:	eba0 0308 	sub.w	r3, r0, r8
 80045a8:	fa09 f303 	lsl.w	r3, r9, r3
 80045ac:	4313      	orrs	r3, r2
 80045ae:	9304      	str	r3, [sp, #16]
 80045b0:	46a2      	mov	sl, r4
 80045b2:	e7d2      	b.n	800455a <_vfiprintf_r+0xc6>
 80045b4:	9b03      	ldr	r3, [sp, #12]
 80045b6:	1d19      	adds	r1, r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	9103      	str	r1, [sp, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bfbb      	ittet	lt
 80045c0:	425b      	neglt	r3, r3
 80045c2:	f042 0202 	orrlt.w	r2, r2, #2
 80045c6:	9307      	strge	r3, [sp, #28]
 80045c8:	9307      	strlt	r3, [sp, #28]
 80045ca:	bfb8      	it	lt
 80045cc:	9204      	strlt	r2, [sp, #16]
 80045ce:	7823      	ldrb	r3, [r4, #0]
 80045d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80045d2:	d10a      	bne.n	80045ea <_vfiprintf_r+0x156>
 80045d4:	7863      	ldrb	r3, [r4, #1]
 80045d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d8:	d132      	bne.n	8004640 <_vfiprintf_r+0x1ac>
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	1d1a      	adds	r2, r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	9203      	str	r2, [sp, #12]
 80045e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045e6:	3402      	adds	r4, #2
 80045e8:	9305      	str	r3, [sp, #20]
 80045ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046c0 <_vfiprintf_r+0x22c>
 80045ee:	7821      	ldrb	r1, [r4, #0]
 80045f0:	2203      	movs	r2, #3
 80045f2:	4650      	mov	r0, sl
 80045f4:	f7fb fdf4 	bl	80001e0 <memchr>
 80045f8:	b138      	cbz	r0, 800460a <_vfiprintf_r+0x176>
 80045fa:	9b04      	ldr	r3, [sp, #16]
 80045fc:	eba0 000a 	sub.w	r0, r0, sl
 8004600:	2240      	movs	r2, #64	@ 0x40
 8004602:	4082      	lsls	r2, r0
 8004604:	4313      	orrs	r3, r2
 8004606:	3401      	adds	r4, #1
 8004608:	9304      	str	r3, [sp, #16]
 800460a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460e:	4829      	ldr	r0, [pc, #164]	@ (80046b4 <_vfiprintf_r+0x220>)
 8004610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004614:	2206      	movs	r2, #6
 8004616:	f7fb fde3 	bl	80001e0 <memchr>
 800461a:	2800      	cmp	r0, #0
 800461c:	d03f      	beq.n	800469e <_vfiprintf_r+0x20a>
 800461e:	4b26      	ldr	r3, [pc, #152]	@ (80046b8 <_vfiprintf_r+0x224>)
 8004620:	bb1b      	cbnz	r3, 800466a <_vfiprintf_r+0x1d6>
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	3307      	adds	r3, #7
 8004626:	f023 0307 	bic.w	r3, r3, #7
 800462a:	3308      	adds	r3, #8
 800462c:	9303      	str	r3, [sp, #12]
 800462e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004630:	443b      	add	r3, r7
 8004632:	9309      	str	r3, [sp, #36]	@ 0x24
 8004634:	e76a      	b.n	800450c <_vfiprintf_r+0x78>
 8004636:	fb0c 3202 	mla	r2, ip, r2, r3
 800463a:	460c      	mov	r4, r1
 800463c:	2001      	movs	r0, #1
 800463e:	e7a8      	b.n	8004592 <_vfiprintf_r+0xfe>
 8004640:	2300      	movs	r3, #0
 8004642:	3401      	adds	r4, #1
 8004644:	9305      	str	r3, [sp, #20]
 8004646:	4619      	mov	r1, r3
 8004648:	f04f 0c0a 	mov.w	ip, #10
 800464c:	4620      	mov	r0, r4
 800464e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004652:	3a30      	subs	r2, #48	@ 0x30
 8004654:	2a09      	cmp	r2, #9
 8004656:	d903      	bls.n	8004660 <_vfiprintf_r+0x1cc>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0c6      	beq.n	80045ea <_vfiprintf_r+0x156>
 800465c:	9105      	str	r1, [sp, #20]
 800465e:	e7c4      	b.n	80045ea <_vfiprintf_r+0x156>
 8004660:	fb0c 2101 	mla	r1, ip, r1, r2
 8004664:	4604      	mov	r4, r0
 8004666:	2301      	movs	r3, #1
 8004668:	e7f0      	b.n	800464c <_vfiprintf_r+0x1b8>
 800466a:	ab03      	add	r3, sp, #12
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	462a      	mov	r2, r5
 8004670:	4b12      	ldr	r3, [pc, #72]	@ (80046bc <_vfiprintf_r+0x228>)
 8004672:	a904      	add	r1, sp, #16
 8004674:	4630      	mov	r0, r6
 8004676:	f3af 8000 	nop.w
 800467a:	4607      	mov	r7, r0
 800467c:	1c78      	adds	r0, r7, #1
 800467e:	d1d6      	bne.n	800462e <_vfiprintf_r+0x19a>
 8004680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004682:	07d9      	lsls	r1, r3, #31
 8004684:	d405      	bmi.n	8004692 <_vfiprintf_r+0x1fe>
 8004686:	89ab      	ldrh	r3, [r5, #12]
 8004688:	059a      	lsls	r2, r3, #22
 800468a:	d402      	bmi.n	8004692 <_vfiprintf_r+0x1fe>
 800468c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800468e:	f7ff fd25 	bl	80040dc <__retarget_lock_release_recursive>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	065b      	lsls	r3, r3, #25
 8004696:	f53f af1f 	bmi.w	80044d8 <_vfiprintf_r+0x44>
 800469a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800469c:	e71e      	b.n	80044dc <_vfiprintf_r+0x48>
 800469e:	ab03      	add	r3, sp, #12
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	462a      	mov	r2, r5
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <_vfiprintf_r+0x228>)
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	4630      	mov	r0, r6
 80046aa:	f000 f879 	bl	80047a0 <_printf_i>
 80046ae:	e7e4      	b.n	800467a <_vfiprintf_r+0x1e6>
 80046b0:	08004dd8 	.word	0x08004dd8
 80046b4:	08004de2 	.word	0x08004de2
 80046b8:	00000000 	.word	0x00000000
 80046bc:	0800446f 	.word	0x0800446f
 80046c0:	08004dde 	.word	0x08004dde

080046c4 <_printf_common>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	4616      	mov	r6, r2
 80046ca:	4698      	mov	r8, r3
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bfb8      	it	lt
 80046d8:	4613      	movlt	r3, r2
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046e0:	4607      	mov	r7, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b10a      	cbz	r2, 80046ea <_printf_common+0x26>
 80046e6:	3301      	adds	r3, #1
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	0699      	lsls	r1, r3, #26
 80046ee:	bf42      	ittt	mi
 80046f0:	6833      	ldrmi	r3, [r6, #0]
 80046f2:	3302      	addmi	r3, #2
 80046f4:	6033      	strmi	r3, [r6, #0]
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	f015 0506 	ands.w	r5, r5, #6
 80046fc:	d106      	bne.n	800470c <_printf_common+0x48>
 80046fe:	f104 0a19 	add.w	sl, r4, #25
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	6832      	ldr	r2, [r6, #0]
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	42ab      	cmp	r3, r5
 800470a:	dc26      	bgt.n	800475a <_printf_common+0x96>
 800470c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	3b00      	subs	r3, #0
 8004714:	bf18      	it	ne
 8004716:	2301      	movne	r3, #1
 8004718:	0692      	lsls	r2, r2, #26
 800471a:	d42b      	bmi.n	8004774 <_printf_common+0xb0>
 800471c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004720:	4641      	mov	r1, r8
 8004722:	4638      	mov	r0, r7
 8004724:	47c8      	blx	r9
 8004726:	3001      	adds	r0, #1
 8004728:	d01e      	beq.n	8004768 <_printf_common+0xa4>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf02      	ittt	eq
 8004736:	68e5      	ldreq	r5, [r4, #12]
 8004738:	6833      	ldreq	r3, [r6, #0]
 800473a:	1aed      	subeq	r5, r5, r3
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	bf0c      	ite	eq
 8004740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004744:	2500      	movne	r5, #0
 8004746:	4293      	cmp	r3, r2
 8004748:	bfc4      	itt	gt
 800474a:	1a9b      	subgt	r3, r3, r2
 800474c:	18ed      	addgt	r5, r5, r3
 800474e:	2600      	movs	r6, #0
 8004750:	341a      	adds	r4, #26
 8004752:	42b5      	cmp	r5, r6
 8004754:	d11a      	bne.n	800478c <_printf_common+0xc8>
 8004756:	2000      	movs	r0, #0
 8004758:	e008      	b.n	800476c <_printf_common+0xa8>
 800475a:	2301      	movs	r3, #1
 800475c:	4652      	mov	r2, sl
 800475e:	4641      	mov	r1, r8
 8004760:	4638      	mov	r0, r7
 8004762:	47c8      	blx	r9
 8004764:	3001      	adds	r0, #1
 8004766:	d103      	bne.n	8004770 <_printf_common+0xac>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	3501      	adds	r5, #1
 8004772:	e7c6      	b.n	8004702 <_printf_common+0x3e>
 8004774:	18e1      	adds	r1, r4, r3
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	2030      	movs	r0, #48	@ 0x30
 800477a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800477e:	4422      	add	r2, r4
 8004780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004788:	3302      	adds	r3, #2
 800478a:	e7c7      	b.n	800471c <_printf_common+0x58>
 800478c:	2301      	movs	r3, #1
 800478e:	4622      	mov	r2, r4
 8004790:	4641      	mov	r1, r8
 8004792:	4638      	mov	r0, r7
 8004794:	47c8      	blx	r9
 8004796:	3001      	adds	r0, #1
 8004798:	d0e6      	beq.n	8004768 <_printf_common+0xa4>
 800479a:	3601      	adds	r6, #1
 800479c:	e7d9      	b.n	8004752 <_printf_common+0x8e>
	...

080047a0 <_printf_i>:
 80047a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	7e0f      	ldrb	r7, [r1, #24]
 80047a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a8:	2f78      	cmp	r7, #120	@ 0x78
 80047aa:	4691      	mov	r9, r2
 80047ac:	4680      	mov	r8, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	469a      	mov	sl, r3
 80047b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047b6:	d807      	bhi.n	80047c8 <_printf_i+0x28>
 80047b8:	2f62      	cmp	r7, #98	@ 0x62
 80047ba:	d80a      	bhi.n	80047d2 <_printf_i+0x32>
 80047bc:	2f00      	cmp	r7, #0
 80047be:	f000 80d2 	beq.w	8004966 <_printf_i+0x1c6>
 80047c2:	2f58      	cmp	r7, #88	@ 0x58
 80047c4:	f000 80b9 	beq.w	800493a <_printf_i+0x19a>
 80047c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047d0:	e03a      	b.n	8004848 <_printf_i+0xa8>
 80047d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047d6:	2b15      	cmp	r3, #21
 80047d8:	d8f6      	bhi.n	80047c8 <_printf_i+0x28>
 80047da:	a101      	add	r1, pc, #4	@ (adr r1, 80047e0 <_printf_i+0x40>)
 80047dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e0:	08004839 	.word	0x08004839
 80047e4:	0800484d 	.word	0x0800484d
 80047e8:	080047c9 	.word	0x080047c9
 80047ec:	080047c9 	.word	0x080047c9
 80047f0:	080047c9 	.word	0x080047c9
 80047f4:	080047c9 	.word	0x080047c9
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	080047c9 	.word	0x080047c9
 8004800:	080047c9 	.word	0x080047c9
 8004804:	080047c9 	.word	0x080047c9
 8004808:	080047c9 	.word	0x080047c9
 800480c:	0800494d 	.word	0x0800494d
 8004810:	08004877 	.word	0x08004877
 8004814:	08004907 	.word	0x08004907
 8004818:	080047c9 	.word	0x080047c9
 800481c:	080047c9 	.word	0x080047c9
 8004820:	0800496f 	.word	0x0800496f
 8004824:	080047c9 	.word	0x080047c9
 8004828:	08004877 	.word	0x08004877
 800482c:	080047c9 	.word	0x080047c9
 8004830:	080047c9 	.word	0x080047c9
 8004834:	0800490f 	.word	0x0800490f
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6032      	str	r2, [r6, #0]
 8004840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004848:	2301      	movs	r3, #1
 800484a:	e09d      	b.n	8004988 <_printf_i+0x1e8>
 800484c:	6833      	ldr	r3, [r6, #0]
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	6031      	str	r1, [r6, #0]
 8004854:	0606      	lsls	r6, r0, #24
 8004856:	d501      	bpl.n	800485c <_printf_i+0xbc>
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	e003      	b.n	8004864 <_printf_i+0xc4>
 800485c:	0645      	lsls	r5, r0, #25
 800485e:	d5fb      	bpl.n	8004858 <_printf_i+0xb8>
 8004860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004864:	2d00      	cmp	r5, #0
 8004866:	da03      	bge.n	8004870 <_printf_i+0xd0>
 8004868:	232d      	movs	r3, #45	@ 0x2d
 800486a:	426d      	negs	r5, r5
 800486c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004870:	4859      	ldr	r0, [pc, #356]	@ (80049d8 <_printf_i+0x238>)
 8004872:	230a      	movs	r3, #10
 8004874:	e011      	b.n	800489a <_printf_i+0xfa>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	0608      	lsls	r0, r1, #24
 800487c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004880:	d402      	bmi.n	8004888 <_printf_i+0xe8>
 8004882:	0649      	lsls	r1, r1, #25
 8004884:	bf48      	it	mi
 8004886:	b2ad      	uxthmi	r5, r5
 8004888:	2f6f      	cmp	r7, #111	@ 0x6f
 800488a:	4853      	ldr	r0, [pc, #332]	@ (80049d8 <_printf_i+0x238>)
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	bf14      	ite	ne
 8004890:	230a      	movne	r3, #10
 8004892:	2308      	moveq	r3, #8
 8004894:	2100      	movs	r1, #0
 8004896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800489a:	6866      	ldr	r6, [r4, #4]
 800489c:	60a6      	str	r6, [r4, #8]
 800489e:	2e00      	cmp	r6, #0
 80048a0:	bfa2      	ittt	ge
 80048a2:	6821      	ldrge	r1, [r4, #0]
 80048a4:	f021 0104 	bicge.w	r1, r1, #4
 80048a8:	6021      	strge	r1, [r4, #0]
 80048aa:	b90d      	cbnz	r5, 80048b0 <_printf_i+0x110>
 80048ac:	2e00      	cmp	r6, #0
 80048ae:	d04b      	beq.n	8004948 <_printf_i+0x1a8>
 80048b0:	4616      	mov	r6, r2
 80048b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b6:	fb03 5711 	mls	r7, r3, r1, r5
 80048ba:	5dc7      	ldrb	r7, [r0, r7]
 80048bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048c0:	462f      	mov	r7, r5
 80048c2:	42bb      	cmp	r3, r7
 80048c4:	460d      	mov	r5, r1
 80048c6:	d9f4      	bls.n	80048b2 <_printf_i+0x112>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10b      	bne.n	80048e4 <_printf_i+0x144>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	07df      	lsls	r7, r3, #31
 80048d0:	d508      	bpl.n	80048e4 <_printf_i+0x144>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	6861      	ldr	r1, [r4, #4]
 80048d6:	4299      	cmp	r1, r3
 80048d8:	bfde      	ittt	le
 80048da:	2330      	movle	r3, #48	@ 0x30
 80048dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048e4:	1b92      	subs	r2, r2, r6
 80048e6:	6122      	str	r2, [r4, #16]
 80048e8:	f8cd a000 	str.w	sl, [sp]
 80048ec:	464b      	mov	r3, r9
 80048ee:	aa03      	add	r2, sp, #12
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fee6 	bl	80046c4 <_printf_common>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d14a      	bne.n	8004992 <_printf_i+0x1f2>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	b004      	add	sp, #16
 8004902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	4833      	ldr	r0, [pc, #204]	@ (80049dc <_printf_i+0x23c>)
 8004910:	2778      	movs	r7, #120	@ 0x78
 8004912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	6831      	ldr	r1, [r6, #0]
 800491a:	061f      	lsls	r7, r3, #24
 800491c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004920:	d402      	bmi.n	8004928 <_printf_i+0x188>
 8004922:	065f      	lsls	r7, r3, #25
 8004924:	bf48      	it	mi
 8004926:	b2ad      	uxthmi	r5, r5
 8004928:	6031      	str	r1, [r6, #0]
 800492a:	07d9      	lsls	r1, r3, #31
 800492c:	bf44      	itt	mi
 800492e:	f043 0320 	orrmi.w	r3, r3, #32
 8004932:	6023      	strmi	r3, [r4, #0]
 8004934:	b11d      	cbz	r5, 800493e <_printf_i+0x19e>
 8004936:	2310      	movs	r3, #16
 8004938:	e7ac      	b.n	8004894 <_printf_i+0xf4>
 800493a:	4827      	ldr	r0, [pc, #156]	@ (80049d8 <_printf_i+0x238>)
 800493c:	e7e9      	b.n	8004912 <_printf_i+0x172>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	f023 0320 	bic.w	r3, r3, #32
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	e7f6      	b.n	8004936 <_printf_i+0x196>
 8004948:	4616      	mov	r6, r2
 800494a:	e7bd      	b.n	80048c8 <_printf_i+0x128>
 800494c:	6833      	ldr	r3, [r6, #0]
 800494e:	6825      	ldr	r5, [r4, #0]
 8004950:	6961      	ldr	r1, [r4, #20]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6030      	str	r0, [r6, #0]
 8004956:	062e      	lsls	r6, r5, #24
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	d501      	bpl.n	8004960 <_printf_i+0x1c0>
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	e002      	b.n	8004966 <_printf_i+0x1c6>
 8004960:	0668      	lsls	r0, r5, #25
 8004962:	d5fb      	bpl.n	800495c <_printf_i+0x1bc>
 8004964:	8019      	strh	r1, [r3, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	4616      	mov	r6, r2
 800496c:	e7bc      	b.n	80048e8 <_printf_i+0x148>
 800496e:	6833      	ldr	r3, [r6, #0]
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	6032      	str	r2, [r6, #0]
 8004974:	681e      	ldr	r6, [r3, #0]
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	2100      	movs	r1, #0
 800497a:	4630      	mov	r0, r6
 800497c:	f7fb fc30 	bl	80001e0 <memchr>
 8004980:	b108      	cbz	r0, 8004986 <_printf_i+0x1e6>
 8004982:	1b80      	subs	r0, r0, r6
 8004984:	6060      	str	r0, [r4, #4]
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	2300      	movs	r3, #0
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004990:	e7aa      	b.n	80048e8 <_printf_i+0x148>
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	4632      	mov	r2, r6
 8004996:	4649      	mov	r1, r9
 8004998:	4640      	mov	r0, r8
 800499a:	47d0      	blx	sl
 800499c:	3001      	adds	r0, #1
 800499e:	d0ad      	beq.n	80048fc <_printf_i+0x15c>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	079b      	lsls	r3, r3, #30
 80049a4:	d413      	bmi.n	80049ce <_printf_i+0x22e>
 80049a6:	68e0      	ldr	r0, [r4, #12]
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	4298      	cmp	r0, r3
 80049ac:	bfb8      	it	lt
 80049ae:	4618      	movlt	r0, r3
 80049b0:	e7a6      	b.n	8004900 <_printf_i+0x160>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4632      	mov	r2, r6
 80049b6:	4649      	mov	r1, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	47d0      	blx	sl
 80049bc:	3001      	adds	r0, #1
 80049be:	d09d      	beq.n	80048fc <_printf_i+0x15c>
 80049c0:	3501      	adds	r5, #1
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	9903      	ldr	r1, [sp, #12]
 80049c6:	1a5b      	subs	r3, r3, r1
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dcf2      	bgt.n	80049b2 <_printf_i+0x212>
 80049cc:	e7eb      	b.n	80049a6 <_printf_i+0x206>
 80049ce:	2500      	movs	r5, #0
 80049d0:	f104 0619 	add.w	r6, r4, #25
 80049d4:	e7f5      	b.n	80049c2 <_printf_i+0x222>
 80049d6:	bf00      	nop
 80049d8:	08004de9 	.word	0x08004de9
 80049dc:	08004dfa 	.word	0x08004dfa

080049e0 <__sflush_r>:
 80049e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e8:	0716      	lsls	r6, r2, #28
 80049ea:	4605      	mov	r5, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	d454      	bmi.n	8004a9a <__sflush_r+0xba>
 80049f0:	684b      	ldr	r3, [r1, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dc02      	bgt.n	80049fc <__sflush_r+0x1c>
 80049f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dd48      	ble.n	8004a8e <__sflush_r+0xae>
 80049fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	d045      	beq.n	8004a8e <__sflush_r+0xae>
 8004a02:	2300      	movs	r3, #0
 8004a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a08:	682f      	ldr	r7, [r5, #0]
 8004a0a:	6a21      	ldr	r1, [r4, #32]
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	d030      	beq.n	8004a72 <__sflush_r+0x92>
 8004a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	0759      	lsls	r1, r3, #29
 8004a16:	d505      	bpl.n	8004a24 <__sflush_r+0x44>
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a1e:	b10b      	cbz	r3, 8004a24 <__sflush_r+0x44>
 8004a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a28:	6a21      	ldr	r1, [r4, #32]
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b0      	blx	r6
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	d106      	bne.n	8004a42 <__sflush_r+0x62>
 8004a34:	6829      	ldr	r1, [r5, #0]
 8004a36:	291d      	cmp	r1, #29
 8004a38:	d82b      	bhi.n	8004a92 <__sflush_r+0xb2>
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae4 <__sflush_r+0x104>)
 8004a3c:	410a      	asrs	r2, r1
 8004a3e:	07d6      	lsls	r6, r2, #31
 8004a40:	d427      	bmi.n	8004a92 <__sflush_r+0xb2>
 8004a42:	2200      	movs	r2, #0
 8004a44:	6062      	str	r2, [r4, #4]
 8004a46:	04d9      	lsls	r1, r3, #19
 8004a48:	6922      	ldr	r2, [r4, #16]
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	d504      	bpl.n	8004a58 <__sflush_r+0x78>
 8004a4e:	1c42      	adds	r2, r0, #1
 8004a50:	d101      	bne.n	8004a56 <__sflush_r+0x76>
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	b903      	cbnz	r3, 8004a58 <__sflush_r+0x78>
 8004a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a5a:	602f      	str	r7, [r5, #0]
 8004a5c:	b1b9      	cbz	r1, 8004a8e <__sflush_r+0xae>
 8004a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d002      	beq.n	8004a6c <__sflush_r+0x8c>
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff fb48 	bl	80040fc <_free_r>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a70:	e00d      	b.n	8004a8e <__sflush_r+0xae>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b0      	blx	r6
 8004a78:	4602      	mov	r2, r0
 8004a7a:	1c50      	adds	r0, r2, #1
 8004a7c:	d1c9      	bne.n	8004a12 <__sflush_r+0x32>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0c6      	beq.n	8004a12 <__sflush_r+0x32>
 8004a84:	2b1d      	cmp	r3, #29
 8004a86:	d001      	beq.n	8004a8c <__sflush_r+0xac>
 8004a88:	2b16      	cmp	r3, #22
 8004a8a:	d11e      	bne.n	8004aca <__sflush_r+0xea>
 8004a8c:	602f      	str	r7, [r5, #0]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e022      	b.n	8004ad8 <__sflush_r+0xf8>
 8004a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	e01b      	b.n	8004ad2 <__sflush_r+0xf2>
 8004a9a:	690f      	ldr	r7, [r1, #16]
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	d0f6      	beq.n	8004a8e <__sflush_r+0xae>
 8004aa0:	0793      	lsls	r3, r2, #30
 8004aa2:	680e      	ldr	r6, [r1, #0]
 8004aa4:	bf08      	it	eq
 8004aa6:	694b      	ldreq	r3, [r1, #20]
 8004aa8:	600f      	str	r7, [r1, #0]
 8004aaa:	bf18      	it	ne
 8004aac:	2300      	movne	r3, #0
 8004aae:	eba6 0807 	sub.w	r8, r6, r7
 8004ab2:	608b      	str	r3, [r1, #8]
 8004ab4:	f1b8 0f00 	cmp.w	r8, #0
 8004ab8:	dde9      	ble.n	8004a8e <__sflush_r+0xae>
 8004aba:	6a21      	ldr	r1, [r4, #32]
 8004abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004abe:	4643      	mov	r3, r8
 8004ac0:	463a      	mov	r2, r7
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b0      	blx	r6
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	dc08      	bgt.n	8004adc <__sflush_r+0xfc>
 8004aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004adc:	4407      	add	r7, r0
 8004ade:	eba8 0800 	sub.w	r8, r8, r0
 8004ae2:	e7e7      	b.n	8004ab4 <__sflush_r+0xd4>
 8004ae4:	dfbffffe 	.word	0xdfbffffe

08004ae8 <_fflush_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	690b      	ldr	r3, [r1, #16]
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	b913      	cbnz	r3, 8004af8 <_fflush_r+0x10>
 8004af2:	2500      	movs	r5, #0
 8004af4:	4628      	mov	r0, r5
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	b118      	cbz	r0, 8004b02 <_fflush_r+0x1a>
 8004afa:	6a03      	ldr	r3, [r0, #32]
 8004afc:	b90b      	cbnz	r3, 8004b02 <_fflush_r+0x1a>
 8004afe:	f7ff f8b1 	bl	8003c64 <__sinit>
 8004b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f3      	beq.n	8004af2 <_fflush_r+0xa>
 8004b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b0c:	07d0      	lsls	r0, r2, #31
 8004b0e:	d404      	bmi.n	8004b1a <_fflush_r+0x32>
 8004b10:	0599      	lsls	r1, r3, #22
 8004b12:	d402      	bmi.n	8004b1a <_fflush_r+0x32>
 8004b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b16:	f7ff fae0 	bl	80040da <__retarget_lock_acquire_recursive>
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f7ff ff5f 	bl	80049e0 <__sflush_r>
 8004b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b24:	07da      	lsls	r2, r3, #31
 8004b26:	4605      	mov	r5, r0
 8004b28:	d4e4      	bmi.n	8004af4 <_fflush_r+0xc>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	059b      	lsls	r3, r3, #22
 8004b2e:	d4e1      	bmi.n	8004af4 <_fflush_r+0xc>
 8004b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b32:	f7ff fad3 	bl	80040dc <__retarget_lock_release_recursive>
 8004b36:	e7dd      	b.n	8004af4 <_fflush_r+0xc>

08004b38 <__swhatbuf_r>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b40:	2900      	cmp	r1, #0
 8004b42:	b096      	sub	sp, #88	@ 0x58
 8004b44:	4615      	mov	r5, r2
 8004b46:	461e      	mov	r6, r3
 8004b48:	da0d      	bge.n	8004b66 <__swhatbuf_r+0x2e>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	bf14      	ite	ne
 8004b56:	2340      	movne	r3, #64	@ 0x40
 8004b58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	6031      	str	r1, [r6, #0]
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	b016      	add	sp, #88	@ 0x58
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	466a      	mov	r2, sp
 8004b68:	f000 f862 	bl	8004c30 <_fstat_r>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	dbec      	blt.n	8004b4a <__swhatbuf_r+0x12>
 8004b70:	9901      	ldr	r1, [sp, #4]
 8004b72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b7a:	4259      	negs	r1, r3
 8004b7c:	4159      	adcs	r1, r3
 8004b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b82:	e7eb      	b.n	8004b5c <__swhatbuf_r+0x24>

08004b84 <__smakebuf_r>:
 8004b84:	898b      	ldrh	r3, [r1, #12]
 8004b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b88:	079d      	lsls	r5, r3, #30
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	d507      	bpl.n	8004ba0 <__smakebuf_r+0x1c>
 8004b90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	6163      	str	r3, [r4, #20]
 8004b9c:	b003      	add	sp, #12
 8004b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba0:	ab01      	add	r3, sp, #4
 8004ba2:	466a      	mov	r2, sp
 8004ba4:	f7ff ffc8 	bl	8004b38 <__swhatbuf_r>
 8004ba8:	9f00      	ldr	r7, [sp, #0]
 8004baa:	4605      	mov	r5, r0
 8004bac:	4639      	mov	r1, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7fe ff40 	bl	8003a34 <_malloc_r>
 8004bb4:	b948      	cbnz	r0, 8004bca <__smakebuf_r+0x46>
 8004bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bba:	059a      	lsls	r2, r3, #22
 8004bbc:	d4ee      	bmi.n	8004b9c <__smakebuf_r+0x18>
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	e7e2      	b.n	8004b90 <__smakebuf_r+0xc>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	6020      	str	r0, [r4, #0]
 8004bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bda:	b15b      	cbz	r3, 8004bf4 <__smakebuf_r+0x70>
 8004bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f837 	bl	8004c54 <_isatty_r>
 8004be6:	b128      	cbz	r0, 8004bf4 <__smakebuf_r+0x70>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	431d      	orrs	r5, r3
 8004bf8:	81a5      	strh	r5, [r4, #12]
 8004bfa:	e7cf      	b.n	8004b9c <__smakebuf_r+0x18>

08004bfc <memmove>:
 8004bfc:	4288      	cmp	r0, r1
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	eb01 0402 	add.w	r4, r1, r2
 8004c04:	d902      	bls.n	8004c0c <memmove+0x10>
 8004c06:	4284      	cmp	r4, r0
 8004c08:	4623      	mov	r3, r4
 8004c0a:	d807      	bhi.n	8004c1c <memmove+0x20>
 8004c0c:	1e43      	subs	r3, r0, #1
 8004c0e:	42a1      	cmp	r1, r4
 8004c10:	d008      	beq.n	8004c24 <memmove+0x28>
 8004c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c1a:	e7f8      	b.n	8004c0e <memmove+0x12>
 8004c1c:	4402      	add	r2, r0
 8004c1e:	4601      	mov	r1, r0
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d100      	bne.n	8004c26 <memmove+0x2a>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c2e:	e7f7      	b.n	8004c20 <memmove+0x24>

08004c30 <_fstat_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	@ (8004c50 <_fstat_r+0x20>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	f7fc fe27 	bl	8001890 <_fstat>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d102      	bne.n	8004c4c <_fstat_r+0x1c>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b103      	cbz	r3, 8004c4c <_fstat_r+0x1c>
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	200004b4 	.word	0x200004b4

08004c54 <_isatty_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	@ (8004c70 <_isatty_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc fe26 	bl	80018b0 <_isatty>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_isatty_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_isatty_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200004b4 	.word	0x200004b4

08004c74 <_realloc_r>:
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4615      	mov	r5, r2
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	b921      	cbnz	r1, 8004c8a <_realloc_r+0x16>
 8004c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	4611      	mov	r1, r2
 8004c86:	f7fe bed5 	b.w	8003a34 <_malloc_r>
 8004c8a:	b92a      	cbnz	r2, 8004c98 <_realloc_r+0x24>
 8004c8c:	f7ff fa36 	bl	80040fc <_free_r>
 8004c90:	2400      	movs	r4, #0
 8004c92:	4620      	mov	r0, r4
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c98:	f000 f81a 	bl	8004cd0 <_malloc_usable_size_r>
 8004c9c:	4285      	cmp	r5, r0
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	d802      	bhi.n	8004ca8 <_realloc_r+0x34>
 8004ca2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ca6:	d8f4      	bhi.n	8004c92 <_realloc_r+0x1e>
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7fe fec2 	bl	8003a34 <_malloc_r>
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0ec      	beq.n	8004c90 <_realloc_r+0x1c>
 8004cb6:	42b5      	cmp	r5, r6
 8004cb8:	462a      	mov	r2, r5
 8004cba:	4621      	mov	r1, r4
 8004cbc:	bf28      	it	cs
 8004cbe:	4632      	movcs	r2, r6
 8004cc0:	f7ff fa0d 	bl	80040de <memcpy>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fa18 	bl	80040fc <_free_r>
 8004ccc:	463c      	mov	r4, r7
 8004cce:	e7e0      	b.n	8004c92 <_realloc_r+0x1e>

08004cd0 <_malloc_usable_size_r>:
 8004cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd4:	1f18      	subs	r0, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfbc      	itt	lt
 8004cda:	580b      	ldrlt	r3, [r1, r0]
 8004cdc:	18c0      	addlt	r0, r0, r3
 8004cde:	4770      	bx	lr

08004ce0 <_init>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr

08004cec <_fini>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr
