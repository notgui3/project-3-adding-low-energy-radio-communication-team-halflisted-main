
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004558  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  000061a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004798  08004798  000061a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800479c  0800479c  0000579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080047a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001a4  08004944  000061a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08004944  000064ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab72  00000000  00000000  000061d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7a  00000000  00000000  00010d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00012cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000726  00000000  00000000  00013660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002717c  00000000  00000000  00013d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2b9  00000000  00000000  0003af02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0dcf  00000000  00000000  000461bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  00136fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  00139a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046d0 	.word	0x080046d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	080046d0 	.word	0x080046d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fd5e 	bl	8003d48 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fe18 	bl	8001f0c <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fd39 	bl	8003d58 <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 faa1 	bl	8000838 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fd22 	bl	8003d58 <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa8a 	bl	8000838 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fcf6 	bl	8003d58 <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb24 	bl	80009c4 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fce2 	bl	8003d58 <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa4a 	bl	8000838 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fccb 	bl	8003d58 <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa33 	bl	8000838 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fcb4 	bl	8003d58 <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa1c 	bl	8000838 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fc9d 	bl	8003d58 <free>

	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f98b 	bl	8000738 <setConnectable>

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa52 	bl	80008d0 <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa82 	bl	8000940 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa7a 	bl	8000940 <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002d8 	.word	0x200002d8
 8000458:	200002dc 	.word	0x200002dc
 800045c:	20000000 	.word	0x20000000
 8000460:	200002d6 	.word	0x200002d6
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001c0 	.word	0x200001c0
 8000478:	200001c4 	.word	0x200001c4
 800047c:	200001c8 	.word	0x200001c8
 8000480:	2000010c 	.word	0x2000010c
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002cc 	.word	0x200002cc
 80004a0:	20000114 	.word	0x20000114
 80004a4:	200002d4 	.word	0x200002d4
 80004a8:	20000134 	.word	0x20000134
 80004ac:	200002d0 	.word	0x200002d0
 80004b0:	20000124 	.word	0x20000124

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f002 f81b 	bl	800250c <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fd15 	bl	8001f0c <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f002 f827 	bl	800253c <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f003 f89d 	bl	800363c <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f002 f817 	bl	800253c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fcfc 	bl	8001f0c <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f002 f80e 	bl	800253c <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f003 f884 	bl	800363c <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f003 f865 	bl	800363c <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 ffd8 	bl	800253c <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 ffcd 	bl	800253c <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080046e8 	.word	0x080046e8
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002e0 	.word	0x200002e0
 80005c4:	200002dc 	.word	0x200002dc

080005c8 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 ff81 	bl	800253c <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fff7 	bl	800363c <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fe72 	bl	8003352 <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 ff5b 	bl	800253c <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>

 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	080046f0 	.word	0x080046f0
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002e0 	.word	0x200002e0
 80006a8:	200002dc 	.word	0x200002dc

080006ac <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b6:	217f      	movs	r1, #127	@ 0x7f
 80006b8:	481a      	ldr	r0, [pc, #104]	@ (8000724 <catchBLE+0x78>)
 80006ba:	f7ff fefb 	bl	80004b4 <fetchBleEvent>
 80006be:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d12a      	bne.n	800071c <catchBLE+0x70>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c6:	2203      	movs	r2, #3
 80006c8:	4917      	ldr	r1, [pc, #92]	@ (8000728 <catchBLE+0x7c>)
 80006ca:	4816      	ldr	r0, [pc, #88]	@ (8000724 <catchBLE+0x78>)
 80006cc:	f7ff ff7c 	bl	80005c8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d0:	2205      	movs	r2, #5
 80006d2:	4916      	ldr	r1, [pc, #88]	@ (800072c <catchBLE+0x80>)
 80006d4:	4813      	ldr	r0, [pc, #76]	@ (8000724 <catchBLE+0x78>)
 80006d6:	f7ff ff77 	bl	80005c8 <checkEventResp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <catchBLE+0x78>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <catchBLE+0x84>)
 80006e8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <catchBLE+0x78>)
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <catchBLE+0x84>)
 80006f2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <catchBLE+0x88>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2205      	movs	r2, #5
 80006fa:	4619      	mov	r1, r3
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <catchBLE+0x78>)
 80006fe:	f7ff ff63 	bl	80005c8 <checkEventResp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d009      	beq.n	800071c <catchBLE+0x70>
			 *(connectionHandler) = buffer[5];
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <catchBLE+0x78>)
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <catchBLE+0x84>)
 8000710:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000712:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <catchBLE+0x78>)
 8000714:	799b      	ldrb	r3, [r3, #6]
 8000716:	b21a      	sxth	r2, r3
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <catchBLE+0x84>)
 800071a:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200001cc 	.word	0x200001cc
 8000728:	200000ec 	.word	0x200000ec
 800072c:	200000f8 	.word	0x200000f8
 8000730:	20000144 	.word	0x20000144
 8000734:	200000fd 	.word	0x200000fd

08000738 <setConnectable>:

 void setConnectable(){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800073e:	200c      	movs	r0, #12
 8000740:	f003 fb02 	bl	8003d48 <malloc>
 8000744:	4603      	mov	r3, r0
 8000746:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4a36      	ldr	r2, [pc, #216]	@ (8000824 <setConnectable+0xec>)
 800074c:	6810      	ldr	r0, [r2, #0]
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	8891      	ldrh	r1, [r2, #4]
 8000752:	7992      	ldrb	r2, [r2, #6]
 8000754:	8099      	strh	r1, [r3, #4]
 8000756:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3309      	adds	r3, #9
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	330a      	adds	r3, #10
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	330b      	adds	r3, #11
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3307      	adds	r3, #7
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]


		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000780:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <setConnectable+0xf0>)
 8000782:	2208      	movs	r2, #8
 8000784:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000786:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <setConnectable+0xf0>)
 8000788:	2215      	movs	r2, #21
 800078a:	70da      	strb	r2, [r3, #3]

		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 800078c:	2019      	movs	r0, #25
 800078e:	f003 fadb 	bl	8003d48 <malloc>
 8000792:	4603      	mov	r3, r0
 8000794:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <setConnectable+0xf0>)
 800079a:	461c      	mov	r4, r3
 800079c:	4613      	mov	r3, r2
 800079e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007a0:	6020      	str	r0, [r4, #0]
 80007a2:	6061      	str	r1, [r4, #4]
 80007a4:	60a2      	str	r2, [r4, #8]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	330d      	adds	r3, #13
 80007ae:	220c      	movs	r2, #12
 80007b0:	68f9      	ldr	r1, [r7, #12]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fbfe 	bl	8003fb4 <memcpy>

		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007b8:	2119      	movs	r1, #25
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f7ff ff2a 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 80007c0:	2007      	movs	r0, #7
 80007c2:	f003 fac1 	bl	8003d48 <malloc>
 80007c6:	4603      	mov	r3, r0
 80007c8:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 80007ca:	bf00      	nop
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <setConnectable+0xf4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0fb      	beq.n	80007cc <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 80007d4:	2107      	movs	r1, #7
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fe6c 	bl	80004b4 <fetchBleEvent>
 80007dc:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10f      	bne.n	8000804 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007e4:	2207      	movs	r2, #7
 80007e6:	4912      	ldr	r1, [pc, #72]	@ (8000830 <setConnectable+0xf8>)
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff feed 	bl	80005c8 <checkEventResp>
 80007ee:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <setConnectable+0xfc>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <setConnectable+0xfc>)
 8000802:	801a      	strh	r2, [r3, #0]
		}
		}

		free(rxEvent);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f003 faa7 	bl	8003d58 <free>
		free(discoverableCommand);
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f003 faa4 	bl	8003d58 <free>
		free(localname);
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f003 faa1 	bl	8003d58 <free>
		HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f001 fb78 	bl	8001f0c <HAL_Delay>
 }
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	2000010c 	.word	0x2000010c
 8000828:	20000078 	.word	0x20000078
 800082c:	200002dc 	.word	0x200002dc
 8000830:	20000088 	.word	0x20000088
 8000834:	200002d6 	.word	0x200002d6

08000838 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff fee3 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	005a      	lsls	r2, r3, #1
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fa76 	bl	8003d48 <malloc>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <BLE_command+0x90>)
 8000862:	601a      	str	r2, [r3, #0]

		long contatore=0;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000868:	e007      	b.n	800087a <BLE_command+0x42>
			contatore++;
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	3301      	adds	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000876:	4293      	cmp	r3, r2
 8000878:	dc07      	bgt.n	800088a <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <BLE_command+0x94>)
 800087e:	f001 fe45 	bl	800250c <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f0      	beq.n	800086a <BLE_command+0x32>
 8000888:	e000      	b.n	800088c <BLE_command+0x54>
				break;
 800088a:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <BLE_command+0x90>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	005a      	lsls	r2, r3, #1
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4619      	mov	r1, r3
 800089a:	f7ff fe0b 	bl	80004b4 <fetchBleEvent>
 800089e:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d107      	bne.n	80008b6 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <BLE_command+0x90>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe8a 	bl	80005c8 <checkEventResp>
 80008b4:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f001 fb28 	bl	8001f0c <HAL_Delay>


	 return response;
 80008bc:	697b      	ldr	r3, [r7, #20]
 }
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002d8 	.word	0x200002d8
 80008cc:	48001000 	.word	0x48001000

080008d0 <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <addService+0x60>)
 80008de:	2210      	movs	r2, #16
 80008e0:	68f9      	ldr	r1, [r7, #12]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fb66 	bl	8003fb4 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <addService+0x64>)
 80008ee:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008f0:	2301      	movs	r3, #1
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2307      	movs	r3, #7
 80008f6:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <addService+0x68>)
 80008f8:	2117      	movs	r1, #23
 80008fa:	480e      	ldr	r0, [pc, #56]	@ (8000934 <addService+0x64>)
 80008fc:	f7ff ff9c 	bl	8000838 <BLE_command>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <addService+0x4c>
			handle[0]=rxEvent[7];
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <addService+0x6c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	79da      	ldrb	r2, [r3, #7]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <addService+0x6c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	3301      	adds	r3, #1
 8000918:	7a12      	ldrb	r2, [r2, #8]
 800091a:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <addService+0x6c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fa19 	bl	8003d58 <free>
 }
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000095 	.word	0x20000095
 8000934:	20000090 	.word	0x20000090
 8000938:	200000a8 	.word	0x200000a8
 800093c:	200002d8 	.word	0x200002d8

08000940 <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <addCharacteristic+0x74>)
 8000950:	2210      	movs	r2, #16
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fb2d 	bl	8003fb4 <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <addCharacteristic+0x78>)
 8000960:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	785a      	ldrb	r2, [r3, #1]
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <addCharacteristic+0x78>)
 8000968:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <addCharacteristic+0x78>)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000970:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <addCharacteristic+0x78>)
 8000972:	7e3b      	ldrb	r3, [r7, #24]
 8000974:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000976:	2301      	movs	r3, #1
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2307      	movs	r3, #7
 800097c:	4a0f      	ldr	r2, [pc, #60]	@ (80009bc <addCharacteristic+0x7c>)
 800097e:	211e      	movs	r1, #30
 8000980:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <addCharacteristic+0x78>)
 8000982:	f7ff ff59 	bl	8000838 <BLE_command>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10a      	bne.n	80009a2 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <addCharacteristic+0x80>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	79da      	ldrb	r2, [r3, #7]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <addCharacteristic+0x80>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	7a12      	ldrb	r2, [r2, #8]
 80009a0:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <addCharacteristic+0x80>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 f9d6 	bl	8003d58 <free>
 }
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000b7 	.word	0x200000b7
 80009b8:	200000b0 	.word	0x200000b0
 80009bc:	200000d0 	.word	0x200000d0
 80009c0:	200002d8 	.word	0x200002d8

080009c4 <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3306      	adds	r3, #6
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <updateCharValue+0x9c>)
 80009dc:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <updateCharValue+0x9c>)
 80009e4:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	785a      	ldrb	r2, [r3, #1]
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <updateCharValue+0x9c>)
 80009ec:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <updateCharValue+0x9c>)
 80009f4:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	785a      	ldrb	r2, [r3, #1]
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <updateCharValue+0x9c>)
 80009fc:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <updateCharValue+0x9c>)
 8000a04:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <updateCharValue+0x9c>)
 8000a0c:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	330a      	adds	r3, #10
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 f998 	bl	8003d48 <malloc>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4910      	ldr	r1, [pc, #64]	@ (8000a60 <updateCharValue+0x9c>)
 8000a20:	6978      	ldr	r0, [r7, #20]
 8000a22:	f003 fac7 	bl	8003fb4 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	330a      	adds	r3, #10
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	6a39      	ldr	r1, [r7, #32]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fac0 	bl	8003fb4 <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f103 010a 	add.w	r1, r3, #10
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2307      	movs	r3, #7
 8000a40:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <updateCharValue+0xa0>)
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff fef8 	bl	8000838 <BLE_command>

	 free(commandComplete);
 8000a48:	6978      	ldr	r0, [r7, #20]
 8000a4a:	f003 f985 	bl	8003d58 <free>
	 free(rxEvent);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <updateCharValue+0xa4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 f980 	bl	8003d58 <free>
 }
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000d8 	.word	0x200000d8
 8000a64:	200000d0 	.word	0x200000d0
 8000a68:	200002d8 	.word	0x200002d8

08000a6c <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <disconnectBLE+0x98>)
 8000a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d105      	bne.n	8000a8a <disconnectBLE+0x1e>
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <disconnectBLE+0x98>)
 8000a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d037      	beq.n	8000afa <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <disconnectBLE+0x9c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <disconnectBLE+0x98>)
 8000a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <disconnectBLE+0x98>)
 8000a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000aa4:	2313      	movs	r3, #19
 8000aa6:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aa8:	1d38      	adds	r0, r7, #4
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2307      	movs	r3, #7
 8000ab0:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <disconnectBLE+0xa0>)
 8000ab2:	2107      	movs	r1, #7
 8000ab4:	f7ff fec0 	bl	8000838 <BLE_command>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11e      	bne.n	8000afc <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000abe:	217f      	movs	r1, #127	@ 0x7f
 8000ac0:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <disconnectBLE+0xa4>)
 8000ac2:	f7ff fcf7 	bl	80004b4 <fetchBleEvent>
 8000ac6:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000ace:	2204      	movs	r2, #4
 8000ad0:	4910      	ldr	r1, [pc, #64]	@ (8000b14 <disconnectBLE+0xa8>)
 8000ad2:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <disconnectBLE+0xa4>)
 8000ad4:	f7ff fd78 	bl	80005c8 <checkEventResp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d107      	bne.n	8000aee <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <disconnectBLE+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <disconnectBLE+0x98>)
 8000ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aec:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <disconnectBLE+0xac>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f930 	bl	8003d58 <free>
 8000af8:	e000      	b.n	8000afc <disconnectBLE+0x90>
		return;
 8000afa:	bf00      	nop
	 }
 }
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000144 	.word	0x20000144
 8000b08:	200000e8 	.word	0x200000e8
 8000b0c:	200000f0 	.word	0x200000f0
 8000b10:	200001cc 	.word	0x200001cc
 8000b14:	200000ec 	.word	0x200000ec
 8000b18:	200002d8 	.word	0x200002d8

08000b1c <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d102      	bne.n	8000b32 <setDiscoverability+0x16>
		 setConnectable();
 8000b2c:	f7ff fe04 	bl	8000738 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b30:	e00f      	b.n	8000b52 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10c      	bne.n	8000b52 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <setDiscoverability+0x40>)
 8000b40:	2104      	movs	r1, #4
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <setDiscoverability+0x44>)
 8000b44:	f7ff fe78 	bl	8000838 <BLE_command>
		 free(rxEvent);
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <setDiscoverability+0x48>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 f903 	bl	8003d58 <free>
 }
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000104 	.word	0x20000104
 8000b60:	20000100 	.word	0x20000100
 8000b64:	200002d8 	.word	0x200002d8

08000b68 <i2c_init>:
#include <stm32l475xx.h>



void i2c_init(){
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0



	//Enable GPIOB Clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <i2c_init+0x134>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <i2c_init+0x134>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Enable I2C2 Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b78:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <i2c_init+0x134>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	4a47      	ldr	r2, [pc, #284]	@ (8000c9c <i2c_init+0x134>)
 8000b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b82:	6593      	str	r3, [r2, #88]	@ 0x58

	//Disable I2C2
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000b84:	4b46      	ldr	r3, [pc, #280]	@ (8000ca0 <i2c_init+0x138>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a45      	ldr	r2, [pc, #276]	@ (8000ca0 <i2c_init+0x138>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]


	//Set the GPIOB mode of pin 10 to use alternate function
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000b90:	4b44      	ldr	r3, [pc, #272]	@ (8000ca4 <i2c_init+0x13c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a43      	ldr	r2, [pc, #268]	@ (8000ca4 <i2c_init+0x13c>)
 8000b96:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b9a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000b9c:	4b41      	ldr	r3, [pc, #260]	@ (8000ca4 <i2c_init+0x13c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a40      	ldr	r2, [pc, #256]	@ (8000ca4 <i2c_init+0x13c>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	6013      	str	r3, [r2, #0]

	//Clear Pin 10 Alternate function and set it to 4
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca4 <i2c_init+0x13c>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bac:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca4 <i2c_init+0x13c>)
 8000bae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bb2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2;
 8000bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca4 <i2c_init+0x13c>)
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ca4 <i2c_init+0x13c>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bbe:	6253      	str	r3, [r2, #36]	@ 0x24

	/* Configure the GPIO output as open drain */
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000bc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ca4 <i2c_init+0x13c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a37      	ldr	r2, [pc, #220]	@ (8000ca4 <i2c_init+0x13c>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bca:	6053      	str	r3, [r2, #4]

	//Set PB 10 to Open Drain
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000bcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <i2c_init+0x13c>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a34      	ldr	r2, [pc, #208]	@ (8000ca4 <i2c_init+0x13c>)
 8000bd2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000bd6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_0;
 8000bd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <i2c_init+0x13c>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <i2c_init+0x13c>)
 8000bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000be2:	60d3      	str	r3, [r2, #12]


	//Set the GPIOB Pin 11 mode to use alternate function
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <i2c_init+0x13c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca4 <i2c_init+0x13c>)
 8000bea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <i2c_init+0x13c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca4 <i2c_init+0x13c>)
 8000bf6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bfa:	6013      	str	r3, [r2, #0]

	//Clear Pin 11 Alternate function and set it to 4
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 8000bfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <i2c_init+0x13c>)
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <i2c_init+0x13c>)
 8000c02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000c06:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL11_2;
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <i2c_init+0x13c>)
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ca4 <i2c_init+0x13c>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c12:	6253      	str	r3, [r2, #36]	@ 0x24


	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000c14:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <i2c_init+0x13c>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a22      	ldr	r2, [pc, #136]	@ (8000ca4 <i2c_init+0x13c>)
 8000c1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c1e:	6053      	str	r3, [r2, #4]

	//Set PB 11 to Open Drain
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
 8000c20:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <i2c_init+0x13c>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca4 <i2c_init+0x13c>)
 8000c26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c2a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <i2c_init+0x13c>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <i2c_init+0x13c>)
 8000c32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c36:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOB->OSPEEDR &= ~GPIOB->OSPEEDR;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <i2c_init+0x13c>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <i2c_init+0x13c>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4918      	ldr	r1, [pc, #96]	@ (8000ca4 <i2c_init+0x13c>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
	// Base Clock is 4Mhz, meaning a 250ns period
	// We set SCLL and SCLH to 16, and SCLDEL and SDADEL to 4
	// Adding the 4 together, we get 16 + 16 + 4 + 4 = 40
	// 40 * 250ns = 10000ns which is 100Khz
	//Set I2C2 SCLL to x
	I2C2->TIMINGR |= 0x0000000a;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <i2c_init+0x138>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <i2c_init+0x138>)
 8000c4e:	f043 030a 	orr.w	r3, r3, #10
 8000c52:	6113      	str	r3, [r2, #16]
	//Set I2C2 SCLH to x
	I2C2->TIMINGR |= 0x00000a00;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <i2c_init+0x138>)
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	4a11      	ldr	r2, [pc, #68]	@ (8000ca0 <i2c_init+0x138>)
 8000c5a:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8000c5e:	6113      	str	r3, [r2, #16]
	//Set SCLDEL to 1
	I2C2->TIMINGR |= 0x00300000;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <i2c_init+0x138>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <i2c_init+0x138>)
 8000c66:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000c6a:	6113      	str	r3, [r2, #16]
	//Set SDADEL to 1
	I2C2->TIMINGR |= 0x00030000;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <i2c_init+0x138>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <i2c_init+0x138>)
 8000c72:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000c76:	6113      	str	r3, [r2, #16]
	//Set PREC to x
	I2C2->TIMINGR &= ~I2C_TIMINGR_PRESC;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <i2c_init+0x138>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <i2c_init+0x138>)
 8000c7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c82:	6113      	str	r3, [r2, #16]
//	I2C2->CR1 |= I2C_CR1_TCIE;



	//Enable I2C2 Peripheral
	I2C2->CR1 |= I2C_CR1_PE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <i2c_init+0x138>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <i2c_init+0x138>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40005800 	.word	0x40005800
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <i2c_transaction>:


uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	603a      	str	r2, [r7, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	71bb      	strb	r3, [r7, #6]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	717b      	strb	r3, [r7, #5]




	//set address mode to 7 bit
	I2C2->CR2 &= ~I2C_CR2_ADD10;
 8000cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8000e28 <i2c_transaction+0x180>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	4a59      	ldr	r2, [pc, #356]	@ (8000e28 <i2c_transaction+0x180>)
 8000cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000cc8:	6053      	str	r3, [r2, #4]
	//Set the Slave Address of the Peripheral
	I2C2->CR2 |= address;
 8000cca:	4b57      	ldr	r3, [pc, #348]	@ (8000e28 <i2c_transaction+0x180>)
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4955      	ldr	r1, [pc, #340]	@ (8000e28 <i2c_transaction+0x180>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	604b      	str	r3, [r1, #4]
	//Enable Autoend
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000cd6:	4b54      	ldr	r3, [pc, #336]	@ (8000e28 <i2c_transaction+0x180>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a53      	ldr	r2, [pc, #332]	@ (8000e28 <i2c_transaction+0x180>)
 8000cdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ce0:	6053      	str	r3, [r2, #4]
	//Bitmask for checking register values
	uint32_t bit0_mask = 0x00000001;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
	//Store the amount of bytes read or written
	uint8_t dataRW = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]




	//If dir is 1, read, else dir = 0, write
	if(dir){
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d043      	beq.n	8000d78 <i2c_transaction+0xd0>
		//Set the NBYTES
		I2C2->CR2 |= 0x00010000 * len;
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e28 <i2c_transaction+0x180>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	797a      	ldrb	r2, [r7, #5]
 8000cf6:	0412      	lsls	r2, r2, #16
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000e28 <i2c_transaction+0x180>)
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6053      	str	r3, [r2, #4]

		//Set transactions to write
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000d00:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <i2c_transaction+0x180>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4a48      	ldr	r2, [pc, #288]	@ (8000e28 <i2c_transaction+0x180>)
 8000d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d0a:	6053      	str	r3, [r2, #4]
		//Start I2C transaction
		I2C2->CR2 |= I2C_CR2_START;
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <i2c_transaction+0x180>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4a45      	ldr	r2, [pc, #276]	@ (8000e28 <i2c_transaction+0x180>)
 8000d12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d16:	6053      	str	r3, [r2, #4]

		//Wait until TXIS set to 1 and is ready to receive data
		while((I2C2->ISR &(bit0_mask << 1)) != I2C_ISR_TXIS){
 8000d18:	bf00      	nop
 8000d1a:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <i2c_transaction+0x180>)
 8000d1c:	699a      	ldr	r2, [r3, #24]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d1f8      	bne.n	8000d1a <i2c_transaction+0x72>

		}
		//Write the register address value from data to TXDR to set register to read/write tos
		I2C2->TXDR = *data;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e28 <i2c_transaction+0x180>)
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28

		//Set the transaction to read
		I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000d30:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <i2c_transaction+0x180>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <i2c_transaction+0x180>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3a:	6053      	str	r3, [r2, #4]
		//Start te I2C transaction
		I2C2->CR2 |= I2C_CR2_START;
 8000d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <i2c_transaction+0x180>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a39      	ldr	r2, [pc, #228]	@ (8000e28 <i2c_transaction+0x180>)
 8000d42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d46:	6053      	str	r3, [r2, #4]


		//while((I2C2->CR2 & (bit0_mask << 14)) != I2C_CR2_STOP){

		//While the number of bytes we need to read is less than len, keep checking RXNE and reading values
		while(dataRW < len){
 8000d48:	e011      	b.n	8000d6e <i2c_transaction+0xc6>
			//Check if RXNE == 1 and data is ready to be read
			while((I2C2->ISR & (bit0_mask << 2)) != I2C_ISR_RXNE){
 8000d4a:	bf00      	nop
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <i2c_transaction+0x180>)
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d1f8      	bne.n	8000d4c <i2c_transaction+0xa4>
			}
			//Read the data value offset by dataRW and put in in the data
			//Data being read replaces the register address value in the first entry in the array and onwards
			*(data + dataRW) = I2C2->RXDR;
 8000d5a:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <i2c_transaction+0x180>)
 8000d5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2ca      	uxtb	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
			//Increment dataRW as we have read a value
			dataRW++;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
		while(dataRW < len){
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3e9      	bcc.n	8000d4a <i2c_transaction+0xa2>
 8000d76:	e048      	b.n	8000e0a <i2c_transaction+0x162>

		//}
	}
	else{
		//Set the NBYTES, set to + 1 because we also need to write the register address value
		I2C2->CR2 |= 0x00010000 * (len + 1);
 8000d78:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <i2c_transaction+0x180>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	797a      	ldrb	r2, [r7, #5]
 8000d7e:	3201      	adds	r2, #1
 8000d80:	0412      	lsls	r2, r2, #16
 8000d82:	4611      	mov	r1, r2
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <i2c_transaction+0x180>)
 8000d86:	430b      	orrs	r3, r1
 8000d88:	6053      	str	r3, [r2, #4]

		//Set the I2C transaction to write
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000d8a:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <i2c_transaction+0x180>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <i2c_transaction+0x180>)
 8000d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d94:	6053      	str	r3, [r2, #4]
		//Start the I2C transactions
		I2C2->CR2 |= I2C_CR2_START;
 8000d96:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <i2c_transaction+0x180>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <i2c_transaction+0x180>)
 8000d9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000da0:	6053      	str	r3, [r2, #4]

		//Wait for TXIS == 1 to be ready to write and write in register address
		while((I2C2->ISR &(bit0_mask << 1)) != I2C_ISR_TXIS){
 8000da2:	bf00      	nop
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <i2c_transaction+0x180>)
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d1f8      	bne.n	8000da4 <i2c_transaction+0xfc>

		}
		//Write it register address to TXDR
		I2C2->TXDR = *data;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <i2c_transaction+0x180>)
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28

		//while((I2C2->CR2 & (bit0_mask << 14)) != I2C_CR2_STOP){


		//While the number of bytes we have written is less than len or NACKF isn't set to high, keep writing
		while((dataRW < len) & !((I2C2->ISR & (bit0_mask << 4)) == I2C_ISR_NACKF)){
 8000dba:	e011      	b.n	8000de0 <i2c_transaction+0x138>


			//Wait until TXIS == 1 and is TXDR is ready to receive data
			while((I2C2->ISR &(bit0_mask << 1)) != I2C_ISR_TXIS){
 8000dbc:	bf00      	nop
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <i2c_transaction+0x180>)
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d1f8      	bne.n	8000dbe <i2c_transaction+0x116>

			}
			//Write to TXDR the data values offset by dataRW and +1 for the register address in the first array slot
			I2C2->TXDR = *(data + dataRW + 1);
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <i2c_transaction+0x180>)
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28
			dataRW++;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
		while((dataRW < len) & !((I2C2->ISR & (bit0_mask << 4)) == I2C_ISR_NACKF)){
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	797b      	ldrb	r3, [r7, #5]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	bf34      	ite	cc
 8000de8:	2301      	movcc	r3, #1
 8000dea:	2300      	movcs	r3, #0
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <i2c_transaction+0x180>)
 8000df0:	6999      	ldr	r1, [r3, #24]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	400b      	ands	r3, r1
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4013      	ands	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1d8      	bne.n	8000dbc <i2c_transaction+0x114>

	}


	//Clear CR2 for next transaction
	I2C2->CR2 &= ~I2C2->CR2;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <i2c_transaction+0x180>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <i2c_transaction+0x180>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4904      	ldr	r1, [pc, #16]	@ (8000e28 <i2c_transaction+0x180>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]

	return 0;
 8000e1a:	2300      	movs	r3, #0

}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40005800 	.word	0x40005800

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <lptim_init>:
 *  Created on: Mar 12, 2025
 *      Author: gdyan
 */
#include "lptim.h"

void lptim_init(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

	//Disable LPTIM1
	LPTIM1->CR &= ~LPTIM_CR_ENABLE;
 8000ec0:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <lptim_init+0xc8>)
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f84 <lptim_init+0xc8>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6113      	str	r3, [r2, #16]

	//Turn on LSI Clock
	RCC->CSR |= RCC_CSR_LSION;
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <lptim_init+0xcc>)
 8000ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f88 <lptim_init+0xcc>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
	//Wait for LSI Clock to be ready
	while((RCC->CSR & RCC_CSR_LSIRDY) == 0){
 8000edc:	bf00      	nop
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <lptim_init+0xcc>)
 8000ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f8      	beq.n	8000ede <lptim_init+0x22>

	}
	//Enable LPTIM1 Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <lptim_init+0xcc>)
 8000eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef0:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <lptim_init+0xcc>)
 8000ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ef6:	6593      	str	r3, [r2, #88]	@ 0x58
	//Set LPTIM1 Clock to LSI
	RCC->CCIPR |= RCC_CCIPR_LPTIM1SEL_0;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <lptim_init+0xcc>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <lptim_init+0xcc>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	//Enable LPTIM1 Clock to work in Sleep and Stop modes
	RCC->APB1SMENR1 |= RCC_APB1SMENR1_LPTIM1SMEN;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <lptim_init+0xcc>)
 8000f0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f88 <lptim_init+0xcc>)
 8000f0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f12:	6793      	str	r3, [r2, #120]	@ 0x78


	//LPTIM interrupts
	//LPTIM1->IER |= LPTIM_IER_UPIE;
	//LPTIM1->IER |= LPTIM_IER_ARROKIE;
	LPTIM1->IER |= LPTIM_IER_ARRMIE;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <lptim_init+0xc8>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a1a      	ldr	r2, [pc, #104]	@ (8000f84 <lptim_init+0xc8>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6093      	str	r3, [r2, #8]

	//Set Clock to internal
	LPTIM1->CFGR &= ~LPTIM_CFGR_CKSEL;
 8000f20:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <lptim_init+0xc8>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <lptim_init+0xc8>)
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	60d3      	str	r3, [r2, #12]
	//Use internal LSI clock to count
	LPTIM1->CFGR &= ~LPTIM_CFGR_COUNTMODE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <lptim_init+0xc8>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <lptim_init+0xc8>)
 8000f32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f36:	60d3      	str	r3, [r2, #12]
	//Set prescaler to 128
	LPTIM1->CFGR |= LPTIM_CFGR_PRESC_0 | LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_2;
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <lptim_init+0xc8>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <lptim_init+0xc8>)
 8000f3e:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8000f42:	60d3      	str	r3, [r2, #12]


	LPTIM1->ARR = 2500;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <lptim_init+0xc8>)
 8000f46:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000f4a:	619a      	str	r2, [r3, #24]

	NVIC_EnableIRQ(LPTIM1_IRQn);
 8000f4c:	2041      	movs	r0, #65	@ 0x41
 8000f4e:	f7ff ff6d 	bl	8000e2c <__NVIC_EnableIRQ>
	NVIC_SetPriority(LPTIM1_IRQn, 1);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2041      	movs	r0, #65	@ 0x41
 8000f56:	f7ff ff87 	bl	8000e68 <__NVIC_SetPriority>

	LPTIM1->CR |= LPTIM_CR_ENABLE;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <lptim_init+0xc8>)
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4a09      	ldr	r2, [pc, #36]	@ (8000f84 <lptim_init+0xc8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6113      	str	r3, [r2, #16]
	LPTIM1->CR |= LPTIM_CR_CNTSTRT;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <lptim_init+0xc8>)
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <lptim_init+0xc8>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6113      	str	r3, [r2, #16]
	//Enable LPTIM1 Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <lptim_init+0xcc>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <lptim_init+0xcc>)
 8000f78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f7c:	6593      	str	r3, [r2, #88]	@ 0x58


}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40007c00 	.word	0x40007c00
 8000f88:	40021000 	.word	0x40021000

08000f8c <lptim_set_ms>:
void lptim_reset(){
	LPTIM1->CNT = 0;
}
void lptim_set_ms(uint16_t period){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	LPTIM1->CNT = 0;
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <lptim_set_ms+0x24>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
	LPTIM1->ARR = period;
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <lptim_set_ms+0x24>)
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	6193      	str	r3, [r2, #24]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007c00 	.word	0x40007c00

08000fb4 <lsm6dsl_init>:
#include <stm32l475xx.h>


void lsm6dsl_init(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	// Variable to check accelerometer is there, passes in register address and replaces it with 0x6A if there
//	uint8_t who = 0x0F;
	// Array for passing in register address values, data values to write, and values read to and from the i2c transaction
	uint8_t reg_data[2] = {0};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	80bb      	strh	r3, [r7, #4]

//

	//Write to CTRL1_XL, set the top 4 bits to 0110 --> 104hz normal mode
	//Set first value to register address value of CTRL1_XL, and second value to data value you want to write to the register
	reg_data[0] = 0x10;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	713b      	strb	r3, [r7, #4]
	reg_data[1] = 0b00010000;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	717b      	strb	r3, [r7, #5]
	i2c_transaction(0b11010100, 0, &reg_data, 1);
 8000fc6:	1d3a      	adds	r2, r7, #4
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2100      	movs	r1, #0
 8000fcc:	20d4      	movs	r0, #212	@ 0xd4
 8000fce:	f7ff fe6b 	bl	8000ca8 <i2c_transaction>
//	printf("%d \n", reg_data[0]);


	//Write to INT1_CTRL to turn on accelerometer data interrupts
	//Set first value to register address value of INT1_CTRL, and second value to data value you want to write to the register
	reg_data[0] = 0x0d;
 8000fd2:	230d      	movs	r3, #13
 8000fd4:	713b      	strb	r3, [r7, #4]
	reg_data[1] = 0x01;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	717b      	strb	r3, [r7, #5]
	i2c_transaction(0b11010100, 0, &reg_data, 1);
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2100      	movs	r1, #0
 8000fe0:	20d4      	movs	r0, #212	@ 0xd4
 8000fe2:	f7ff fe61 	bl	8000ca8 <i2c_transaction>
//	reg_data[1] = 0x01;
//	i2c_transaction(0b11010101, 1, &reg_data, 1);
//	printf("%d \n", reg_data[0]);

	//Write to CTRL6_C to disable high performance mode for accelerometer
	reg_data[0] = 0x15;
 8000fe6:	2315      	movs	r3, #21
 8000fe8:	713b      	strb	r3, [r7, #4]
	reg_data[1] =  0b00010000;
 8000fea:	2310      	movs	r3, #16
 8000fec:	717b      	strb	r3, [r7, #5]
	i2c_transaction(0b11010100, 0, &reg_data, 1);
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	20d4      	movs	r0, #212	@ 0xd4
 8000ff6:	f7ff fe57 	bl	8000ca8 <i2c_transaction>


}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]

	// Variable to check status register
	int8_t status_data = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]

	// Read accelerometer data status register and check if it is ready, if not stall until ready
	while(status_data & 0x1){
 8001012:	e008      	b.n	8001026 <lsm6dsl_read_xyz+0x24>
		status_data = 0x1E;
 8001014:	231e      	movs	r3, #30
 8001016:	75fb      	strb	r3, [r7, #23]
		i2c_transaction(0b11010101, 1, &status_data, 1);
 8001018:	f107 0217 	add.w	r2, r7, #23
 800101c:	2301      	movs	r3, #1
 800101e:	2101      	movs	r1, #1
 8001020:	20d5      	movs	r0, #213	@ 0xd5
 8001022:	f7ff fe41 	bl	8000ca8 <i2c_transaction>
	while(status_data & 0x1){
 8001026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ef      	bne.n	8001014 <lsm6dsl_read_xyz+0x12>
	}

	//Send in register address values for the X, Y, Z low bits and high bits
	//and recieve the read values back in the same variable
	uint8_t xL = 0x28;
 8001034:	2328      	movs	r3, #40	@ 0x28
 8001036:	75bb      	strb	r3, [r7, #22]
	i2c_transaction(0b11010101, 1, &xL, 1);
 8001038:	f107 0216 	add.w	r2, r7, #22
 800103c:	2301      	movs	r3, #1
 800103e:	2101      	movs	r1, #1
 8001040:	20d5      	movs	r0, #213	@ 0xd5
 8001042:	f7ff fe31 	bl	8000ca8 <i2c_transaction>
	uint8_t xH = 0x29;
 8001046:	2329      	movs	r3, #41	@ 0x29
 8001048:	757b      	strb	r3, [r7, #21]
	i2c_transaction(0b11010101, 1, &xH, 1);
 800104a:	f107 0215 	add.w	r2, r7, #21
 800104e:	2301      	movs	r3, #1
 8001050:	2101      	movs	r1, #1
 8001052:	20d5      	movs	r0, #213	@ 0xd5
 8001054:	f7ff fe28 	bl	8000ca8 <i2c_transaction>

	uint8_t yL = 0x2A;
 8001058:	232a      	movs	r3, #42	@ 0x2a
 800105a:	753b      	strb	r3, [r7, #20]
	i2c_transaction(0b11010101, 1, &yL, 1);
 800105c:	f107 0214 	add.w	r2, r7, #20
 8001060:	2301      	movs	r3, #1
 8001062:	2101      	movs	r1, #1
 8001064:	20d5      	movs	r0, #213	@ 0xd5
 8001066:	f7ff fe1f 	bl	8000ca8 <i2c_transaction>
	uint8_t yH = 0x2B;
 800106a:	232b      	movs	r3, #43	@ 0x2b
 800106c:	74fb      	strb	r3, [r7, #19]
	i2c_transaction(0b11010101, 1, &yH, 1);
 800106e:	f107 0213 	add.w	r2, r7, #19
 8001072:	2301      	movs	r3, #1
 8001074:	2101      	movs	r1, #1
 8001076:	20d5      	movs	r0, #213	@ 0xd5
 8001078:	f7ff fe16 	bl	8000ca8 <i2c_transaction>

	uint8_t zL = 0x2C;
 800107c:	232c      	movs	r3, #44	@ 0x2c
 800107e:	74bb      	strb	r3, [r7, #18]
	i2c_transaction(0b11010101, 1, &zL, 1);
 8001080:	f107 0212 	add.w	r2, r7, #18
 8001084:	2301      	movs	r3, #1
 8001086:	2101      	movs	r1, #1
 8001088:	20d5      	movs	r0, #213	@ 0xd5
 800108a:	f7ff fe0d 	bl	8000ca8 <i2c_transaction>
	uint8_t zH = 0x2D;
 800108e:	232d      	movs	r3, #45	@ 0x2d
 8001090:	747b      	strb	r3, [r7, #17]
	i2c_transaction(0b11010101, 1, &zH, 1);
 8001092:	f107 0211 	add.w	r2, r7, #17
 8001096:	2301      	movs	r3, #1
 8001098:	2101      	movs	r1, #1
 800109a:	20d5      	movs	r0, #213	@ 0xd5
 800109c:	f7ff fe04 	bl	8000ca8 <i2c_transaction>


	// Cast low and high bit acceleration values to 16 bit
	// Left shift the 8 high bits by 8 and add the 8 lower bits to create full 16 bit acceleration values for X, Y, Z
	// Set the dereferenced x, y, z address to the 16 bit acceleration values
	*x = (((int16_t)(xH)) << 8) | (((int16_t)(xL)));
 80010a0:	7d7b      	ldrb	r3, [r7, #21]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	7dbb      	ldrb	r3, [r7, #22]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)(yH)) << 8) | (((int16_t)(yL)));
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7d3b      	ldrb	r3, [r7, #20]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)(zH)) << 8) | (((int16_t)(zL)));
 80010c4:	7c7b      	ldrb	r3, [r7, #17]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	7cbb      	ldrb	r3, [r7, #18]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	801a      	strh	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <__NVIC_DisableIRQ>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db12      	blt.n	8001118 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	490a      	ldr	r1, [pc, #40]	@ (8001124 <__NVIC_DisableIRQ+0x44>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	3320      	adds	r3, #32
 8001108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800110c:	f3bf 8f4f 	dsb	sy
}
 8001110:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001112:	f3bf 8f6f 	isb	sy
}
 8001116:	bf00      	nop
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100

08001128 <GPIO_OFF>:
	}
	return len;
}


void GPIO_OFF(){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	//GPIO
		GPIOA->MODER |= ~GPIOA->MODER;
 800112c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	43da      	mvns	r2, r3
 8001134:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
		GPIOA->OTYPER &= ~GPIOA->OTYPER;
 8001142:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	43da      	mvns	r2, r3
 800114a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001154:	4013      	ands	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
		GPIOA->OSPEEDR &= ~GPIOA->OSPEEDR;
 8001158:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	43da      	mvns	r2, r3
 8001160:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800116a:	4013      	ands	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
		GPIOA->PUPDR &= ~GPIOA->PUPDR;
 800116e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	43da      	mvns	r2, r3
 8001176:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001180:	4013      	ands	r3, r2
 8001182:	60cb      	str	r3, [r1, #12]
		GPIOA->ODR &= ~GPIOA->ODR;
 8001184:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	43da      	mvns	r2, r3
 800118c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001196:	4013      	ands	r3, r2
 8001198:	614b      	str	r3, [r1, #20]
//		GPIOA->ASCR &= ~GPIOA->ASCR;

		GPIOB->MODER |= ~GPIOB->MODER;
 800119a:	4b91      	ldr	r3, [pc, #580]	@ (80013e0 <GPIO_OFF+0x2b8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	43da      	mvns	r2, r3
 80011a0:	4b8f      	ldr	r3, [pc, #572]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	498e      	ldr	r1, [pc, #568]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
		GPIOB->OTYPER &= ~GPIOB->OTYPER;
 80011aa:	4b8d      	ldr	r3, [pc, #564]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	4b8b      	ldr	r3, [pc, #556]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	498a      	ldr	r1, [pc, #552]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
		GPIOB->OSPEEDR &= ~GPIOB->OSPEEDR;
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	43da      	mvns	r2, r3
 80011c0:	4b87      	ldr	r3, [pc, #540]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4986      	ldr	r1, [pc, #536]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
		GPIOB->PUPDR &= ~GPIOB->PUPDR;
 80011ca:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	4b83      	ldr	r3, [pc, #524]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4982      	ldr	r1, [pc, #520]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	60cb      	str	r3, [r1, #12]
		GPIOB->ODR &= ~GPIOB->ODR;
 80011da:	4b81      	ldr	r3, [pc, #516]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	43da      	mvns	r2, r3
 80011e0:	4b7f      	ldr	r3, [pc, #508]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	497e      	ldr	r1, [pc, #504]	@ (80013e0 <GPIO_OFF+0x2b8>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	614b      	str	r3, [r1, #20]
//		GPIOB->ASCR &= ~GPIOB->ASCR;
//
		GPIOC->MODER |= ~GPIOC->MODER;
 80011ea:	4b7e      	ldr	r3, [pc, #504]	@ (80013e4 <GPIO_OFF+0x2bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	43da      	mvns	r2, r3
 80011f0:	4b7c      	ldr	r3, [pc, #496]	@ (80013e4 <GPIO_OFF+0x2bc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	497b      	ldr	r1, [pc, #492]	@ (80013e4 <GPIO_OFF+0x2bc>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
		GPIOC->OTYPER &= ~GPIOC->OTYPER;
 80011fa:	4b7a      	ldr	r3, [pc, #488]	@ (80013e4 <GPIO_OFF+0x2bc>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	43da      	mvns	r2, r3
 8001200:	4b78      	ldr	r3, [pc, #480]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4977      	ldr	r1, [pc, #476]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001206:	4013      	ands	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
		GPIOC->OSPEEDR &= ~GPIOC->OSPEEDR;
 800120a:	4b76      	ldr	r3, [pc, #472]	@ (80013e4 <GPIO_OFF+0x2bc>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	43da      	mvns	r2, r3
 8001210:	4b74      	ldr	r3, [pc, #464]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4973      	ldr	r1, [pc, #460]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001216:	4013      	ands	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
		GPIOC->PUPDR &= ~GPIOC->PUPDR;
 800121a:	4b72      	ldr	r3, [pc, #456]	@ (80013e4 <GPIO_OFF+0x2bc>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	4b70      	ldr	r3, [pc, #448]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	496f      	ldr	r1, [pc, #444]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001226:	4013      	ands	r3, r2
 8001228:	60cb      	str	r3, [r1, #12]
		GPIOC->ODR &= ~GPIOC->ODR;
 800122a:	4b6e      	ldr	r3, [pc, #440]	@ (80013e4 <GPIO_OFF+0x2bc>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	43da      	mvns	r2, r3
 8001230:	4b6c      	ldr	r3, [pc, #432]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	496b      	ldr	r1, [pc, #428]	@ (80013e4 <GPIO_OFF+0x2bc>)
 8001236:	4013      	ands	r3, r2
 8001238:	614b      	str	r3, [r1, #20]
//		GPIOC->ASCR &= ~GPIOC->ASCR;
//
		GPIOD->MODER |= ~GPIOD->MODER;
 800123a:	4b6b      	ldr	r3, [pc, #428]	@ (80013e8 <GPIO_OFF+0x2c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	43da      	mvns	r2, r3
 8001240:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4968      	ldr	r1, [pc, #416]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
		GPIOD->OTYPER &= ~GPIOD->OTYPER;
 800124a:	4b67      	ldr	r3, [pc, #412]	@ (80013e8 <GPIO_OFF+0x2c0>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	43da      	mvns	r2, r3
 8001250:	4b65      	ldr	r3, [pc, #404]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4964      	ldr	r1, [pc, #400]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001256:	4013      	ands	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
		GPIOD->OSPEEDR &= ~GPIOD->OSPEEDR;
 800125a:	4b63      	ldr	r3, [pc, #396]	@ (80013e8 <GPIO_OFF+0x2c0>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	43da      	mvns	r2, r3
 8001260:	4b61      	ldr	r3, [pc, #388]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4960      	ldr	r1, [pc, #384]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001266:	4013      	ands	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
		GPIOD->PUPDR &= ~GPIOD->PUPDR;
 800126a:	4b5f      	ldr	r3, [pc, #380]	@ (80013e8 <GPIO_OFF+0x2c0>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	43da      	mvns	r2, r3
 8001270:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	495c      	ldr	r1, [pc, #368]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001276:	4013      	ands	r3, r2
 8001278:	60cb      	str	r3, [r1, #12]
		GPIOD->ODR &= ~GPIOD->ODR;
 800127a:	4b5b      	ldr	r3, [pc, #364]	@ (80013e8 <GPIO_OFF+0x2c0>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	43da      	mvns	r2, r3
 8001280:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4958      	ldr	r1, [pc, #352]	@ (80013e8 <GPIO_OFF+0x2c0>)
 8001286:	4013      	ands	r3, r2
 8001288:	614b      	str	r3, [r1, #20]
//		GPIOD->ASCR &= ~GPIOD->ASCR;

		GPIOE->MODER |= ~GPIOE->MODER;
 800128a:	4b58      	ldr	r3, [pc, #352]	@ (80013ec <GPIO_OFF+0x2c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	43da      	mvns	r2, r3
 8001290:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <GPIO_OFF+0x2c4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4955      	ldr	r1, [pc, #340]	@ (80013ec <GPIO_OFF+0x2c4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
		GPIOE->OTYPER &= ~GPIOE->OTYPER;
 800129a:	4b54      	ldr	r3, [pc, #336]	@ (80013ec <GPIO_OFF+0x2c4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	43da      	mvns	r2, r3
 80012a0:	4b52      	ldr	r3, [pc, #328]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4951      	ldr	r1, [pc, #324]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
		GPIOE->OSPEEDR &= ~GPIOE->OSPEEDR;
 80012aa:	4b50      	ldr	r3, [pc, #320]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	43da      	mvns	r2, r3
 80012b0:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494d      	ldr	r1, [pc, #308]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
		GPIOE->PUPDR &= ~GPIOE->PUPDR;
 80012ba:	4b4c      	ldr	r3, [pc, #304]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	43da      	mvns	r2, r3
 80012c0:	4b4a      	ldr	r3, [pc, #296]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4949      	ldr	r1, [pc, #292]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	60cb      	str	r3, [r1, #12]
		GPIOE->ODR &= ~GPIOE->ODR;
 80012ca:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	4b46      	ldr	r3, [pc, #280]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4945      	ldr	r1, [pc, #276]	@ (80013ec <GPIO_OFF+0x2c4>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	614b      	str	r3, [r1, #20]
//		GPIOE->ASCR &= ~GPIOE->ASCR;

		GPIOF->MODER |= ~GPIOF->MODER;
 80012da:	4b45      	ldr	r3, [pc, #276]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	43da      	mvns	r2, r3
 80012e0:	4b43      	ldr	r3, [pc, #268]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4942      	ldr	r1, [pc, #264]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
		GPIOF->OTYPER &= ~GPIOF->OTYPER;
 80012ea:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	43da      	mvns	r2, r3
 80012f0:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	493e      	ldr	r1, [pc, #248]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
		GPIOF->OSPEEDR &= ~GPIOF->OSPEEDR;
 80012fa:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <GPIO_OFF+0x2c8>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	43da      	mvns	r2, r3
 8001300:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	493a      	ldr	r1, [pc, #232]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001306:	4013      	ands	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
		GPIOF->PUPDR &= ~GPIOF->PUPDR;
 800130a:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <GPIO_OFF+0x2c8>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	43da      	mvns	r2, r3
 8001310:	4b37      	ldr	r3, [pc, #220]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4936      	ldr	r1, [pc, #216]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001316:	4013      	ands	r3, r2
 8001318:	60cb      	str	r3, [r1, #12]
		GPIOF->ODR &= ~GPIOF->ODR;
 800131a:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <GPIO_OFF+0x2c8>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	43da      	mvns	r2, r3
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4932      	ldr	r1, [pc, #200]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001326:	4013      	ands	r3, r2
 8001328:	614b      	str	r3, [r1, #20]
		GPIOF->ASCR &= ~GPIOF->ASCR;
 800132a:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <GPIO_OFF+0x2c8>)
 800132c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132e:	43da      	mvns	r2, r3
 8001330:	4b2f      	ldr	r3, [pc, #188]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	492e      	ldr	r1, [pc, #184]	@ (80013f0 <GPIO_OFF+0x2c8>)
 8001336:	4013      	ands	r3, r2
 8001338:	62cb      	str	r3, [r1, #44]	@ 0x2c

		GPIOG->MODER |= ~GPIOG->MODER;
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <GPIO_OFF+0x2cc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	43da      	mvns	r2, r3
 8001340:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	492b      	ldr	r1, [pc, #172]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
		GPIOG->OTYPER &= ~GPIOG->OTYPER;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <GPIO_OFF+0x2cc>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	43da      	mvns	r2, r3
 8001350:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4927      	ldr	r1, [pc, #156]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001356:	4013      	ands	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
		GPIOG->OSPEEDR &= ~GPIOG->OSPEEDR;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <GPIO_OFF+0x2cc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	43da      	mvns	r2, r3
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4923      	ldr	r1, [pc, #140]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001366:	4013      	ands	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
		GPIOG->PUPDR &= ~GPIOG->PUPDR;
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <GPIO_OFF+0x2cc>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	43da      	mvns	r2, r3
 8001370:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	491f      	ldr	r1, [pc, #124]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001376:	4013      	ands	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
		GPIOG->ODR &= ~GPIOG->ODR;
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <GPIO_OFF+0x2cc>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	43da      	mvns	r2, r3
 8001380:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	491b      	ldr	r1, [pc, #108]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001386:	4013      	ands	r3, r2
 8001388:	614b      	str	r3, [r1, #20]
		GPIOG->ASCR &= ~GPIOG->ASCR;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <GPIO_OFF+0x2cc>)
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	43da      	mvns	r2, r3
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	4917      	ldr	r1, [pc, #92]	@ (80013f4 <GPIO_OFF+0x2cc>)
 8001396:	4013      	ands	r3, r2
 8001398:	62cb      	str	r3, [r1, #44]	@ 0x2c

		GPIOH->MODER |= ~GPIOH->MODER;
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <GPIO_OFF+0x2d0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	43da      	mvns	r2, r3
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4914      	ldr	r1, [pc, #80]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
		GPIOH->OTYPER &= ~GPIOH->OTYPER;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4910      	ldr	r1, [pc, #64]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
		GPIOH->OSPEEDR &= ~GPIOH->OSPEEDR;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	43da      	mvns	r2, r3
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	608b      	str	r3, [r1, #8]
		GPIOH->PUPDR &= ~GPIOH->PUPDR;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	43da      	mvns	r2, r3
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	60cb      	str	r3, [r1, #12]
		GPIOH->ODR &= ~GPIOH->ODR;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <GPIO_OFF+0x2d0>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	e00d      	b.n	80013fc <GPIO_OFF+0x2d4>
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	48001000 	.word	0x48001000
 80013f0:	48001400 	.word	0x48001400
 80013f4:	48001800 	.word	0x48001800
 80013f8:	48001c00 	.word	0x48001c00
 80013fc:	43da      	mvns	r2, r3
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <GPIO_OFF+0x2fc>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4908      	ldr	r1, [pc, #32]	@ (8001424 <GPIO_OFF+0x2fc>)
 8001404:	4013      	ands	r3, r2
 8001406:	614b      	str	r3, [r1, #20]
		GPIOH->ASCR &= ~GPIOH->ASCR;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <GPIO_OFF+0x2fc>)
 800140a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140c:	43da      	mvns	r2, r3
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <GPIO_OFF+0x2fc>)
 8001410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001412:	4904      	ldr	r1, [pc, #16]	@ (8001424 <GPIO_OFF+0x2fc>)
 8001414:	4013      	ands	r3, r2
 8001416:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	48001c00 	.word	0x48001c00

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af02      	add	r7, sp, #8
	for(int i = 0; i < 82; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e007      	b.n	8001444 <main+0x1c>
		NVIC_DisableIRQ(i);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe51 	bl	80010e0 <__NVIC_DisableIRQ>
	for(int i = 0; i < 82; i++){
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b51      	cmp	r3, #81	@ 0x51
 8001448:	ddf4      	ble.n	8001434 <main+0xc>
	}

//
//	RCC->CFGR |= RCC_CFGR_STOPWUCK;
//	RCC->APB1SMENR1 |= RCC_APB1SMENR1_TIM2SMEN;
	RCC->CR &= ~RCC->CR;
 800144a:	4ba8      	ldr	r3, [pc, #672]	@ (80016ec <main+0x2c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	43da      	mvns	r2, r3
 8001450:	4ba6      	ldr	r3, [pc, #664]	@ (80016ec <main+0x2c4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	49a5      	ldr	r1, [pc, #660]	@ (80016ec <main+0x2c4>)
 8001456:	4013      	ands	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
	RCC->AHB1ENR &= ~RCC->AHB1ENR;
 800145a:	4ba4      	ldr	r3, [pc, #656]	@ (80016ec <main+0x2c4>)
 800145c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145e:	43da      	mvns	r2, r3
 8001460:	4ba2      	ldr	r3, [pc, #648]	@ (80016ec <main+0x2c4>)
 8001462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001464:	49a1      	ldr	r1, [pc, #644]	@ (80016ec <main+0x2c4>)
 8001466:	4013      	ands	r3, r2
 8001468:	648b      	str	r3, [r1, #72]	@ 0x48
	RCC->AHB2ENR &= ~RCC->AHB2ENR;
 800146a:	4ba0      	ldr	r3, [pc, #640]	@ (80016ec <main+0x2c4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	43da      	mvns	r2, r3
 8001470:	4b9e      	ldr	r3, [pc, #632]	@ (80016ec <main+0x2c4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	499d      	ldr	r1, [pc, #628]	@ (80016ec <main+0x2c4>)
 8001476:	4013      	ands	r3, r2
 8001478:	64cb      	str	r3, [r1, #76]	@ 0x4c
	RCC->AHB3ENR &= ~RCC->AHB3ENR;
 800147a:	4b9c      	ldr	r3, [pc, #624]	@ (80016ec <main+0x2c4>)
 800147c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800147e:	43da      	mvns	r2, r3
 8001480:	4b9a      	ldr	r3, [pc, #616]	@ (80016ec <main+0x2c4>)
 8001482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001484:	4999      	ldr	r1, [pc, #612]	@ (80016ec <main+0x2c4>)
 8001486:	4013      	ands	r3, r2
 8001488:	650b      	str	r3, [r1, #80]	@ 0x50
	RCC->APB1ENR1 &= ~RCC->APB1ENR1;
 800148a:	4b98      	ldr	r3, [pc, #608]	@ (80016ec <main+0x2c4>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	43da      	mvns	r2, r3
 8001490:	4b96      	ldr	r3, [pc, #600]	@ (80016ec <main+0x2c4>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	4995      	ldr	r1, [pc, #596]	@ (80016ec <main+0x2c4>)
 8001496:	4013      	ands	r3, r2
 8001498:	658b      	str	r3, [r1, #88]	@ 0x58
	RCC->APB1ENR2 &= ~RCC->APB1ENR2;
 800149a:	4b94      	ldr	r3, [pc, #592]	@ (80016ec <main+0x2c4>)
 800149c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149e:	43da      	mvns	r2, r3
 80014a0:	4b92      	ldr	r3, [pc, #584]	@ (80016ec <main+0x2c4>)
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	4991      	ldr	r1, [pc, #580]	@ (80016ec <main+0x2c4>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	65cb      	str	r3, [r1, #92]	@ 0x5c
	RCC->APB2ENR &= ~RCC->APB2ENR;
 80014aa:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <main+0x2c4>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ae:	43da      	mvns	r2, r3
 80014b0:	4b8e      	ldr	r3, [pc, #568]	@ (80016ec <main+0x2c4>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b4:	498d      	ldr	r1, [pc, #564]	@ (80016ec <main+0x2c4>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	660b      	str	r3, [r1, #96]	@ 0x60
	I2C1->CR1 &= ~I2C_CR1_PE;
 80014ba:	4b8d      	ldr	r3, [pc, #564]	@ (80016f0 <main+0x2c8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a8c      	ldr	r2, [pc, #560]	@ (80016f0 <main+0x2c8>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6013      	str	r3, [r2, #0]
	I2C3->CR1 &= ~I2C_CR1_PE;
 80014c6:	4b8b      	ldr	r3, [pc, #556]	@ (80016f4 <main+0x2cc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a8a      	ldr	r2, [pc, #552]	@ (80016f4 <main+0x2cc>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6013      	str	r3, [r2, #0]

	//Turn voltage to 1.0
	FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80014d2:	4b89      	ldr	r3, [pc, #548]	@ (80016f8 <main+0x2d0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a88      	ldr	r2, [pc, #544]	@ (80016f8 <main+0x2d0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6013      	str	r3, [r2, #0]
	PWR->CR1 &= ~PWR_CR1_VOS;
 80014de:	4b87      	ldr	r3, [pc, #540]	@ (80016fc <main+0x2d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a86      	ldr	r2, [pc, #536]	@ (80016fc <main+0x2d4>)
 80014e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e8:	6013      	str	r3, [r2, #0]
	PWR->CR1 |= PWR_CR1_VOS_1;
 80014ea:	4b84      	ldr	r3, [pc, #528]	@ (80016fc <main+0x2d4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a83      	ldr	r2, [pc, #524]	@ (80016fc <main+0x2d4>)
 80014f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014f4:	6013      	str	r3, [r2, #0]

	GPIO_OFF();
 80014f6:	f7ff fe17 	bl	8001128 <GPIO_OFF>


	//Turn off RTC
	RCC->BDCR &= ~RCC_BDCR_RTCEN;
 80014fa:	4b7c      	ldr	r3, [pc, #496]	@ (80016ec <main+0x2c4>)
 80014fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001500:	4a7a      	ldr	r2, [pc, #488]	@ (80016ec <main+0x2c4>)
 8001502:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
	RCC->BDCR &= ~RCC_BDCR_LSEON;
 800150a:	4b78      	ldr	r3, [pc, #480]	@ (80016ec <main+0x2c4>)
 800150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001510:	4a76      	ldr	r2, [pc, #472]	@ (80016ec <main+0x2c4>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	//LPUART
	LPUART1->CR1 &= ~LPUART1->CR1;
 800151a:	4b79      	ldr	r3, [pc, #484]	@ (8001700 <main+0x2d8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	43da      	mvns	r2, r3
 8001520:	4b77      	ldr	r3, [pc, #476]	@ (8001700 <main+0x2d8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4976      	ldr	r1, [pc, #472]	@ (8001700 <main+0x2d8>)
 8001526:	4013      	ands	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

	//Turn off all clocks in sleep and stop
	RCC->AHB1SMENR &= ~RCC->AHB1SMENR;
 800152a:	4b70      	ldr	r3, [pc, #448]	@ (80016ec <main+0x2c4>)
 800152c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800152e:	43da      	mvns	r2, r3
 8001530:	4b6e      	ldr	r3, [pc, #440]	@ (80016ec <main+0x2c4>)
 8001532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001534:	496d      	ldr	r1, [pc, #436]	@ (80016ec <main+0x2c4>)
 8001536:	4013      	ands	r3, r2
 8001538:	668b      	str	r3, [r1, #104]	@ 0x68
	RCC->AHB2SMENR &= ~RCC->AHB2SMENR;
 800153a:	4b6c      	ldr	r3, [pc, #432]	@ (80016ec <main+0x2c4>)
 800153c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800153e:	43da      	mvns	r2, r3
 8001540:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <main+0x2c4>)
 8001542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001544:	4969      	ldr	r1, [pc, #420]	@ (80016ec <main+0x2c4>)
 8001546:	4013      	ands	r3, r2
 8001548:	66cb      	str	r3, [r1, #108]	@ 0x6c
	RCC->APB1SMENR1 &= ~RCC->APB1SMENR1;
 800154a:	4b68      	ldr	r3, [pc, #416]	@ (80016ec <main+0x2c4>)
 800154c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800154e:	43da      	mvns	r2, r3
 8001550:	4b66      	ldr	r3, [pc, #408]	@ (80016ec <main+0x2c4>)
 8001552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001554:	4965      	ldr	r1, [pc, #404]	@ (80016ec <main+0x2c4>)
 8001556:	4013      	ands	r3, r2
 8001558:	678b      	str	r3, [r1, #120]	@ 0x78
	RCC->APB1SMENR2 &= ~RCC->APB1SMENR2;
 800155a:	4b64      	ldr	r3, [pc, #400]	@ (80016ec <main+0x2c4>)
 800155c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800155e:	43da      	mvns	r2, r3
 8001560:	4b62      	ldr	r3, [pc, #392]	@ (80016ec <main+0x2c4>)
 8001562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001564:	4961      	ldr	r1, [pc, #388]	@ (80016ec <main+0x2c4>)
 8001566:	4013      	ands	r3, r2
 8001568:	67cb      	str	r3, [r1, #124]	@ 0x7c
	RCC->APB2SMENR &= ~RCC->APB2SMENR;
 800156a:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <main+0x2c4>)
 800156c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001570:	43da      	mvns	r2, r3
 8001572:	4b5e      	ldr	r3, [pc, #376]	@ (80016ec <main+0x2c4>)
 8001574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001578:	495c      	ldr	r1, [pc, #368]	@ (80016ec <main+0x2c4>)
 800157a:	4013      	ands	r3, r2
 800157c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80




  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001580:	f000 fc4f 	bl	8001e22 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001584:	f000 f9fc 	bl	8001980 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f000 fa7e 	bl	8001a88 <MX_GPIO_Init>
  MX_SPI3_Init();
 800158c:	f000 fa3e 	bl	8001a0c <MX_SPI3_Init>

  GPIOA->OSPEEDR &= ~GPIOA->OSPEEDR;
 8001590:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	43da      	mvns	r2, r3
 8001598:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80015a2:	4013      	ands	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  GPIOB->OSPEEDR &= ~GPIOB->OSPEEDR;
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <main+0x2dc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <main+0x2dc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4954      	ldr	r1, [pc, #336]	@ (8001704 <main+0x2dc>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  GPIOC->OSPEEDR &= ~GPIOC->OSPEEDR;
 80015b6:	4b54      	ldr	r3, [pc, #336]	@ (8001708 <main+0x2e0>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <main+0x2e0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4951      	ldr	r1, [pc, #324]	@ (8001708 <main+0x2e0>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  GPIOD->OSPEEDR &= ~GPIOD->OSPEEDR;
 80015c6:	4b51      	ldr	r3, [pc, #324]	@ (800170c <main+0x2e4>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	43da      	mvns	r2, r3
 80015cc:	4b4f      	ldr	r3, [pc, #316]	@ (800170c <main+0x2e4>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494e      	ldr	r1, [pc, #312]	@ (800170c <main+0x2e4>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  GPIOE->OSPEEDR &= ~GPIOE->OSPEEDR;
 80015d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001710 <main+0x2e8>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	43da      	mvns	r2, r3
 80015dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001710 <main+0x2e8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494b      	ldr	r1, [pc, #300]	@ (8001710 <main+0x2e8>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]



  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f000 ffa4 	bl	800253c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80015f4:	200a      	movs	r0, #10
 80015f6:	f000 fc89 	bl	8001f0c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f000 ff9a 	bl	800253c <HAL_GPIO_WritePin>

  ble_init();
 8001608:	f7fe fe3a 	bl	8000280 <ble_init>
//  timer_init(TIM2);
//
//  //Set the Timer2 Interrup,t to a period of 50 ms
//  timer_set_ms(TIM2, 1227);

  lptim_init();
 800160c:	f7ff fc56 	bl	8000ebc <lptim_init>
  lptim_set_ms(2500);
 8001610:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001614:	f7ff fcba 	bl	8000f8c <lptim_set_ms>

  // Initialize I2C2 in master mode to connect with the accelerometer
  i2c_init();
 8001618:	f7ff faa6 	bl	8000b68 <i2c_init>

  // Initialize the accelerometer
  lsm6dsl_init();
 800161c:	f7ff fcca 	bl	8000fb4 <lsm6dsl_init>

  //initially set it undiscoverable
  setDiscoverability(0);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fa7b 	bl	8000b1c <setDiscoverability>


  HAL_Delay(10);
 8001626:	200a      	movs	r0, #10
 8001628:	f000 fc70 	bl	8001f0c <HAL_Delay>


  while (1)
  {
//	  	  	//Enable GPIOB Clock
	  		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800162c:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <main+0x2c4>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	4a2e      	ldr	r2, [pc, #184]	@ (80016ec <main+0x2c4>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  		//Enable I2C2 Clock
	  		RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <main+0x2c4>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	4a2b      	ldr	r2, [pc, #172]	@ (80016ec <main+0x2c4>)
 800163e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001642:	6593      	str	r3, [r2, #88]	@ 0x58

	  	  	//Read the current accelerometer X, Y, Z Values
	  		lsm6dsl_read_xyz(&currX, &currY, &currZ);
 8001644:	4a33      	ldr	r2, [pc, #204]	@ (8001714 <main+0x2ec>)
 8001646:	4934      	ldr	r1, [pc, #208]	@ (8001718 <main+0x2f0>)
 8001648:	4834      	ldr	r0, [pc, #208]	@ (800171c <main+0x2f4>)
 800164a:	f7ff fcda 	bl	8001002 <lsm6dsl_read_xyz>
	  		// 16393 = 1G

//	  		//Enable GPIOB Clock
	  		RCC->AHB2ENR &= ~RCC_AHB2ENR_GPIOBEN;
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <main+0x2c4>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a26      	ldr	r2, [pc, #152]	@ (80016ec <main+0x2c4>)
 8001654:	f023 0302 	bic.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c

			//Enable I2C2 Clock
			RCC->APB1ENR1 &= ~RCC_APB1ENR1_I2C2EN;
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <main+0x2c4>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	4a23      	ldr	r2, [pc, #140]	@ (80016ec <main+0x2c4>)
 8001660:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001664:	6593      	str	r3, [r2, #88]	@ 0x58


	  		// If the difference of the current and previous values X, Y, Z acceleration values are
	  		// outside the margin of error, increment the changeCount
	  		// Otherwise set the change count to 0
	  		if((currX >= prevX - sensitivity)& (currX <= prevX + sensitivity)&
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <main+0x2f4>)
 8001668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166c:	461a      	mov	r2, r3
 800166e:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <main+0x2f8>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001678:	429a      	cmp	r2, r3
 800167a:	bfac      	ite	ge
 800167c:	2301      	movge	r3, #1
 800167e:	2300      	movlt	r3, #0
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <main+0x2f4>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	4619      	mov	r1, r3
 800168a:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <main+0x2f8>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8001694:	4299      	cmp	r1, r3
 8001696:	bfd4      	ite	le
 8001698:	2301      	movle	r3, #1
 800169a:	2300      	movgt	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4013      	ands	r3, r2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
	  				(currY >= prevY - sensitivity)&(currY <= prevY + sensitivity)&
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <main+0x2f0>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <main+0x2fc>)
 80016ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b2:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80016b6:	4299      	cmp	r1, r3
 80016b8:	bfac      	ite	ge
 80016ba:	2301      	movge	r3, #1
 80016bc:	2300      	movlt	r3, #0
 80016be:	b2db      	uxtb	r3, r3
	  		if((currX >= prevX - sensitivity)& (currX <= prevX + sensitivity)&
 80016c0:	4013      	ands	r3, r2
	  				(currY >= prevY - sensitivity)&(currY <= prevY + sensitivity)&
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <main+0x2f0>)
 80016c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <main+0x2fc>)
 80016cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016d0:	f502 6296 	add.w	r2, r2, #1200	@ 0x4b0
 80016d4:	4291      	cmp	r1, r2
 80016d6:	bfd4      	ite	le
 80016d8:	2201      	movle	r2, #1
 80016da:	2200      	movgt	r2, #0
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4013      	ands	r3, r2
	  				(currZ >= prevZ - sensitivity)& (currZ <= prevZ + sensitivity))
 80016e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <main+0x2ec>)
 80016e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016e6:	4611      	mov	r1, r2
 80016e8:	e01e      	b.n	8001728 <main+0x300>
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40005c00 	.word	0x40005c00
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40007000 	.word	0x40007000
 8001700:	40008000 	.word	0x40008000
 8001704:	48000400 	.word	0x48000400
 8001708:	48000800 	.word	0x48000800
 800170c:	48000c00 	.word	0x48000c00
 8001710:	48001000 	.word	0x48001000
 8001714:	20000348 	.word	0x20000348
 8001718:	20000346 	.word	0x20000346
 800171c:	20000344 	.word	0x20000344
 8001720:	2000034a 	.word	0x2000034a
 8001724:	2000034c 	.word	0x2000034c
 8001728:	4a79      	ldr	r2, [pc, #484]	@ (8001910 <main+0x4e8>)
 800172a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800172e:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8001732:	4291      	cmp	r1, r2
 8001734:	bfac      	ite	ge
 8001736:	2201      	movge	r2, #1
 8001738:	2200      	movlt	r2, #0
 800173a:	b2d2      	uxtb	r2, r2
	  				(currY >= prevY - sensitivity)&(currY <= prevY + sensitivity)&
 800173c:	4013      	ands	r3, r2
	  				(currZ >= prevZ - sensitivity)& (currZ <= prevZ + sensitivity))
 800173e:	4a75      	ldr	r2, [pc, #468]	@ (8001914 <main+0x4ec>)
 8001740:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001744:	4611      	mov	r1, r2
 8001746:	4a72      	ldr	r2, [pc, #456]	@ (8001910 <main+0x4e8>)
 8001748:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174c:	f502 6296 	add.w	r2, r2, #1200	@ 0x4b0
 8001750:	4291      	cmp	r1, r2
 8001752:	bfd4      	ite	le
 8001754:	2201      	movle	r2, #1
 8001756:	2200      	movgt	r2, #0
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	4013      	ands	r3, r2
	  		if((currX >= prevX - sensitivity)& (currX <= prevX + sensitivity)&
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <main+0x340>
	  		{
	  			changeCount = 0;
 8001760:	4b6d      	ldr	r3, [pc, #436]	@ (8001918 <main+0x4f0>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e004      	b.n	8001772 <main+0x34a>
	  		}else{
	  			changeCount++;
 8001768:	4b6b      	ldr	r3, [pc, #428]	@ (8001918 <main+0x4f0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a6a      	ldr	r2, [pc, #424]	@ (8001918 <main+0x4f0>)
 8001770:	6013      	str	r3, [r2, #0]
	  		}

	  		// If the changeCount is large than 8, we considered it moved,
	  		// set the lostCount and changeCount to 0
	  		if(changeCount > 0){
 8001772:	4b69      	ldr	r3, [pc, #420]	@ (8001918 <main+0x4f0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dd05      	ble.n	8001786 <main+0x35e>
	  			lostCount = 0;
 800177a:	4b68      	ldr	r3, [pc, #416]	@ (800191c <main+0x4f4>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
	  			changeCount = 0;
 8001780:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <main+0x4f0>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

	  		// Print the values of lostCount and changeCount and the current accelerometer values
	  		//printf("lostCount: %u      changeCount: %u      %d, %d, %d \n", lostCount, changeCount, currX, currY, currZ);

	  		// Set previous X, Y, Z acceleration values to the current values for comparison in the next loop
	  		prevX = currX;
 8001786:	4b66      	ldr	r3, [pc, #408]	@ (8001920 <main+0x4f8>)
 8001788:	f9b3 2000 	ldrsh.w	r2, [r3]
 800178c:	4b65      	ldr	r3, [pc, #404]	@ (8001924 <main+0x4fc>)
 800178e:	801a      	strh	r2, [r3, #0]
	  		prevY = currY;
 8001790:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <main+0x500>)
 8001792:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001796:	4b65      	ldr	r3, [pc, #404]	@ (800192c <main+0x504>)
 8001798:	801a      	strh	r2, [r3, #0]
	  		prevZ = currZ;
 800179a:	4b5e      	ldr	r3, [pc, #376]	@ (8001914 <main+0x4ec>)
 800179c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <main+0x4e8>)
 80017a2:	801a      	strh	r2, [r3, #0]



	  		//Default code
	  		if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80017a4:	4b62      	ldr	r3, [pc, #392]	@ (8001930 <main+0x508>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d114      	bne.n	80017d8 <main+0x3b0>
 80017ae:	2140      	movs	r1, #64	@ 0x40
 80017b0:	4860      	ldr	r0, [pc, #384]	@ (8001934 <main+0x50c>)
 80017b2:	f000 feab 	bl	800250c <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00d      	beq.n	80017d8 <main+0x3b0>
	  			RCC->CR |= RCC_CR_MSIRANGE_7;
 80017bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001938 <main+0x510>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001938 <main+0x510>)
 80017c2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80017c6:	6013      	str	r3, [r2, #0]
	  			catchBLE();
 80017c8:	f7fe ff70 	bl	80006ac <catchBLE>
	  			RCC->CR |= RCC_CR_MSIRANGE_1;
 80017cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001938 <main+0x510>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a59      	ldr	r2, [pc, #356]	@ (8001938 <main+0x510>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	6013      	str	r3, [r2, #0]
	  		//--> used the discoverability variable

	  		// If the lostCount is lower than the timeToBlink (1 min), which indicates its not lost,
	  		//then disconnect the BLE and make it so its not discoverable by setting the discoverability to 0
	  		//Else set the discoverability to 0 and the IRQ handler will set discoverability to 1
	  		if((lostCount < timeToBlink) & (nonDiscoverable == 0)){
 80017d8:	4b50      	ldr	r3, [pc, #320]	@ (800191c <main+0x4f4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	bf94      	ite	ls
 80017e0:	2301      	movls	r3, #1
 80017e2:	2300      	movhi	r3, #0
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b52      	ldr	r3, [pc, #328]	@ (8001930 <main+0x508>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4013      	ands	r3, r2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d014      	beq.n	8001828 <main+0x400>
	  			RCC->CR |= RCC_CR_MSIRANGE_7;
 80017fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <main+0x510>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a4d      	ldr	r2, [pc, #308]	@ (8001938 <main+0x510>)
 8001804:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001808:	6013      	str	r3, [r2, #0]
	  			disconnectBLE();
 800180a:	f7ff f92f 	bl	8000a6c <disconnectBLE>
	  			setDiscoverability(0);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff f984 	bl	8000b1c <setDiscoverability>
	  			//standbyBle();
	  			RCC->CR |= RCC_CR_MSIRANGE_1;
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <main+0x510>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a47      	ldr	r2, [pc, #284]	@ (8001938 <main+0x510>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6013      	str	r3, [r2, #0]
	  			nonDiscoverable = 1;
 8001820:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <main+0x508>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e002      	b.n	800182e <main+0x406>
	  		}else{
	  			nonDiscoverable = 0;
 8001828:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <main+0x508>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]

	  		//Interrupt fires every 50ms
			// If the lostCount is larger or equal than the timeToBlink (been a minute or over),
			//It indicates that is lost and sets the discoverability to 1 to allow it to be connect through BLE
			//Every 10 seconds send a message with PTGui lost with the amount of seconds has passed in lost mode
			if( (lostCount >= timeToBlink) && ((lostCount%(1)) == 0) ){
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <main+0x4f4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d948      	bls.n	80018c8 <main+0x4a0>
 8001836:	4b39      	ldr	r3, [pc, #228]	@ (800191c <main+0x4f4>)
 8001838:	681b      	ldr	r3, [r3, #0]

				RCC->CR |= RCC_CR_MSIRANGE_7;
 800183a:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <main+0x510>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a3e      	ldr	r2, [pc, #248]	@ (8001938 <main+0x510>)
 8001840:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001844:	6013      	str	r3, [r2, #0]

				setDiscoverability(1);
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff f968 	bl	8000b1c <setDiscoverability>

				RCC->CR |= RCC_CR_MSIRANGE_1;
 800184c:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <main+0x510>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a39      	ldr	r2, [pc, #228]	@ (8001938 <main+0x510>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6013      	str	r3, [r2, #0]
				if(!nonDiscoverable){
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <main+0x508>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d132      	bne.n	80018c8 <main+0x4a0>
					  // Send a string to the NORDIC UART service, remember to not include the newline
					  unsigned char test_str[20] = "PTGui lost ";
 8001862:	4a36      	ldr	r2, [pc, #216]	@ (800193c <main+0x514>)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	ca07      	ldmia	r2, {r0, r1, r2}
 8001868:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
					  //Subtract and divide down the lostCount to get the amount of seconds after being lost
					  // Store the number of seconds in lost mode in lostCountDiv
					  int lostCountDiv = (lostCount-timeToBlink)*10;
 8001876:	4b29      	ldr	r3, [pc, #164]	@ (800191c <main+0x4f4>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	3b3c      	subs	r3, #60	@ 0x3c
 8001884:	61bb      	str	r3, [r7, #24]
					  //Concatenate the lostCountDiv with the message needed to be sent
					  snprintf(test_str, 20, "PTGui lost %ds ", lostCountDiv);
 8001886:	1d38      	adds	r0, r7, #4
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <main+0x518>)
 800188c:	2114      	movs	r1, #20
 800188e:	f002 fb19 	bl	8003ec4 <sniprintf>
					  //Send the message through BLE
					  RCC->CR |= RCC_CR_MSIRANGE_7;
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <main+0x510>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a28      	ldr	r2, [pc, #160]	@ (8001938 <main+0x510>)
 8001898:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800189c:	6013      	str	r3, [r2, #0]
					  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(test_str)-1, test_str);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fc95 	bl	80001d0 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	3b01      	subs	r3, #1
 80018aa:	461a      	mov	r2, r3
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	4923      	ldr	r1, [pc, #140]	@ (8001944 <main+0x51c>)
 80018b6:	4824      	ldr	r0, [pc, #144]	@ (8001948 <main+0x520>)
 80018b8:	f7ff f884 	bl	80009c4 <updateCharValue>
					  RCC->CR |= RCC_CR_MSIRANGE_1;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <main+0x510>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <main+0x510>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
				 }
			}

	  		//Clear LPMS bits to set them to "000” (Stop mode)
	  		PWR->CR1 &= ~PWR_CR1_LPMS;
 80018c8:	4b20      	ldr	r3, [pc, #128]	@ (800194c <main+0x524>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1f      	ldr	r2, [pc, #124]	@ (800194c <main+0x524>)
 80018ce:	f023 0307 	bic.w	r3, r3, #7
 80018d2:	6013      	str	r3, [r2, #0]
	  		PWR->CR1 |= PWR_CR1_LPMS_STOP2;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <main+0x524>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <main+0x524>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6013      	str	r3, [r2, #0]

	  		// Prepare to enter deep sleep mode (Stop mode)
	  		// Set the SLEEPDEEP bit in the System Control Register
	  		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <main+0x528>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <main+0x528>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6113      	str	r3, [r2, #16]
	  		// Execute the Wait-For-Interrupt instruction.
	  		// This puts the CPU into deep sleep mode until an interrupt occurs.
	  		HAL_SuspendTick();
 80018ec:	f000 fb32 	bl	8001f54 <HAL_SuspendTick>
//	  		FLASH->ACR |= FLASH_ACR_SLEEP_PD;
	  		RCC->CR |= RCC_CR_MSIRANGE_1;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <main+0x510>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <main+0x510>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6013      	str	r3, [r2, #0]
//	  		GPIO_OFF();
//	  		PWR->CR1 |= PWR_CR1_LPR;
//	  		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	  		__WFI();
 80018fc:	bf30      	wfi
	  		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <main+0x528>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <main+0x528>)
 8001904:	f023 0304 	bic.w	r3, r3, #4
 8001908:	6113      	str	r3, [r2, #16]
//	  		while((PWR->SR2 & PWR_SR2_REGLPF) > 0){
//
//	  		}
//	  		RCC->CR |= RCC_CR_MSIRANGE_;
	  		//RCC->APB1ENR1 &= ~RCC_APB1ENR1_TIM2EN;
	  		HAL_ResumeTick();
 800190a:	f000 fb33 	bl	8001f74 <HAL_ResumeTick>
	  		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800190e:	e68d      	b.n	800162c <main+0x204>
 8001910:	2000034e 	.word	0x2000034e
 8001914:	20000348 	.word	0x20000348
 8001918:	20000354 	.word	0x20000354
 800191c:	20000350 	.word	0x20000350
 8001920:	20000344 	.word	0x20000344
 8001924:	2000034a 	.word	0x2000034a
 8001928:	20000346 	.word	0x20000346
 800192c:	2000034c 	.word	0x2000034c
 8001930:	20000358 	.word	0x20000358
 8001934:	48001000 	.word	0x48001000
 8001938:	40021000 	.word	0x40021000
 800193c:	08004708 	.word	0x08004708
 8001940:	080046f8 	.word	0x080046f8
 8001944:	200002d4 	.word	0x200002d4
 8001948:	200002cc 	.word	0x200002cc
 800194c:	40007000 	.word	0x40007000
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <LPTIM1_IRQHandler>:
//	// Reset update flag.
//	TIM2->SR &= ~(TIM_SR_UIF);
//
//}

void LPTIM1_IRQHandler(){
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
//		else{
//			led_set = 1;
//		}
//		leds_set(led_set);

	lostCount++;
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <LPTIM1_IRQHandler+0x24>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <LPTIM1_IRQHandler+0x24>)
 8001960:	6013      	str	r3, [r2, #0]
	// Reset update flag.
	LPTIM1->ICR |= LPTIM_ICR_ARRMCF;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LPTIM1_IRQHandler+0x28>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <LPTIM1_IRQHandler+0x28>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6053      	str	r3, [r2, #4]

}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000350 	.word	0x20000350
 800197c:	40007c00 	.word	0x40007c00

08001980 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	@ 0x58
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	2244      	movs	r2, #68	@ 0x44
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f002 facc 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019a6:	f000 fe13 	bl	80025d0 <HAL_PWREx_ControlVoltageScaling>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019b0:	f000 f902 	bl	8001bb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019b4:	2310      	movs	r3, #16
 80019b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80019c0:	2370      	movs	r3, #112	@ 0x70
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fe55 	bl	800267c <HAL_RCC_OscConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80019d8:	f000 f8ee 	bl	8001bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019dc:	230f      	movs	r3, #15
 80019de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 fa1d 	bl	8002e34 <HAL_RCC_ClockConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a00:	f000 f8da 	bl	8001bb8 <Error_Handler>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3758      	adds	r7, #88	@ 0x58
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <MX_SPI3_Init+0x78>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a66:	2208      	movs	r2, #8
 8001a68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_SPI3_Init+0x74>)
 8001a6c:	f001 fbce 	bl	800320c <HAL_SPI_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a76:	f000 f89f 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002e0 	.word	0x200002e0
 8001a84:	40003c00 	.word	0x40003c00

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9e:	4b43      	ldr	r3, [pc, #268]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	4a42      	ldr	r2, [pc, #264]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aaa:	4b40      	ldr	r3, [pc, #256]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	4a3c      	ldr	r2, [pc, #240]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	4a36      	ldr	r2, [pc, #216]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ada:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a30      	ldr	r2, [pc, #192]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0a:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2120      	movs	r1, #32
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1e:	f000 fd0d 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b28:	4821      	ldr	r0, [pc, #132]	@ (8001bb0 <MX_GPIO_Init+0x128>)
 8001b2a:	f000 fd07 	bl	800253c <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b38:	f000 fd00 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4818      	ldr	r0, [pc, #96]	@ (8001bb4 <MX_GPIO_Init+0x12c>)
 8001b52:	f000 fb31 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001b56:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b72:	f000 fb21 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <MX_GPIO_Init+0x128>)
 8001b90:	f000 fb12 	bl	80021b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2017      	movs	r0, #23
 8001b9a:	f000 fad6 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b9e:	2017      	movs	r0, #23
 8001ba0:	f000 faef 	bl	8002182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	@ 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	48001000 	.word	0x48001000

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <Error_Handler+0x8>

08001bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <HAL_MspInit+0x44>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bce:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <HAL_MspInit+0x44>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_MspInit+0x44>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_MspInit+0x44>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_MspInit+0x44>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_MspInit+0x44>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <HAL_SPI_MspInit+0x7c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d128      	bne.n	8001c80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_SPI_MspInit+0x80>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c70:	2306      	movs	r3, #6
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <HAL_SPI_MspInit+0x84>)
 8001c7c:	f000 fa9c 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	@ 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40003c00 	.word	0x40003c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	48000800 	.word	0x48000800

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <MemManage_Handler+0x4>

08001cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cea:	f000 f8ef 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <EXTI9_5_IRQHandler+0x14>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001cfe:	2040      	movs	r0, #64	@ 0x40
 8001d00:	f000 fc34 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200002dc 	.word	0x200002dc

08001d0c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x50>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x16>
		heap_end = &end;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <_sbrk+0x50>)
 8001d1e:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <_sbrk+0x54>)
 8001d20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <_sbrk+0x50>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <_sbrk+0x50>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	466a      	mov	r2, sp
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d907      	bls.n	8001d46 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d36:	f002 f911 	bl	8003f5c <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	e006      	b.n	8001d54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <_sbrk+0x50>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <_sbrk+0x50>)
 8001d50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000035c 	.word	0x2000035c
 8001d60:	200004b0 	.word	0x200004b0

08001d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <SystemInit+0x64>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <SystemInit+0x64>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <SystemInit+0x68>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a13      	ldr	r2, [pc, #76]	@ (8001dcc <SystemInit+0x68>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <SystemInit+0x68>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <SystemInit+0x68>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dcc <SystemInit+0x68>)
 8001d90:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001d94:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001d98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <SystemInit+0x68>)
 8001d9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <SystemInit+0x68>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <SystemInit+0x68>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <SystemInit+0x68>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <SystemInit+0x64>)
 8001db6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dba:	609a      	str	r2, [r3, #8]
#endif
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd4:	f7ff ffc6 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dda:	490d      	ldr	r1, [pc, #52]	@ (8001e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <LoopForever+0xe>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e1c <LoopForever+0x16>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f002 f8b3 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e02:	f7ff fb11 	bl	8001428 <main>

08001e06 <LoopForever>:

LoopForever:
    b LoopForever
 8001e06:	e7fe      	b.n	8001e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001e14:	080047a0 	.word	0x080047a0
  ldr r2, =_sbss
 8001e18:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001e1c:	200004ac 	.word	0x200004ac

08001e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_2_IRQHandler>

08001e22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f981 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f80e 	bl	8001e54 <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	e001      	b.n	8001e48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e44:	f7ff febe 	bl	8001bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e60:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_InitTick+0x6c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <HAL_InitTick+0x70>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <HAL_InitTick+0x6c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f98d 	bl	800219e <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d809      	bhi.n	8001ea4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f000 f957 	bl	800214a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <HAL_InitTick+0x74>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e007      	b.n	8001eb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e004      	b.n	8001eb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e001      	b.n	8001eb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000150 	.word	0x20000150
 8001ec4:	20000148 	.word	0x20000148
 8001ec8:	2000014c 	.word	0x2000014c

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000150 	.word	0x20000150
 8001ef0:	20000360 	.word	0x20000360

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000360 	.word	0x20000360

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

   while ((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000150 	.word	0x20000150

08001f54 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_SuspendTick+0x1c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_SuspendTick+0x1c>)
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_ResumeTick+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_ResumeTick+0x1c>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <__NVIC_SetPriorityGrouping>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	@ (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	@ (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	@ (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e17f      	b.n	80024c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8171 	beq.w	80024c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x40>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d118      	bne.n	8002298 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d017      	beq.n	80022d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80ac 	beq.w	80024c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	4b5f      	ldr	r3, [pc, #380]	@ (80024e8 <HAL_GPIO_Init+0x330>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	4a5e      	ldr	r2, [pc, #376]	@ (80024e8 <HAL_GPIO_Init+0x330>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6613      	str	r3, [r2, #96]	@ 0x60
 8002376:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <HAL_GPIO_Init+0x330>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002382:	4a5a      	ldr	r2, [pc, #360]	@ (80024ec <HAL_GPIO_Init+0x334>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x242>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	@ (80024f0 <HAL_GPIO_Init+0x338>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x23e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	@ (80024f4 <HAL_GPIO_Init+0x33c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x23a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	@ (80024f8 <HAL_GPIO_Init+0x340>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x236>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_GPIO_Init+0x344>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x232>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_GPIO_Init+0x348>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x34c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x22a>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023fa:	2300      	movs	r3, #0
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240c:	4937      	ldr	r1, [pc, #220]	@ (80024ec <HAL_GPIO_Init+0x334>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_GPIO_Init+0x350>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800243e:	4a32      	ldr	r2, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002444:	4b30      	ldr	r3, [pc, #192]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002468:	4a27      	ldr	r2, [pc, #156]	@ (8002508 <HAL_GPIO_Init+0x350>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800246e:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x350>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002498:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_GPIO_Init+0x350>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_GPIO_Init+0x350>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae78 	bne.w	80021c8 <HAL_GPIO_Init+0x10>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00
 80024fc:	48001000 	.word	0x48001000
 8002500:	48001400 	.word	0x48001400
 8002504:	48001800 	.word	0x48001800
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002558:	e002      	b.n	8002560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002582:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f806 	bl	800259c <HAL_GPIO_EXTI_Callback>
  }
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40010400 	.word	0x40010400

0800259c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <HAL_PWREx_GetVoltageRange+0x18>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025de:	d130      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ec:	d038      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2232      	movs	r2, #50	@ 0x32
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	3301      	adds	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002614:	e002      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002628:	d102      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263c:	d110      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e00f      	b.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800264e:	d007      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002658:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800265e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000
 8002674:	20000148 	.word	0x20000148
 8002678:	431bde83 	.word	0x431bde83

0800267c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e3ca      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268e:	4b97      	ldr	r3, [pc, #604]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002698:	4b94      	ldr	r3, [pc, #592]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80e4 	beq.w	8002878 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_RCC_OscConfig+0x4a>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	f040 808b 	bne.w	80027d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	f040 8087 	bne.w	80027d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c6:	4b89      	ldr	r3, [pc, #548]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x62>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e3a2      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	4b82      	ldr	r3, [pc, #520]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_RCC_OscConfig+0x7c>
 80026ee:	4b7f      	ldr	r3, [pc, #508]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026f6:	e005      	b.n	8002704 <HAL_RCC_OscConfig+0x88>
 80026f8:	4b7c      	ldr	r3, [pc, #496]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002704:	4293      	cmp	r3, r2
 8002706:	d223      	bcs.n	8002750 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd1d 	bl	800314c <RCC_SetFlashLatencyFromMSIRange>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e383      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271c:	4b73      	ldr	r3, [pc, #460]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a72      	ldr	r2, [pc, #456]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	496d      	ldr	r1, [pc, #436]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273a:	4b6c      	ldr	r3, [pc, #432]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4968      	ldr	r1, [pc, #416]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
 800274e:	e025      	b.n	800279c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002750:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4960      	ldr	r1, [pc, #384]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800276e:	4b5f      	ldr	r3, [pc, #380]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	495b      	ldr	r1, [pc, #364]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fcdd 	bl	800314c <RCC_SetFlashLatencyFromMSIRange>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e343      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279c:	f000 fc4a 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b52      	ldr	r3, [pc, #328]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4950      	ldr	r1, [pc, #320]	@ (80028f0 <HAL_RCC_OscConfig+0x274>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	4a4e      	ldr	r2, [pc, #312]	@ (80028f4 <HAL_RCC_OscConfig+0x278>)
 80027ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027bc:	4b4e      	ldr	r3, [pc, #312]	@ (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fb47 	bl	8001e54 <HAL_InitTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d052      	beq.n	8002876 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	e327      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d032      	beq.n	8002842 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027dc:	4b43      	ldr	r3, [pc, #268]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a42      	ldr	r2, [pc, #264]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fb84 	bl	8001ef4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f0:	f7ff fb80 	bl	8001ef4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e310      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002802:	4b3a      	ldr	r3, [pc, #232]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280e:	4b37      	ldr	r3, [pc, #220]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a36      	ldr	r2, [pc, #216]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b34      	ldr	r3, [pc, #208]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4931      	ldr	r1, [pc, #196]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282c:	4b2f      	ldr	r3, [pc, #188]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	492c      	ldr	r1, [pc, #176]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	e01a      	b.n	8002878 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002842:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a29      	ldr	r2, [pc, #164]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284e:	f7ff fb51 	bl	8001ef4 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002856:	f7ff fb4d 	bl	8001ef4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e2dd      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x1da>
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002876:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d074      	beq.n	800296e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b08      	cmp	r3, #8
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x21a>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d10e      	bne.n	80028ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d10b      	bne.n	80028ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002896:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d064      	beq.n	800296c <HAL_RCC_OscConfig+0x2f0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d160      	bne.n	800296c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e2ba      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x24a>
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e026      	b.n	8002914 <HAL_RCC_OscConfig+0x298>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ce:	d115      	bne.n	80028fc <HAL_RCC_OscConfig+0x280>
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80028d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b03      	ldr	r3, [pc, #12]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a02      	ldr	r2, [pc, #8]	@ (80028ec <HAL_RCC_OscConfig+0x270>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x298>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	0800471c 	.word	0x0800471c
 80028f4:	20000148 	.word	0x20000148
 80028f8:	2000014c 	.word	0x2000014c
 80028fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a9f      	ldr	r2, [pc, #636]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b9d      	ldr	r3, [pc, #628]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a9c      	ldr	r2, [pc, #624]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 800290e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff faea 	bl	8001ef4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fae6 	bl	8001ef4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e276      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002936:	4b92      	ldr	r3, [pc, #584]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x2a8>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff fad6 	bl	8001ef4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff fad2 	bl	8001ef4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	@ 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e262      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295e:	4b88      	ldr	r3, [pc, #544]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x2d0>
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d060      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d005      	beq.n	800298c <HAL_RCC_OscConfig+0x310>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d119      	bne.n	80029ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d116      	bne.n	80029ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x328>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e23f      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b76      	ldr	r3, [pc, #472]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4973      	ldr	r1, [pc, #460]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b8:	e040      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d023      	beq.n	8002a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff fa91 	bl	8001ef4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7ff fa8d 	bl	8001ef4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e21d      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	4b65      	ldr	r3, [pc, #404]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b62      	ldr	r3, [pc, #392]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	495f      	ldr	r1, [pc, #380]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e018      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff fa6d 	bl	8001ef4 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7ff fa69 	bl	8001ef4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1f9      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d03c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a50:	4b4b      	ldr	r3, [pc, #300]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a56:	4a4a      	ldr	r2, [pc, #296]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff fa48 	bl	8001ef4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff fa44 	bl	8001ef4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1d4      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7a:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ef      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3ec>
 8002a88:	e01b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a90:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fa2b 	bl	8001ef4 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fa27 	bl	8001ef4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1b7      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab4:	4b32      	ldr	r3, [pc, #200]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ef      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a6 	beq.w	8002c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10d      	bne.n	8002afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	4a26      	ldr	r2, [pc, #152]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aec:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <HAL_RCC_OscConfig+0x508>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d118      	bne.n	8002b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b08:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_RCC_OscConfig+0x508>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_RCC_OscConfig+0x508>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b14:	f7ff f9ee 	bl	8001ef4 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7ff f9ea 	bl	8001ef4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e17a      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_RCC_OscConfig+0x508>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4d8>
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b52:	e029      	b.n	8002ba8 <HAL_RCC_OscConfig+0x52c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d115      	bne.n	8002b88 <HAL_RCC_OscConfig+0x50c>
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b62:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b6c:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	4a03      	ldr	r2, [pc, #12]	@ (8002b80 <HAL_RCC_OscConfig+0x504>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b7c:	e014      	b.n	8002ba8 <HAL_RCC_OscConfig+0x52c>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
 8002b88:	4b9c      	ldr	r3, [pc, #624]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	4a9b      	ldr	r2, [pc, #620]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b98:	4b98      	ldr	r3, [pc, #608]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	4a97      	ldr	r2, [pc, #604]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d016      	beq.n	8002bde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f9a0 	bl	8001ef4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7ff f99c 	bl	8001ef4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e12a      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	4b8b      	ldr	r3, [pc, #556]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ed      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x53c>
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7ff f989 	bl	8001ef4 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7ff f985 	bl	8001ef4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e113      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfc:	4b7f      	ldr	r3, [pc, #508]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ed      	bne.n	8002be6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b7a      	ldr	r3, [pc, #488]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	4a79      	ldr	r2, [pc, #484]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80fe 	beq.w	8002e22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	f040 80d0 	bne.w	8002dd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c30:	4b72      	ldr	r3, [pc, #456]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d130      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d127      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11f      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c70:	2a07      	cmp	r2, #7
 8002c72:	bf14      	ite	ne
 8002c74:	2201      	movne	r2, #1
 8002c76:	2200      	moveq	r2, #0
 8002c78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d113      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d06e      	beq.n	8002d84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d069      	beq.n	8002d80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cac:	4b53      	ldr	r3, [pc, #332]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cb8:	4b50      	ldr	r3, [pc, #320]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0ad      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd4:	f7ff f90e 	bl	8001ef4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7ff f90a 	bl	8001ef4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e09a      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cee:	4b43      	ldr	r3, [pc, #268]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cfa:	4b40      	ldr	r3, [pc, #256]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b40      	ldr	r3, [pc, #256]	@ (8002e00 <HAL_RCC_OscConfig+0x784>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	4311      	orrs	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d14:	0212      	lsls	r2, r2, #8
 8002d16:	4311      	orrs	r1, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d1c:	0852      	lsrs	r2, r2, #1
 8002d1e:	3a01      	subs	r2, #1
 8002d20:	0552      	lsls	r2, r2, #21
 8002d22:	4311      	orrs	r1, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d28:	0852      	lsrs	r2, r2, #1
 8002d2a:	3a01      	subs	r2, #1
 8002d2c:	0652      	lsls	r2, r2, #25
 8002d2e:	4311      	orrs	r1, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d34:	0912      	lsrs	r2, r2, #4
 8002d36:	0452      	lsls	r2, r2, #17
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	4930      	ldr	r1, [pc, #192]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d40:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2d      	ldr	r2, [pc, #180]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d58:	f7ff f8cc 	bl	8001ef4 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7ff f8c8 	bl	8001ef4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e058      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d7e:	e050      	b.n	8002e22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04f      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d148      	bne.n	8002e22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d9c:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a16      	ldr	r2, [pc, #88]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da8:	f7ff f8a4 	bl	8001ef4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7ff f8a0 	bl	8001ef4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e030      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x734>
 8002dce:	e028      	b.n	8002e22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d023      	beq.n	8002e1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <HAL_RCC_OscConfig+0x780>)
 8002ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7ff f887 	bl	8001ef4 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de8:	e00c      	b.n	8002e04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7ff f883 	bl	8001ef4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d905      	bls.n	8002e04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e013      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <HAL_RCC_OscConfig+0x7b0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ec      	bne.n	8002dea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_RCC_OscConfig+0x7b0>)
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	4905      	ldr	r1, [pc, #20]	@ (8002e2c <HAL_RCC_OscConfig+0x7b0>)
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_OscConfig+0x7b4>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
 8002e1c:	e001      	b.n	8002e22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	feeefffc 	.word	0xfeeefffc

08002e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0e7      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b75      	ldr	r3, [pc, #468]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b72      	ldr	r3, [pc, #456]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4970      	ldr	r1, [pc, #448]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b6e      	ldr	r3, [pc, #440]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0cf      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4b66      	ldr	r3, [pc, #408]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d908      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b63      	ldr	r3, [pc, #396]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4960      	ldr	r1, [pc, #384]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d04c      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	4b5a      	ldr	r3, [pc, #360]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d121      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0a6      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed2:	4b54      	ldr	r3, [pc, #336]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d115      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e09a      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eea:	4b4e      	ldr	r3, [pc, #312]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e08e      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efa:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e086      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b46      	ldr	r3, [pc, #280]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4943      	ldr	r1, [pc, #268]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe ffea 	bl	8001ef4 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe ffe6 	bl	8001ef4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e06e      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d208      	bcs.n	8002f7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	492b      	ldr	r1, [pc, #172]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7a:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d210      	bcs.n	8002faa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f88:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 0207 	bic.w	r2, r3, #7
 8002f90:	4923      	ldr	r1, [pc, #140]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f98:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <HAL_RCC_ClockConfig+0x1ec>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e036      	b.n	8003018 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4918      	ldr	r1, [pc, #96]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4910      	ldr	r1, [pc, #64]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe8:	f000 f824 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	490b      	ldr	r1, [pc, #44]	@ (8003028 <HAL_RCC_ClockConfig+0x1f4>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	4a09      	ldr	r2, [pc, #36]	@ (800302c <HAL_RCC_ClockConfig+0x1f8>)
 8003006:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <HAL_RCC_ClockConfig+0x1fc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe ff21 	bl	8001e54 <HAL_InitTick>
 8003012:	4603      	mov	r3, r0
 8003014:	72fb      	strb	r3, [r7, #11]

  return status;
 8003016:	7afb      	ldrb	r3, [r7, #11]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40022000 	.word	0x40022000
 8003024:	40021000 	.word	0x40021000
 8003028:	0800471c 	.word	0x0800471c
 800302c:	20000148 	.word	0x20000148
 8003030:	2000014c 	.word	0x2000014c

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003042:	4b3e      	ldr	r3, [pc, #248]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304c:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d11e      	bne.n	80030a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003068:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003074:	4b31      	ldr	r3, [pc, #196]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	e005      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003084:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003090:	4a2b      	ldr	r2, [pc, #172]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030ac:	4b25      	ldr	r3, [pc, #148]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e004      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030b8:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d134      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0xa6>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d003      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0xac>
 80030d8:	e005      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030da:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x110>)
 80030dc:	617b      	str	r3, [r7, #20]
      break;
 80030de:	e005      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e2:	617b      	str	r3, [r7, #20]
      break;
 80030e4:	e002      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	617b      	str	r3, [r7, #20]
      break;
 80030ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030ec:	4b13      	ldr	r3, [pc, #76]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	3301      	adds	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	fb03 f202 	mul.w	r2, r3, r2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003112:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <HAL_RCC_GetSysClockFreq+0x108>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	0e5b      	lsrs	r3, r3, #25
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	3301      	adds	r3, #1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800312c:	69bb      	ldr	r3, [r7, #24]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	0800472c 	.word	0x0800472c
 8003144:	00f42400 	.word	0x00f42400
 8003148:	007a1200 	.word	0x007a1200

0800314c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003158:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003164:	f7ff fa26 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 8003168:	6178      	str	r0, [r7, #20]
 800316a:	e014      	b.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	4a24      	ldr	r2, [pc, #144]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6593      	str	r3, [r2, #88]	@ 0x58
 8003178:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff fa16 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 8003188:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003194:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800319c:	d10b      	bne.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b80      	cmp	r3, #128	@ 0x80
 80031a2:	d919      	bls.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80031a8:	d902      	bls.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031aa:	2302      	movs	r3, #2
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e013      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b0:	2301      	movs	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e010      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b80      	cmp	r3, #128	@ 0x80
 80031ba:	d902      	bls.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031bc:	2303      	movs	r3, #3
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e00a      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b80      	cmp	r3, #128	@ 0x80
 80031c6:	d102      	bne.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e004      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b70      	cmp	r3, #112	@ 0x70
 80031d2:	d101      	bne.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d4:	2301      	movs	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 0207 	bic.w	r2, r3, #7
 80031e0:	4909      	ldr	r1, [pc, #36]	@ (8003208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e8:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	40022000 	.word	0x40022000

0800320c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e095      	b.n	800334a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800322e:	d009      	beq.n	8003244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
 8003236:	e005      	b.n	8003244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fcd4 	bl	8001c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003284:	d902      	bls.n	800328c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e002      	b.n	8003292 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800328c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003290:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Init+0xa0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	ea42 0103 	orr.w	r1, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	f003 0204 	and.w	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003328:	ea42 0103 	orr.w	r1, r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b088      	sub	sp, #32
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_SPI_Transmit+0x22>
 8003370:	2302      	movs	r3, #2
 8003372:	e15f      	b.n	8003634 <HAL_SPI_Transmit+0x2e2>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800337c:	f7fe fdba 	bl	8001ef4 <HAL_GetTick>
 8003380:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d002      	beq.n	8003398 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003396:	e148      	b.n	800362a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Transmit+0x52>
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033a8:	e13f      	b.n	800362a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2203      	movs	r2, #3
 80033ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	d10f      	bne.n	8003416 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d007      	beq.n	8003434 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800343c:	d94f      	bls.n	80034de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_SPI_Transmit+0xfa>
 8003446:	8afb      	ldrh	r3, [r7, #22]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d142      	bne.n	80034d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003470:	e02f      	b.n	80034d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d112      	bne.n	80034a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	881a      	ldrh	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034a4:	e015      	b.n	80034d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a6:	f7fe fd25 	bl	8001ef4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d803      	bhi.n	80034be <HAL_SPI_Transmit+0x16c>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d102      	bne.n	80034c4 <HAL_SPI_Transmit+0x172>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80034d0:	e0ab      	b.n	800362a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ca      	bne.n	8003472 <HAL_SPI_Transmit+0x120>
 80034dc:	e080      	b.n	80035e0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_SPI_Transmit+0x19a>
 80034e6:	8afb      	ldrh	r3, [r7, #22]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d174      	bne.n	80035d6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d912      	bls.n	800351c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b02      	subs	r3, #2
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800351a:	e05c      	b.n	80035d6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003542:	e048      	b.n	80035d6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d12b      	bne.n	80035aa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d912      	bls.n	8003582 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b02      	subs	r3, #2
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003580:	e029      	b.n	80035d6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035a8:	e015      	b.n	80035d6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035aa:	f7fe fca3 	bl	8001ef4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d803      	bhi.n	80035c2 <HAL_SPI_Transmit+0x270>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_Transmit+0x276>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80035d4:	e029      	b.n	800362a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1b1      	bne.n	8003544 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fb69 	bl	8003cbc <SPI_EndRxTxTransaction>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e003      	b.n	800362a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003632:	7ffb      	ldrb	r3, [r7, #31]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800364a:	2301      	movs	r3, #1
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x26>
 800365e:	2302      	movs	r3, #2
 8003660:	e20a      	b.n	8003a78 <HAL_SPI_TransmitReceive+0x43c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800366a:	f7fe fc43 	bl	8001ef4 <HAL_GetTick>
 800366e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003676:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003686:	7efb      	ldrb	r3, [r7, #27]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d00e      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x6e>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003692:	d106      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x66>
 800369c:	7efb      	ldrb	r3, [r7, #27]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80036a8:	e1e0      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x80>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x80>
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80036c2:	e1d3      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2205      	movs	r2, #5
 80036d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	887a      	ldrh	r2, [r7, #2]
 80036fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800371a:	d802      	bhi.n	8003722 <HAL_SPI_TransmitReceive+0xe6>
 800371c:	8a3b      	ldrh	r3, [r7, #16]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d908      	bls.n	8003734 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e007      	b.n	8003744 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003742:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	d007      	beq.n	8003762 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800376a:	f240 8081 	bls.w	8003870 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_TransmitReceive+0x140>
 8003776:	8a7b      	ldrh	r3, [r7, #18]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d16d      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	881a      	ldrh	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a0:	e05a      	b.n	8003858 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11b      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x1ac>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x1ac>
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d113      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d11c      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x1f4>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	b292      	uxth	r2, r2
 800380e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800382c:	2301      	movs	r3, #1
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003830:	f7fe fb60 	bl	8001ef4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800383c:	429a      	cmp	r2, r3
 800383e:	d80b      	bhi.n	8003858 <HAL_SPI_TransmitReceive+0x21c>
 8003840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d007      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003856:	e109      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d19f      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x166>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d199      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x166>
 800386e:	e0e3      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x244>
 8003878:	8a7b      	ldrh	r3, [r7, #18]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 80cf 	bne.w	8003a1e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d912      	bls.n	80038b0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b02      	subs	r3, #2
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038ae:	e0b6      	b.n	8003a1e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	7812      	ldrb	r2, [r2, #0]
 80038bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d6:	e0a2      	b.n	8003a1e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d134      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x314>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02f      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x314>
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d12c      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d912      	bls.n	8003926 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b02      	subs	r3, #2
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003924:	e012      	b.n	800394c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d148      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x3b4>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d042      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d923      	bls.n	80039be <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	b292      	uxth	r2, r2
 8003982:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b02      	subs	r3, #2
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d81f      	bhi.n	80039ec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	e016      	b.n	80039ec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f103 020c 	add.w	r2, r3, #12
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ec:	2301      	movs	r3, #1
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039f0:	f7fe fa80 	bl	8001ef4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d803      	bhi.n	8003a08 <HAL_SPI_TransmitReceive+0x3cc>
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d102      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x3d2>
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003a1c:	e026      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f47f af57 	bne.w	80038d8 <HAL_SPI_TransmitReceive+0x29c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f47f af50 	bne.w	80038d8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f93d 	bl	8003cbc <SPI_EndRxTxTransaction>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a62:	e003      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3728      	adds	r7, #40	@ 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a90:	f7fe fa30 	bl	8001ef4 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa0:	f7fe fa28 	bl	8001ef4 <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	015b      	lsls	r3, r3, #5
 8003aac:	0d1b      	lsrs	r3, r3, #20
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab6:	e054      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d050      	beq.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac0:	f7fe fa18 	bl	8001ef4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d902      	bls.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d13d      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aee:	d111      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af8:	d004      	beq.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b02:	d107      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b1c:	d10f      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e017      	b.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d19b      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000148 	.word	0x20000148

08003b90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ba2:	f7fe f9a7 	bl	8001ef4 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003bb2:	f7fe f99f 	bl	8001ef4 <HAL_GetTick>
 8003bb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00da      	lsls	r2, r3, #3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	0d1b      	lsrs	r3, r3, #20
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bd8:	e060      	b.n	8003c9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003be0:	d107      	bne.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d050      	beq.n	8003c9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bfa:	f7fe f97b 	bl	8001ef4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d902      	bls.n	8003c10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d13d      	bne.n	8003c8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c28:	d111      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c32:	d004      	beq.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3c:	d107      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c56:	d10f      	bne.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e010      	b.n	8003cae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d196      	bne.n	8003bda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3728      	adds	r7, #40	@ 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000148 	.word	0x20000148

08003cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff5b 	bl	8003b90 <SPI_WaitFifoStateUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e027      	b.n	8003d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2180      	movs	r1, #128	@ 0x80
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff fec0 	bl	8003a80 <SPI_WaitFlagStateUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e014      	b.n	8003d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ff34 	bl	8003b90 <SPI_WaitFifoStateUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e000      	b.n	8003d40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <malloc>:
 8003d48:	4b02      	ldr	r3, [pc, #8]	@ (8003d54 <malloc+0xc>)
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f000 b82d 	b.w	8003dac <_malloc_r>
 8003d52:	bf00      	nop
 8003d54:	20000154 	.word	0x20000154

08003d58 <free>:
 8003d58:	4b02      	ldr	r3, [pc, #8]	@ (8003d64 <free+0xc>)
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f000 b937 	b.w	8003fd0 <_free_r>
 8003d62:	bf00      	nop
 8003d64:	20000154 	.word	0x20000154

08003d68 <sbrk_aligned>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003da8 <sbrk_aligned+0x40>)
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	6831      	ldr	r1, [r6, #0]
 8003d70:	4605      	mov	r5, r0
 8003d72:	b911      	cbnz	r1, 8003d7a <sbrk_aligned+0x12>
 8003d74:	f000 f8e2 	bl	8003f3c <_sbrk_r>
 8003d78:	6030      	str	r0, [r6, #0]
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f000 f8dd 	bl	8003f3c <_sbrk_r>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d103      	bne.n	8003d8e <sbrk_aligned+0x26>
 8003d86:	f04f 34ff 	mov.w	r4, #4294967295
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
 8003d8e:	1cc4      	adds	r4, r0, #3
 8003d90:	f024 0403 	bic.w	r4, r4, #3
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d0f8      	beq.n	8003d8a <sbrk_aligned+0x22>
 8003d98:	1a21      	subs	r1, r4, r0
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f000 f8ce 	bl	8003f3c <_sbrk_r>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d1f2      	bne.n	8003d8a <sbrk_aligned+0x22>
 8003da4:	e7ef      	b.n	8003d86 <sbrk_aligned+0x1e>
 8003da6:	bf00      	nop
 8003da8:	20000364 	.word	0x20000364

08003dac <_malloc_r>:
 8003dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db0:	1ccd      	adds	r5, r1, #3
 8003db2:	f025 0503 	bic.w	r5, r5, #3
 8003db6:	3508      	adds	r5, #8
 8003db8:	2d0c      	cmp	r5, #12
 8003dba:	bf38      	it	cc
 8003dbc:	250c      	movcc	r5, #12
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	db01      	blt.n	8003dc8 <_malloc_r+0x1c>
 8003dc4:	42a9      	cmp	r1, r5
 8003dc6:	d904      	bls.n	8003dd2 <_malloc_r+0x26>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ea8 <_malloc_r+0xfc>
 8003dd6:	f000 f869 	bl	8003eac <__malloc_lock>
 8003dda:	f8d8 3000 	ldr.w	r3, [r8]
 8003dde:	461c      	mov	r4, r3
 8003de0:	bb44      	cbnz	r4, 8003e34 <_malloc_r+0x88>
 8003de2:	4629      	mov	r1, r5
 8003de4:	4630      	mov	r0, r6
 8003de6:	f7ff ffbf 	bl	8003d68 <sbrk_aligned>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	4604      	mov	r4, r0
 8003dee:	d158      	bne.n	8003ea2 <_malloc_r+0xf6>
 8003df0:	f8d8 4000 	ldr.w	r4, [r8]
 8003df4:	4627      	mov	r7, r4
 8003df6:	2f00      	cmp	r7, #0
 8003df8:	d143      	bne.n	8003e82 <_malloc_r+0xd6>
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d04b      	beq.n	8003e96 <_malloc_r+0xea>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	4639      	mov	r1, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	eb04 0903 	add.w	r9, r4, r3
 8003e08:	f000 f898 	bl	8003f3c <_sbrk_r>
 8003e0c:	4581      	cmp	r9, r0
 8003e0e:	d142      	bne.n	8003e96 <_malloc_r+0xea>
 8003e10:	6821      	ldr	r1, [r4, #0]
 8003e12:	1a6d      	subs	r5, r5, r1
 8003e14:	4629      	mov	r1, r5
 8003e16:	4630      	mov	r0, r6
 8003e18:	f7ff ffa6 	bl	8003d68 <sbrk_aligned>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d03a      	beq.n	8003e96 <_malloc_r+0xea>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	442b      	add	r3, r5
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	f8d8 3000 	ldr.w	r3, [r8]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	bb62      	cbnz	r2, 8003e88 <_malloc_r+0xdc>
 8003e2e:	f8c8 7000 	str.w	r7, [r8]
 8003e32:	e00f      	b.n	8003e54 <_malloc_r+0xa8>
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	d420      	bmi.n	8003e7c <_malloc_r+0xd0>
 8003e3a:	2a0b      	cmp	r2, #11
 8003e3c:	d917      	bls.n	8003e6e <_malloc_r+0xc2>
 8003e3e:	1961      	adds	r1, r4, r5
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	6025      	str	r5, [r4, #0]
 8003e44:	bf18      	it	ne
 8003e46:	6059      	strne	r1, [r3, #4]
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	bf08      	it	eq
 8003e4c:	f8c8 1000 	streq.w	r1, [r8]
 8003e50:	5162      	str	r2, [r4, r5]
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	4630      	mov	r0, r6
 8003e56:	f000 f82f 	bl	8003eb8 <__malloc_unlock>
 8003e5a:	f104 000b 	add.w	r0, r4, #11
 8003e5e:	1d23      	adds	r3, r4, #4
 8003e60:	f020 0007 	bic.w	r0, r0, #7
 8003e64:	1ac2      	subs	r2, r0, r3
 8003e66:	bf1c      	itt	ne
 8003e68:	1a1b      	subne	r3, r3, r0
 8003e6a:	50a3      	strne	r3, [r4, r2]
 8003e6c:	e7af      	b.n	8003dce <_malloc_r+0x22>
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	bf0c      	ite	eq
 8003e74:	f8c8 2000 	streq.w	r2, [r8]
 8003e78:	605a      	strne	r2, [r3, #4]
 8003e7a:	e7eb      	b.n	8003e54 <_malloc_r+0xa8>
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	6864      	ldr	r4, [r4, #4]
 8003e80:	e7ae      	b.n	8003de0 <_malloc_r+0x34>
 8003e82:	463c      	mov	r4, r7
 8003e84:	687f      	ldr	r7, [r7, #4]
 8003e86:	e7b6      	b.n	8003df6 <_malloc_r+0x4a>
 8003e88:	461a      	mov	r2, r3
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	d1fb      	bne.n	8003e88 <_malloc_r+0xdc>
 8003e90:	2300      	movs	r3, #0
 8003e92:	6053      	str	r3, [r2, #4]
 8003e94:	e7de      	b.n	8003e54 <_malloc_r+0xa8>
 8003e96:	230c      	movs	r3, #12
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f000 f80c 	bl	8003eb8 <__malloc_unlock>
 8003ea0:	e794      	b.n	8003dcc <_malloc_r+0x20>
 8003ea2:	6005      	str	r5, [r0, #0]
 8003ea4:	e7d6      	b.n	8003e54 <_malloc_r+0xa8>
 8003ea6:	bf00      	nop
 8003ea8:	20000368 	.word	0x20000368

08003eac <__malloc_lock>:
 8003eac:	4801      	ldr	r0, [pc, #4]	@ (8003eb4 <__malloc_lock+0x8>)
 8003eae:	f000 b87f 	b.w	8003fb0 <__retarget_lock_acquire_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	200004a8 	.word	0x200004a8

08003eb8 <__malloc_unlock>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	@ (8003ec0 <__malloc_unlock+0x8>)
 8003eba:	f000 b87a 	b.w	8003fb2 <__retarget_lock_release_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	200004a8 	.word	0x200004a8

08003ec4 <sniprintf>:
 8003ec4:	b40c      	push	{r2, r3}
 8003ec6:	b530      	push	{r4, r5, lr}
 8003ec8:	4b17      	ldr	r3, [pc, #92]	@ (8003f28 <sniprintf+0x64>)
 8003eca:	1e0c      	subs	r4, r1, #0
 8003ecc:	681d      	ldr	r5, [r3, #0]
 8003ece:	b09d      	sub	sp, #116	@ 0x74
 8003ed0:	da08      	bge.n	8003ee4 <sniprintf+0x20>
 8003ed2:	238b      	movs	r3, #139	@ 0x8b
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eda:	b01d      	add	sp, #116	@ 0x74
 8003edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ee0:	b002      	add	sp, #8
 8003ee2:	4770      	bx	lr
 8003ee4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ee8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003eec:	bf14      	ite	ne
 8003eee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ef2:	4623      	moveq	r3, r4
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	9307      	str	r3, [sp, #28]
 8003ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003efc:	9002      	str	r0, [sp, #8]
 8003efe:	9006      	str	r0, [sp, #24]
 8003f00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f06:	ab21      	add	r3, sp, #132	@ 0x84
 8003f08:	a902      	add	r1, sp, #8
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	f000 f905 	bl	800411c <_svfiprintf_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	bfbc      	itt	lt
 8003f16:	238b      	movlt	r3, #139	@ 0x8b
 8003f18:	602b      	strlt	r3, [r5, #0]
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d0dd      	beq.n	8003eda <sniprintf+0x16>
 8003f1e:	9b02      	ldr	r3, [sp, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e7d9      	b.n	8003eda <sniprintf+0x16>
 8003f26:	bf00      	nop
 8003f28:	20000154 	.word	0x20000154

08003f2c <memset>:
 8003f2c:	4402      	add	r2, r0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <_sbrk_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	@ (8003f58 <_sbrk_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd fee0 	bl	8001d0c <_sbrk>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_sbrk_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_sbrk_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	200004a4 	.word	0x200004a4

08003f5c <__errno>:
 8003f5c:	4b01      	ldr	r3, [pc, #4]	@ (8003f64 <__errno+0x8>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000154 	.word	0x20000154

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003fa0 <__libc_init_array+0x38>)
 8003f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa4 <__libc_init_array+0x3c>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	2600      	movs	r6, #0
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	4d0b      	ldr	r5, [pc, #44]	@ (8003fa8 <__libc_init_array+0x40>)
 8003f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003fac <__libc_init_array+0x44>)
 8003f7c:	f000 fba8 	bl	80046d0 <_init>
 8003f80:	1b64      	subs	r4, r4, r5
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	2600      	movs	r6, #0
 8003f86:	42a6      	cmp	r6, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f90:	4798      	blx	r3
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9a:	4798      	blx	r3
 8003f9c:	3601      	adds	r6, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	08004798 	.word	0x08004798
 8003fa4:	08004798 	.word	0x08004798
 8003fa8:	08004798 	.word	0x08004798
 8003fac:	0800479c 	.word	0x0800479c

08003fb0 <__retarget_lock_acquire_recursive>:
 8003fb0:	4770      	bx	lr

08003fb2 <__retarget_lock_release_recursive>:
 8003fb2:	4770      	bx	lr

08003fb4 <memcpy>:
 8003fb4:	440a      	add	r2, r1
 8003fb6:	4291      	cmp	r1, r2
 8003fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fbc:	d100      	bne.n	8003fc0 <memcpy+0xc>
 8003fbe:	4770      	bx	lr
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	d1f9      	bne.n	8003fc2 <memcpy+0xe>
 8003fce:	bd10      	pop	{r4, pc}

08003fd0 <_free_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	2900      	cmp	r1, #0
 8003fd6:	d041      	beq.n	800405c <_free_r+0x8c>
 8003fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fdc:	1f0c      	subs	r4, r1, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bfb8      	it	lt
 8003fe2:	18e4      	addlt	r4, r4, r3
 8003fe4:	f7ff ff62 	bl	8003eac <__malloc_lock>
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <_free_r+0x90>)
 8003fea:	6813      	ldr	r3, [r2, #0]
 8003fec:	b933      	cbnz	r3, 8003ffc <_free_r+0x2c>
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	6014      	str	r4, [r2, #0]
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ff8:	f7ff bf5e 	b.w	8003eb8 <__malloc_unlock>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d908      	bls.n	8004012 <_free_r+0x42>
 8004000:	6820      	ldr	r0, [r4, #0]
 8004002:	1821      	adds	r1, r4, r0
 8004004:	428b      	cmp	r3, r1
 8004006:	bf01      	itttt	eq
 8004008:	6819      	ldreq	r1, [r3, #0]
 800400a:	685b      	ldreq	r3, [r3, #4]
 800400c:	1809      	addeq	r1, r1, r0
 800400e:	6021      	streq	r1, [r4, #0]
 8004010:	e7ed      	b.n	8003fee <_free_r+0x1e>
 8004012:	461a      	mov	r2, r3
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b10b      	cbz	r3, 800401c <_free_r+0x4c>
 8004018:	42a3      	cmp	r3, r4
 800401a:	d9fa      	bls.n	8004012 <_free_r+0x42>
 800401c:	6811      	ldr	r1, [r2, #0]
 800401e:	1850      	adds	r0, r2, r1
 8004020:	42a0      	cmp	r0, r4
 8004022:	d10b      	bne.n	800403c <_free_r+0x6c>
 8004024:	6820      	ldr	r0, [r4, #0]
 8004026:	4401      	add	r1, r0
 8004028:	1850      	adds	r0, r2, r1
 800402a:	4283      	cmp	r3, r0
 800402c:	6011      	str	r1, [r2, #0]
 800402e:	d1e0      	bne.n	8003ff2 <_free_r+0x22>
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	6053      	str	r3, [r2, #4]
 8004036:	4408      	add	r0, r1
 8004038:	6010      	str	r0, [r2, #0]
 800403a:	e7da      	b.n	8003ff2 <_free_r+0x22>
 800403c:	d902      	bls.n	8004044 <_free_r+0x74>
 800403e:	230c      	movs	r3, #12
 8004040:	602b      	str	r3, [r5, #0]
 8004042:	e7d6      	b.n	8003ff2 <_free_r+0x22>
 8004044:	6820      	ldr	r0, [r4, #0]
 8004046:	1821      	adds	r1, r4, r0
 8004048:	428b      	cmp	r3, r1
 800404a:	bf04      	itt	eq
 800404c:	6819      	ldreq	r1, [r3, #0]
 800404e:	685b      	ldreq	r3, [r3, #4]
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	bf04      	itt	eq
 8004054:	1809      	addeq	r1, r1, r0
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	6054      	str	r4, [r2, #4]
 800405a:	e7ca      	b.n	8003ff2 <_free_r+0x22>
 800405c:	bd38      	pop	{r3, r4, r5, pc}
 800405e:	bf00      	nop
 8004060:	20000368 	.word	0x20000368

08004064 <__ssputs_r>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	688e      	ldr	r6, [r1, #8]
 800406a:	461f      	mov	r7, r3
 800406c:	42be      	cmp	r6, r7
 800406e:	680b      	ldr	r3, [r1, #0]
 8004070:	4682      	mov	sl, r0
 8004072:	460c      	mov	r4, r1
 8004074:	4690      	mov	r8, r2
 8004076:	d82d      	bhi.n	80040d4 <__ssputs_r+0x70>
 8004078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800407c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004080:	d026      	beq.n	80040d0 <__ssputs_r+0x6c>
 8004082:	6965      	ldr	r5, [r4, #20]
 8004084:	6909      	ldr	r1, [r1, #16]
 8004086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800408a:	eba3 0901 	sub.w	r9, r3, r1
 800408e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004092:	1c7b      	adds	r3, r7, #1
 8004094:	444b      	add	r3, r9
 8004096:	106d      	asrs	r5, r5, #1
 8004098:	429d      	cmp	r5, r3
 800409a:	bf38      	it	cc
 800409c:	461d      	movcc	r5, r3
 800409e:	0553      	lsls	r3, r2, #21
 80040a0:	d527      	bpl.n	80040f2 <__ssputs_r+0x8e>
 80040a2:	4629      	mov	r1, r5
 80040a4:	f7ff fe82 	bl	8003dac <_malloc_r>
 80040a8:	4606      	mov	r6, r0
 80040aa:	b360      	cbz	r0, 8004106 <__ssputs_r+0xa2>
 80040ac:	6921      	ldr	r1, [r4, #16]
 80040ae:	464a      	mov	r2, r9
 80040b0:	f7ff ff80 	bl	8003fb4 <memcpy>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	6126      	str	r6, [r4, #16]
 80040c2:	6165      	str	r5, [r4, #20]
 80040c4:	444e      	add	r6, r9
 80040c6:	eba5 0509 	sub.w	r5, r5, r9
 80040ca:	6026      	str	r6, [r4, #0]
 80040cc:	60a5      	str	r5, [r4, #8]
 80040ce:	463e      	mov	r6, r7
 80040d0:	42be      	cmp	r6, r7
 80040d2:	d900      	bls.n	80040d6 <__ssputs_r+0x72>
 80040d4:	463e      	mov	r6, r7
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	4632      	mov	r2, r6
 80040da:	4641      	mov	r1, r8
 80040dc:	f000 faa8 	bl	8004630 <memmove>
 80040e0:	68a3      	ldr	r3, [r4, #8]
 80040e2:	1b9b      	subs	r3, r3, r6
 80040e4:	60a3      	str	r3, [r4, #8]
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	4433      	add	r3, r6
 80040ea:	6023      	str	r3, [r4, #0]
 80040ec:	2000      	movs	r0, #0
 80040ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f2:	462a      	mov	r2, r5
 80040f4:	f000 fab6 	bl	8004664 <_realloc_r>
 80040f8:	4606      	mov	r6, r0
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d1e0      	bne.n	80040c0 <__ssputs_r+0x5c>
 80040fe:	6921      	ldr	r1, [r4, #16]
 8004100:	4650      	mov	r0, sl
 8004102:	f7ff ff65 	bl	8003fd0 <_free_r>
 8004106:	230c      	movs	r3, #12
 8004108:	f8ca 3000 	str.w	r3, [sl]
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	e7e9      	b.n	80040ee <__ssputs_r+0x8a>
	...

0800411c <_svfiprintf_r>:
 800411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	4698      	mov	r8, r3
 8004122:	898b      	ldrh	r3, [r1, #12]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	b09d      	sub	sp, #116	@ 0x74
 8004128:	4607      	mov	r7, r0
 800412a:	460d      	mov	r5, r1
 800412c:	4614      	mov	r4, r2
 800412e:	d510      	bpl.n	8004152 <_svfiprintf_r+0x36>
 8004130:	690b      	ldr	r3, [r1, #16]
 8004132:	b973      	cbnz	r3, 8004152 <_svfiprintf_r+0x36>
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	f7ff fe39 	bl	8003dac <_malloc_r>
 800413a:	6028      	str	r0, [r5, #0]
 800413c:	6128      	str	r0, [r5, #16]
 800413e:	b930      	cbnz	r0, 800414e <_svfiprintf_r+0x32>
 8004140:	230c      	movs	r3, #12
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	b01d      	add	sp, #116	@ 0x74
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	2340      	movs	r3, #64	@ 0x40
 8004150:	616b      	str	r3, [r5, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	9309      	str	r3, [sp, #36]	@ 0x24
 8004156:	2320      	movs	r3, #32
 8004158:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800415c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004160:	2330      	movs	r3, #48	@ 0x30
 8004162:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004300 <_svfiprintf_r+0x1e4>
 8004166:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800416a:	f04f 0901 	mov.w	r9, #1
 800416e:	4623      	mov	r3, r4
 8004170:	469a      	mov	sl, r3
 8004172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004176:	b10a      	cbz	r2, 800417c <_svfiprintf_r+0x60>
 8004178:	2a25      	cmp	r2, #37	@ 0x25
 800417a:	d1f9      	bne.n	8004170 <_svfiprintf_r+0x54>
 800417c:	ebba 0b04 	subs.w	fp, sl, r4
 8004180:	d00b      	beq.n	800419a <_svfiprintf_r+0x7e>
 8004182:	465b      	mov	r3, fp
 8004184:	4622      	mov	r2, r4
 8004186:	4629      	mov	r1, r5
 8004188:	4638      	mov	r0, r7
 800418a:	f7ff ff6b 	bl	8004064 <__ssputs_r>
 800418e:	3001      	adds	r0, #1
 8004190:	f000 80a7 	beq.w	80042e2 <_svfiprintf_r+0x1c6>
 8004194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004196:	445a      	add	r2, fp
 8004198:	9209      	str	r2, [sp, #36]	@ 0x24
 800419a:	f89a 3000 	ldrb.w	r3, [sl]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 809f 	beq.w	80042e2 <_svfiprintf_r+0x1c6>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ae:	f10a 0a01 	add.w	sl, sl, #1
 80041b2:	9304      	str	r3, [sp, #16]
 80041b4:	9307      	str	r3, [sp, #28]
 80041b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80041bc:	4654      	mov	r4, sl
 80041be:	2205      	movs	r2, #5
 80041c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c4:	484e      	ldr	r0, [pc, #312]	@ (8004300 <_svfiprintf_r+0x1e4>)
 80041c6:	f7fc f80b 	bl	80001e0 <memchr>
 80041ca:	9a04      	ldr	r2, [sp, #16]
 80041cc:	b9d8      	cbnz	r0, 8004206 <_svfiprintf_r+0xea>
 80041ce:	06d0      	lsls	r0, r2, #27
 80041d0:	bf44      	itt	mi
 80041d2:	2320      	movmi	r3, #32
 80041d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041d8:	0711      	lsls	r1, r2, #28
 80041da:	bf44      	itt	mi
 80041dc:	232b      	movmi	r3, #43	@ 0x2b
 80041de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e2:	f89a 3000 	ldrb.w	r3, [sl]
 80041e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80041e8:	d015      	beq.n	8004216 <_svfiprintf_r+0xfa>
 80041ea:	9a07      	ldr	r2, [sp, #28]
 80041ec:	4654      	mov	r4, sl
 80041ee:	2000      	movs	r0, #0
 80041f0:	f04f 0c0a 	mov.w	ip, #10
 80041f4:	4621      	mov	r1, r4
 80041f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041fa:	3b30      	subs	r3, #48	@ 0x30
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d94b      	bls.n	8004298 <_svfiprintf_r+0x17c>
 8004200:	b1b0      	cbz	r0, 8004230 <_svfiprintf_r+0x114>
 8004202:	9207      	str	r2, [sp, #28]
 8004204:	e014      	b.n	8004230 <_svfiprintf_r+0x114>
 8004206:	eba0 0308 	sub.w	r3, r0, r8
 800420a:	fa09 f303 	lsl.w	r3, r9, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	46a2      	mov	sl, r4
 8004214:	e7d2      	b.n	80041bc <_svfiprintf_r+0xa0>
 8004216:	9b03      	ldr	r3, [sp, #12]
 8004218:	1d19      	adds	r1, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9103      	str	r1, [sp, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfbb      	ittet	lt
 8004222:	425b      	neglt	r3, r3
 8004224:	f042 0202 	orrlt.w	r2, r2, #2
 8004228:	9307      	strge	r3, [sp, #28]
 800422a:	9307      	strlt	r3, [sp, #28]
 800422c:	bfb8      	it	lt
 800422e:	9204      	strlt	r2, [sp, #16]
 8004230:	7823      	ldrb	r3, [r4, #0]
 8004232:	2b2e      	cmp	r3, #46	@ 0x2e
 8004234:	d10a      	bne.n	800424c <_svfiprintf_r+0x130>
 8004236:	7863      	ldrb	r3, [r4, #1]
 8004238:	2b2a      	cmp	r3, #42	@ 0x2a
 800423a:	d132      	bne.n	80042a2 <_svfiprintf_r+0x186>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	9203      	str	r2, [sp, #12]
 8004244:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004248:	3402      	adds	r4, #2
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004310 <_svfiprintf_r+0x1f4>
 8004250:	7821      	ldrb	r1, [r4, #0]
 8004252:	2203      	movs	r2, #3
 8004254:	4650      	mov	r0, sl
 8004256:	f7fb ffc3 	bl	80001e0 <memchr>
 800425a:	b138      	cbz	r0, 800426c <_svfiprintf_r+0x150>
 800425c:	9b04      	ldr	r3, [sp, #16]
 800425e:	eba0 000a 	sub.w	r0, r0, sl
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	4082      	lsls	r2, r0
 8004266:	4313      	orrs	r3, r2
 8004268:	3401      	adds	r4, #1
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004270:	4824      	ldr	r0, [pc, #144]	@ (8004304 <_svfiprintf_r+0x1e8>)
 8004272:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004276:	2206      	movs	r2, #6
 8004278:	f7fb ffb2 	bl	80001e0 <memchr>
 800427c:	2800      	cmp	r0, #0
 800427e:	d036      	beq.n	80042ee <_svfiprintf_r+0x1d2>
 8004280:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <_svfiprintf_r+0x1ec>)
 8004282:	bb1b      	cbnz	r3, 80042cc <_svfiprintf_r+0x1b0>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	3307      	adds	r3, #7
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	3308      	adds	r3, #8
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004292:	4433      	add	r3, r6
 8004294:	9309      	str	r3, [sp, #36]	@ 0x24
 8004296:	e76a      	b.n	800416e <_svfiprintf_r+0x52>
 8004298:	fb0c 3202 	mla	r2, ip, r2, r3
 800429c:	460c      	mov	r4, r1
 800429e:	2001      	movs	r0, #1
 80042a0:	e7a8      	b.n	80041f4 <_svfiprintf_r+0xd8>
 80042a2:	2300      	movs	r3, #0
 80042a4:	3401      	adds	r4, #1
 80042a6:	9305      	str	r3, [sp, #20]
 80042a8:	4619      	mov	r1, r3
 80042aa:	f04f 0c0a 	mov.w	ip, #10
 80042ae:	4620      	mov	r0, r4
 80042b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b4:	3a30      	subs	r2, #48	@ 0x30
 80042b6:	2a09      	cmp	r2, #9
 80042b8:	d903      	bls.n	80042c2 <_svfiprintf_r+0x1a6>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c6      	beq.n	800424c <_svfiprintf_r+0x130>
 80042be:	9105      	str	r1, [sp, #20]
 80042c0:	e7c4      	b.n	800424c <_svfiprintf_r+0x130>
 80042c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042c6:	4604      	mov	r4, r0
 80042c8:	2301      	movs	r3, #1
 80042ca:	e7f0      	b.n	80042ae <_svfiprintf_r+0x192>
 80042cc:	ab03      	add	r3, sp, #12
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	462a      	mov	r2, r5
 80042d2:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <_svfiprintf_r+0x1f0>)
 80042d4:	a904      	add	r1, sp, #16
 80042d6:	4638      	mov	r0, r7
 80042d8:	f3af 8000 	nop.w
 80042dc:	1c42      	adds	r2, r0, #1
 80042de:	4606      	mov	r6, r0
 80042e0:	d1d6      	bne.n	8004290 <_svfiprintf_r+0x174>
 80042e2:	89ab      	ldrh	r3, [r5, #12]
 80042e4:	065b      	lsls	r3, r3, #25
 80042e6:	f53f af2d 	bmi.w	8004144 <_svfiprintf_r+0x28>
 80042ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042ec:	e72c      	b.n	8004148 <_svfiprintf_r+0x2c>
 80042ee:	ab03      	add	r3, sp, #12
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	462a      	mov	r2, r5
 80042f4:	4b05      	ldr	r3, [pc, #20]	@ (800430c <_svfiprintf_r+0x1f0>)
 80042f6:	a904      	add	r1, sp, #16
 80042f8:	4638      	mov	r0, r7
 80042fa:	f000 f879 	bl	80043f0 <_printf_i>
 80042fe:	e7ed      	b.n	80042dc <_svfiprintf_r+0x1c0>
 8004300:	0800475c 	.word	0x0800475c
 8004304:	08004766 	.word	0x08004766
 8004308:	00000000 	.word	0x00000000
 800430c:	08004065 	.word	0x08004065
 8004310:	08004762 	.word	0x08004762

08004314 <_printf_common>:
 8004314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	4616      	mov	r6, r2
 800431a:	4698      	mov	r8, r3
 800431c:	688a      	ldr	r2, [r1, #8]
 800431e:	690b      	ldr	r3, [r1, #16]
 8004320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004324:	4293      	cmp	r3, r2
 8004326:	bfb8      	it	lt
 8004328:	4613      	movlt	r3, r2
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004330:	4607      	mov	r7, r0
 8004332:	460c      	mov	r4, r1
 8004334:	b10a      	cbz	r2, 800433a <_printf_common+0x26>
 8004336:	3301      	adds	r3, #1
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	0699      	lsls	r1, r3, #26
 800433e:	bf42      	ittt	mi
 8004340:	6833      	ldrmi	r3, [r6, #0]
 8004342:	3302      	addmi	r3, #2
 8004344:	6033      	strmi	r3, [r6, #0]
 8004346:	6825      	ldr	r5, [r4, #0]
 8004348:	f015 0506 	ands.w	r5, r5, #6
 800434c:	d106      	bne.n	800435c <_printf_common+0x48>
 800434e:	f104 0a19 	add.w	sl, r4, #25
 8004352:	68e3      	ldr	r3, [r4, #12]
 8004354:	6832      	ldr	r2, [r6, #0]
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	42ab      	cmp	r3, r5
 800435a:	dc26      	bgt.n	80043aa <_printf_common+0x96>
 800435c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	3b00      	subs	r3, #0
 8004364:	bf18      	it	ne
 8004366:	2301      	movne	r3, #1
 8004368:	0692      	lsls	r2, r2, #26
 800436a:	d42b      	bmi.n	80043c4 <_printf_common+0xb0>
 800436c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004370:	4641      	mov	r1, r8
 8004372:	4638      	mov	r0, r7
 8004374:	47c8      	blx	r9
 8004376:	3001      	adds	r0, #1
 8004378:	d01e      	beq.n	80043b8 <_printf_common+0xa4>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	f003 0306 	and.w	r3, r3, #6
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf02      	ittt	eq
 8004386:	68e5      	ldreq	r5, [r4, #12]
 8004388:	6833      	ldreq	r3, [r6, #0]
 800438a:	1aed      	subeq	r5, r5, r3
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	bf0c      	ite	eq
 8004390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004394:	2500      	movne	r5, #0
 8004396:	4293      	cmp	r3, r2
 8004398:	bfc4      	itt	gt
 800439a:	1a9b      	subgt	r3, r3, r2
 800439c:	18ed      	addgt	r5, r5, r3
 800439e:	2600      	movs	r6, #0
 80043a0:	341a      	adds	r4, #26
 80043a2:	42b5      	cmp	r5, r6
 80043a4:	d11a      	bne.n	80043dc <_printf_common+0xc8>
 80043a6:	2000      	movs	r0, #0
 80043a8:	e008      	b.n	80043bc <_printf_common+0xa8>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4652      	mov	r2, sl
 80043ae:	4641      	mov	r1, r8
 80043b0:	4638      	mov	r0, r7
 80043b2:	47c8      	blx	r9
 80043b4:	3001      	adds	r0, #1
 80043b6:	d103      	bne.n	80043c0 <_printf_common+0xac>
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c0:	3501      	adds	r5, #1
 80043c2:	e7c6      	b.n	8004352 <_printf_common+0x3e>
 80043c4:	18e1      	adds	r1, r4, r3
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	2030      	movs	r0, #48	@ 0x30
 80043ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043ce:	4422      	add	r2, r4
 80043d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043d8:	3302      	adds	r3, #2
 80043da:	e7c7      	b.n	800436c <_printf_common+0x58>
 80043dc:	2301      	movs	r3, #1
 80043de:	4622      	mov	r2, r4
 80043e0:	4641      	mov	r1, r8
 80043e2:	4638      	mov	r0, r7
 80043e4:	47c8      	blx	r9
 80043e6:	3001      	adds	r0, #1
 80043e8:	d0e6      	beq.n	80043b8 <_printf_common+0xa4>
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7d9      	b.n	80043a2 <_printf_common+0x8e>
	...

080043f0 <_printf_i>:
 80043f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043f4:	7e0f      	ldrb	r7, [r1, #24]
 80043f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043f8:	2f78      	cmp	r7, #120	@ 0x78
 80043fa:	4691      	mov	r9, r2
 80043fc:	4680      	mov	r8, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	469a      	mov	sl, r3
 8004402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004406:	d807      	bhi.n	8004418 <_printf_i+0x28>
 8004408:	2f62      	cmp	r7, #98	@ 0x62
 800440a:	d80a      	bhi.n	8004422 <_printf_i+0x32>
 800440c:	2f00      	cmp	r7, #0
 800440e:	f000 80d2 	beq.w	80045b6 <_printf_i+0x1c6>
 8004412:	2f58      	cmp	r7, #88	@ 0x58
 8004414:	f000 80b9 	beq.w	800458a <_printf_i+0x19a>
 8004418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800441c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004420:	e03a      	b.n	8004498 <_printf_i+0xa8>
 8004422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004426:	2b15      	cmp	r3, #21
 8004428:	d8f6      	bhi.n	8004418 <_printf_i+0x28>
 800442a:	a101      	add	r1, pc, #4	@ (adr r1, 8004430 <_printf_i+0x40>)
 800442c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004430:	08004489 	.word	0x08004489
 8004434:	0800449d 	.word	0x0800449d
 8004438:	08004419 	.word	0x08004419
 800443c:	08004419 	.word	0x08004419
 8004440:	08004419 	.word	0x08004419
 8004444:	08004419 	.word	0x08004419
 8004448:	0800449d 	.word	0x0800449d
 800444c:	08004419 	.word	0x08004419
 8004450:	08004419 	.word	0x08004419
 8004454:	08004419 	.word	0x08004419
 8004458:	08004419 	.word	0x08004419
 800445c:	0800459d 	.word	0x0800459d
 8004460:	080044c7 	.word	0x080044c7
 8004464:	08004557 	.word	0x08004557
 8004468:	08004419 	.word	0x08004419
 800446c:	08004419 	.word	0x08004419
 8004470:	080045bf 	.word	0x080045bf
 8004474:	08004419 	.word	0x08004419
 8004478:	080044c7 	.word	0x080044c7
 800447c:	08004419 	.word	0x08004419
 8004480:	08004419 	.word	0x08004419
 8004484:	0800455f 	.word	0x0800455f
 8004488:	6833      	ldr	r3, [r6, #0]
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6032      	str	r2, [r6, #0]
 8004490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004498:	2301      	movs	r3, #1
 800449a:	e09d      	b.n	80045d8 <_printf_i+0x1e8>
 800449c:	6833      	ldr	r3, [r6, #0]
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	1d19      	adds	r1, r3, #4
 80044a2:	6031      	str	r1, [r6, #0]
 80044a4:	0606      	lsls	r6, r0, #24
 80044a6:	d501      	bpl.n	80044ac <_printf_i+0xbc>
 80044a8:	681d      	ldr	r5, [r3, #0]
 80044aa:	e003      	b.n	80044b4 <_printf_i+0xc4>
 80044ac:	0645      	lsls	r5, r0, #25
 80044ae:	d5fb      	bpl.n	80044a8 <_printf_i+0xb8>
 80044b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	da03      	bge.n	80044c0 <_printf_i+0xd0>
 80044b8:	232d      	movs	r3, #45	@ 0x2d
 80044ba:	426d      	negs	r5, r5
 80044bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044c0:	4859      	ldr	r0, [pc, #356]	@ (8004628 <_printf_i+0x238>)
 80044c2:	230a      	movs	r3, #10
 80044c4:	e011      	b.n	80044ea <_printf_i+0xfa>
 80044c6:	6821      	ldr	r1, [r4, #0]
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	0608      	lsls	r0, r1, #24
 80044cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80044d0:	d402      	bmi.n	80044d8 <_printf_i+0xe8>
 80044d2:	0649      	lsls	r1, r1, #25
 80044d4:	bf48      	it	mi
 80044d6:	b2ad      	uxthmi	r5, r5
 80044d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044da:	4853      	ldr	r0, [pc, #332]	@ (8004628 <_printf_i+0x238>)
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	bf14      	ite	ne
 80044e0:	230a      	movne	r3, #10
 80044e2:	2308      	moveq	r3, #8
 80044e4:	2100      	movs	r1, #0
 80044e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ea:	6866      	ldr	r6, [r4, #4]
 80044ec:	60a6      	str	r6, [r4, #8]
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	bfa2      	ittt	ge
 80044f2:	6821      	ldrge	r1, [r4, #0]
 80044f4:	f021 0104 	bicge.w	r1, r1, #4
 80044f8:	6021      	strge	r1, [r4, #0]
 80044fa:	b90d      	cbnz	r5, 8004500 <_printf_i+0x110>
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	d04b      	beq.n	8004598 <_printf_i+0x1a8>
 8004500:	4616      	mov	r6, r2
 8004502:	fbb5 f1f3 	udiv	r1, r5, r3
 8004506:	fb03 5711 	mls	r7, r3, r1, r5
 800450a:	5dc7      	ldrb	r7, [r0, r7]
 800450c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004510:	462f      	mov	r7, r5
 8004512:	42bb      	cmp	r3, r7
 8004514:	460d      	mov	r5, r1
 8004516:	d9f4      	bls.n	8004502 <_printf_i+0x112>
 8004518:	2b08      	cmp	r3, #8
 800451a:	d10b      	bne.n	8004534 <_printf_i+0x144>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	07df      	lsls	r7, r3, #31
 8004520:	d508      	bpl.n	8004534 <_printf_i+0x144>
 8004522:	6923      	ldr	r3, [r4, #16]
 8004524:	6861      	ldr	r1, [r4, #4]
 8004526:	4299      	cmp	r1, r3
 8004528:	bfde      	ittt	le
 800452a:	2330      	movle	r3, #48	@ 0x30
 800452c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004530:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004534:	1b92      	subs	r2, r2, r6
 8004536:	6122      	str	r2, [r4, #16]
 8004538:	f8cd a000 	str.w	sl, [sp]
 800453c:	464b      	mov	r3, r9
 800453e:	aa03      	add	r2, sp, #12
 8004540:	4621      	mov	r1, r4
 8004542:	4640      	mov	r0, r8
 8004544:	f7ff fee6 	bl	8004314 <_printf_common>
 8004548:	3001      	adds	r0, #1
 800454a:	d14a      	bne.n	80045e2 <_printf_i+0x1f2>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b004      	add	sp, #16
 8004552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	4833      	ldr	r0, [pc, #204]	@ (800462c <_printf_i+0x23c>)
 8004560:	2778      	movs	r7, #120	@ 0x78
 8004562:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	6831      	ldr	r1, [r6, #0]
 800456a:	061f      	lsls	r7, r3, #24
 800456c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004570:	d402      	bmi.n	8004578 <_printf_i+0x188>
 8004572:	065f      	lsls	r7, r3, #25
 8004574:	bf48      	it	mi
 8004576:	b2ad      	uxthmi	r5, r5
 8004578:	6031      	str	r1, [r6, #0]
 800457a:	07d9      	lsls	r1, r3, #31
 800457c:	bf44      	itt	mi
 800457e:	f043 0320 	orrmi.w	r3, r3, #32
 8004582:	6023      	strmi	r3, [r4, #0]
 8004584:	b11d      	cbz	r5, 800458e <_printf_i+0x19e>
 8004586:	2310      	movs	r3, #16
 8004588:	e7ac      	b.n	80044e4 <_printf_i+0xf4>
 800458a:	4827      	ldr	r0, [pc, #156]	@ (8004628 <_printf_i+0x238>)
 800458c:	e7e9      	b.n	8004562 <_printf_i+0x172>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	f023 0320 	bic.w	r3, r3, #32
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	e7f6      	b.n	8004586 <_printf_i+0x196>
 8004598:	4616      	mov	r6, r2
 800459a:	e7bd      	b.n	8004518 <_printf_i+0x128>
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	6825      	ldr	r5, [r4, #0]
 80045a0:	6961      	ldr	r1, [r4, #20]
 80045a2:	1d18      	adds	r0, r3, #4
 80045a4:	6030      	str	r0, [r6, #0]
 80045a6:	062e      	lsls	r6, r5, #24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0x1c0>
 80045ac:	6019      	str	r1, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0x1c6>
 80045b0:	0668      	lsls	r0, r5, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0x1bc>
 80045b4:	8019      	strh	r1, [r3, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	4616      	mov	r6, r2
 80045bc:	e7bc      	b.n	8004538 <_printf_i+0x148>
 80045be:	6833      	ldr	r3, [r6, #0]
 80045c0:	1d1a      	adds	r2, r3, #4
 80045c2:	6032      	str	r2, [r6, #0]
 80045c4:	681e      	ldr	r6, [r3, #0]
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	2100      	movs	r1, #0
 80045ca:	4630      	mov	r0, r6
 80045cc:	f7fb fe08 	bl	80001e0 <memchr>
 80045d0:	b108      	cbz	r0, 80045d6 <_printf_i+0x1e6>
 80045d2:	1b80      	subs	r0, r0, r6
 80045d4:	6060      	str	r0, [r4, #4]
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	2300      	movs	r3, #0
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045e0:	e7aa      	b.n	8004538 <_printf_i+0x148>
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d0ad      	beq.n	800454c <_printf_i+0x15c>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	079b      	lsls	r3, r3, #30
 80045f4:	d413      	bmi.n	800461e <_printf_i+0x22e>
 80045f6:	68e0      	ldr	r0, [r4, #12]
 80045f8:	9b03      	ldr	r3, [sp, #12]
 80045fa:	4298      	cmp	r0, r3
 80045fc:	bfb8      	it	lt
 80045fe:	4618      	movlt	r0, r3
 8004600:	e7a6      	b.n	8004550 <_printf_i+0x160>
 8004602:	2301      	movs	r3, #1
 8004604:	4632      	mov	r2, r6
 8004606:	4649      	mov	r1, r9
 8004608:	4640      	mov	r0, r8
 800460a:	47d0      	blx	sl
 800460c:	3001      	adds	r0, #1
 800460e:	d09d      	beq.n	800454c <_printf_i+0x15c>
 8004610:	3501      	adds	r5, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	9903      	ldr	r1, [sp, #12]
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	42ab      	cmp	r3, r5
 800461a:	dcf2      	bgt.n	8004602 <_printf_i+0x212>
 800461c:	e7eb      	b.n	80045f6 <_printf_i+0x206>
 800461e:	2500      	movs	r5, #0
 8004620:	f104 0619 	add.w	r6, r4, #25
 8004624:	e7f5      	b.n	8004612 <_printf_i+0x222>
 8004626:	bf00      	nop
 8004628:	0800476d 	.word	0x0800476d
 800462c:	0800477e 	.word	0x0800477e

08004630 <memmove>:
 8004630:	4288      	cmp	r0, r1
 8004632:	b510      	push	{r4, lr}
 8004634:	eb01 0402 	add.w	r4, r1, r2
 8004638:	d902      	bls.n	8004640 <memmove+0x10>
 800463a:	4284      	cmp	r4, r0
 800463c:	4623      	mov	r3, r4
 800463e:	d807      	bhi.n	8004650 <memmove+0x20>
 8004640:	1e43      	subs	r3, r0, #1
 8004642:	42a1      	cmp	r1, r4
 8004644:	d008      	beq.n	8004658 <memmove+0x28>
 8004646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800464a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800464e:	e7f8      	b.n	8004642 <memmove+0x12>
 8004650:	4402      	add	r2, r0
 8004652:	4601      	mov	r1, r0
 8004654:	428a      	cmp	r2, r1
 8004656:	d100      	bne.n	800465a <memmove+0x2a>
 8004658:	bd10      	pop	{r4, pc}
 800465a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800465e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004662:	e7f7      	b.n	8004654 <memmove+0x24>

08004664 <_realloc_r>:
 8004664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004668:	4680      	mov	r8, r0
 800466a:	4615      	mov	r5, r2
 800466c:	460c      	mov	r4, r1
 800466e:	b921      	cbnz	r1, 800467a <_realloc_r+0x16>
 8004670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004674:	4611      	mov	r1, r2
 8004676:	f7ff bb99 	b.w	8003dac <_malloc_r>
 800467a:	b92a      	cbnz	r2, 8004688 <_realloc_r+0x24>
 800467c:	f7ff fca8 	bl	8003fd0 <_free_r>
 8004680:	2400      	movs	r4, #0
 8004682:	4620      	mov	r0, r4
 8004684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004688:	f000 f81a 	bl	80046c0 <_malloc_usable_size_r>
 800468c:	4285      	cmp	r5, r0
 800468e:	4606      	mov	r6, r0
 8004690:	d802      	bhi.n	8004698 <_realloc_r+0x34>
 8004692:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004696:	d8f4      	bhi.n	8004682 <_realloc_r+0x1e>
 8004698:	4629      	mov	r1, r5
 800469a:	4640      	mov	r0, r8
 800469c:	f7ff fb86 	bl	8003dac <_malloc_r>
 80046a0:	4607      	mov	r7, r0
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d0ec      	beq.n	8004680 <_realloc_r+0x1c>
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	462a      	mov	r2, r5
 80046aa:	4621      	mov	r1, r4
 80046ac:	bf28      	it	cs
 80046ae:	4632      	movcs	r2, r6
 80046b0:	f7ff fc80 	bl	8003fb4 <memcpy>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4640      	mov	r0, r8
 80046b8:	f7ff fc8a 	bl	8003fd0 <_free_r>
 80046bc:	463c      	mov	r4, r7
 80046be:	e7e0      	b.n	8004682 <_realloc_r+0x1e>

080046c0 <_malloc_usable_size_r>:
 80046c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c4:	1f18      	subs	r0, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bfbc      	itt	lt
 80046ca:	580b      	ldrlt	r3, [r1, r0]
 80046cc:	18c0      	addlt	r0, r0, r3
 80046ce:	4770      	bx	lr

080046d0 <_init>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	bf00      	nop
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr

080046dc <_fini>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	bf00      	nop
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr
